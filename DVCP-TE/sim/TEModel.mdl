Model {
  Name			  "TEModel"
  Version		  8.3
  MdlSubVersion		  0
  SavedCharacterEncoding  "windows-1252"
  GraphicalInterface {
    NumRootInports	    0
    NumRootOutports	    0
    ParameterArgumentNames  ""
    ComputedModelVersion    "1.1742"
    NumModelReferences	    0
    NumTestPointedSignals   0
  }
  PreLoadFcn		  "initModel"
  SaveDefaultBlockParams  on
  ScopeRefreshTime	  0.035000
  OverrideScopeRefreshTime on
  DisableAllScopes	  off
  DataTypeOverride	  "UseLocalSettings"
  DataTypeOverrideAppliesTo "AllNumericTypes"
  MinMaxOverflowLogging	  "UseLocalSettings"
  MinMaxOverflowArchiveMode "Overwrite"
  FPTRunName		  "Run 1"
  MaxMDLFileLineLength	  120
  StopFcn		  "TEplot"
  Object {
    $PropName		    "BdWindowsInfo"
    $ObjectID		    1
    $ClassName		    "Simulink.BDWindowsInfo"
    Object {
      $PropName		      "WindowsInfo"
      $ObjectID		      2
      $ClassName	      "Simulink.WindowInfo"
      IsActive		      [1]
      Location		      [-8.0, 0.0, 1296.0, 786.0]
      Object {
	$PropName		"ModelBrowserInfo"
	$ObjectID		3
	$ClassName		"Simulink.ModelBrowserInfo"
	Visible			[0]
	DockPosition		"Left"
	Width			[50]
	Height			[50]
	Filter			[9]
      }
      Object {
	$PropName		"ExplorerBarInfo"
	$ObjectID		4
	$ClassName		"Simulink.ExplorerBarInfo"
	Visible			[1]
      }
      Object {
	$PropName		"EditorsInfo"
	$ObjectID		5
	$ClassName		"Simulink.EditorInfo"
	IsActive		[1]
	ViewObjType		"SimulinkSubsys"
	LoadSaveID		"678:279"
	Extents			[1246.0, 612.0]
	ZoomFactor		[1.0]
	Offset			[0.0, 0.0]
      }
    }
  }
  Created		  "Fri Nov 22 10:46:09 2002"
  Creator		  "pydipalli"
  UpdateHistory		  "UpdateHistoryNever"
  ModifiedByFormat	  "%<Auto>"
  LastModifiedBy	  "lexx"
  ModifiedDateFormat	  "%<Auto>"
  LastModifiedDate	  "Wed Jul 08 14:38:49 2015"
  RTWModifiedTimeStamp	  358267126
  ModelVersionFormat	  "1.%<AutoIncrement:1742>"
  ConfigurationManager	  "none"
  SampleTimeColors	  off
  SampleTimeAnnotations	  off
  LibraryLinkDisplay	  "all"
  WideLines		  off
  ShowLineDimensions	  on
  ShowPortDataTypes	  on
  ShowDesignRanges	  off
  ShowLoopsOnError	  on
  IgnoreBidirectionalLines off
  ShowStorageClass	  off
  ShowTestPointIcons	  on
  ShowSignalResolutionIcons on
  ShowViewerIcons	  on
  SortedOrder		  off
  ExecutionContextIcon	  off
  ShowLinearizationAnnotations on
  BlockNameDataTip	  off
  BlockParametersDataTip  off
  BlockDescriptionStringDataTip	off
  ToolBar		  on
  StatusBar		  on
  BrowserShowLibraryLinks off
  BrowserLookUnderMasks	  off
  SimulationMode	  "normal"
  PauseTimes		  "5"
  NumberOfSteps		  1
  SnapshotBufferSize	  10
  SnapshotInterval	  10
  NumberOfLastSnapshots	  0
  LinearizationMsg	  "none"
  Profile		  off
  ParamWorkspaceSource	  "MATLABWorkspace"
  AccelSystemTargetFile	  "accel.tlc"
  AccelTemplateMakefile	  "accel_default_tmf"
  AccelMakeCommand	  "make_rtw"
  TryForcingSFcnDF	  off
  Object {
    $PropName		    "DataLoggingOverride"
    $ObjectID		    6
    $ClassName		    "Simulink.SimulationData.ModelLoggingInfo"
    model_		    "TEModel"
    Array {
      Type		      "Cell"
      Dimension		      1
      Cell		      "TEModel"
      PropName		      "logAsSpecifiedByModels_"
    }
    Array {
      Type		      "Cell"
      Dimension		      1
      Cell		      ""
      PropName		      "logAsSpecifiedByModelsSSIDs_"
    }
  }
  RecordCoverage	  off
  CovPath		  "/"
  CovSaveName		  "covdata"
  CovMetricSettings	  "dw"
  CovNameIncrementing	  off
  CovHtmlReporting	  on
  CovForceBlockReductionOff on
  CovEnableCumulative	  on
  covSaveCumulativeToWorkspaceVar on
  CovSaveSingleToWorkspaceVar on
  CovCumulativeVarName	  "covCumulativeData"
  CovCumulativeReport	  off
  CovReportOnPause	  on
  CovModelRefEnable	  "Off"
  CovExternalEMLEnable	  off
  CovSFcnEnable		  off
  CovBoundaryAbsTol	  0.000010
  CovBoundaryRelTol	  0.010000
  ExtModeBatchMode	  off
  ExtModeEnableFloating	  on
  ExtModeTrigType	  "manual"
  ExtModeTrigMode	  "normal"
  ExtModeTrigPort	  "1"
  ExtModeTrigElement	  "any"
  ExtModeTrigDuration	  1000
  ExtModeTrigDurationFloating "auto"
  ExtModeTrigHoldOff	  0
  ExtModeTrigDelay	  0
  ExtModeTrigDirection	  "rising"
  ExtModeTrigLevel	  0
  ExtModeArchiveMode	  "off"
  ExtModeAutoIncOneShot	  off
  ExtModeIncDirWhenArm	  off
  ExtModeAddSuffixToVar	  off
  ExtModeWriteAllDataToWs off
  ExtModeArmWhenConnect	  on
  ExtModeSkipDownloadWhenConnect off
  ExtModeLogAll		  on
  ExtModeAutoUpdateStatusClock on
  BufferReuse		  on
  ShowModelReferenceBlockVersion off
  ShowModelReferenceBlockIO off
  Array {
    Type		    "Handle"
    Dimension		    1
    Simulink.ConfigSet {
      $ObjectID		      7
      Version		      "1.14.2"
      Array {
	Type			"Handle"
	Dimension		8
	Simulink.SolverCC {
	  $ObjectID		  8
	  Version		  "1.14.2"
	  StartTime		  "0.0"
	  StopTime		  "72"
	  AbsTol		  "auto"
	  FixedStep		  "Ts_base"
	  InitialStep		  "auto"
	  MaxNumMinSteps	  "-1"
	  MaxOrder		  5
	  ZcThreshold		  "auto"
	  ConsecutiveZCsStepRelTol "10*128*eps"
	  MaxConsecutiveZCs	  "1000"
	  ExtrapolationOrder	  4
	  NumberNewtonIterations  1
	  MaxStep		  "Ts_base"
	  MinStep		  "1e-6"
	  MaxConsecutiveMinStep	  "1"
	  RelTol		  "1e-6"
	  SolverMode		  "SingleTasking"
	  EnableConcurrentExecution off
	  ConcurrentTasks	  off
	  Solver		  "ode1"
	  SolverName		  "ode1"
	  SolverJacobianMethodControl "auto"
	  ShapePreserveControl	  "DisableAll"
	  ZeroCrossControl	  "UseLocalSettings"
	  ZeroCrossAlgorithm	  "Nonadaptive"
	  AlgebraicLoopSolver	  "TrustRegion"
	  SolverResetMethod	  "Fast"
	  PositivePriorityOrder	  off
	  AutoInsertRateTranBlk	  off
	  SampleTimeConstraint	  "Unconstrained"
	  InsertRTBMode		  "Whenever possible"
	}
	Simulink.DataIOCC {
	  $ObjectID		  9
	  Version		  "1.14.2"
	  Decimation		  "1"
	  ExternalInput		  "[t, u]"
	  FinalStateName	  "xFinal"
	  InitialState		  "xInitial"
	  LimitDataPoints	  off
	  MaxDataPoints		  "1000"
	  LoadExternalInput	  off
	  LoadInitialState	  on
	  SaveFinalState	  on
	  SaveCompleteFinalSimState off
	  SaveFormat		  "Structure"
	  SignalLoggingSaveFormat "ModelDataLogs"
	  SaveOutput		  off
	  SaveState		  off
	  SignalLogging		  on
	  DSMLogging		  on
	  InspectSignalLogs	  off
	  VisualizeSimOutput	  on
	  SaveTime		  off
	  ReturnWorkspaceOutputs  off
	  StateSaveName		  "xout"
	  TimeSaveName		  "tout"
	  OutputSaveName	  "yout"
	  SignalLoggingName	  "sigsOut"
	  DSMLoggingName	  "dsmout"
	  OutputOption		  "RefineOutputTimes"
	  OutputTimes		  "[]"
	  ReturnWorkspaceOutputsName "out"
	  Refine		  "1"
	}
	Simulink.OptimizationCC {
	  $ObjectID		  10
	  Version		  "1.14.2"
	  Array {
	    Type		    "Cell"
	    Dimension		    4
	    Cell		    "ZeroExternalMemoryAtStartup"
	    Cell		    "ZeroInternalMemoryAtStartup"
	    Cell		    "NoFixptDivByZeroProtection"
	    Cell		    "OptimizeModelRefInitCode"
	    PropName		    "DisabledProps"
	  }
	  BlockReduction	  on
	  BooleanDataType	  on
	  ConditionallyExecuteInputs on
	  InlineParams		  off
	  UseIntDivNetSlope	  off
	  UseFloatMulNetSlope	  off
	  DefaultUnderspecifiedDataType	"double"
	  UseSpecifiedMinMax	  off
	  InlineInvariantSignals  off
	  OptimizeBlockIOStorage  on
	  BufferReuse		  on
	  EnhancedBackFolding	  off
	  CachingGlobalReferences off
	  GlobalBufferReuse	  on
	  StrengthReduction	  off
	  ExpressionFolding	  on
	  BooleansAsBitfields	  off
	  BitfieldContainerType	  "uint_T"
	  EnableMemcpy		  on
	  MemcpyThreshold	  64
	  PassReuseOutputArgsAs	  "Structure reference"
	  ExpressionDepthLimit	  2147483647
	  FoldNonRolledExpr	  on
	  LocalBlockOutputs	  on
	  RollThreshold		  5
	  SystemCodeInlineAuto	  off
	  StateBitsets		  off
	  DataBitsets		  off
	  ActiveStateOutputEnumStorageType "Native Integer"
	  UseTempVars		  off
	  ZeroExternalMemoryAtStartup on
	  ZeroInternalMemoryAtStartup on
	  InitFltsAndDblsToZero	  on
	  NoFixptDivByZeroProtection off
	  EfficientFloat2IntCast  off
	  EfficientMapNaN2IntZero on
	  OptimizeModelRefInitCode off
	  LifeSpan		  "inf"
	  MaxStackSize		  "Inherit from target"
	  BufferReusableBoundary  on
	  SimCompilerOptimization "Off"
	  AccelVerboseBuild	  off
	  ParallelExecutionInRapidAccelerator on
	}
	Simulink.DebuggingCC {
	  $ObjectID		  11
	  Version		  "1.14.2"
	  RTPrefix		  "error"
	  ConsistencyChecking	  "none"
	  ArrayBoundsChecking	  "none"
	  SignalInfNanChecking	  "none"
	  SignalRangeChecking	  "none"
	  ReadBeforeWriteMsg	  "UseLocalSettings"
	  WriteAfterWriteMsg	  "UseLocalSettings"
	  WriteAfterReadMsg	  "UseLocalSettings"
	  AlgebraicLoopMsg	  "warning"
	  ArtificialAlgebraicLoopMsg "warning"
	  SaveWithDisabledLinksMsg "none"
	  SaveWithParameterizedLinksMsg	"none"
	  CheckSSInitialOutputMsg on
	  UnderspecifiedInitializationDetection	"Classic"
	  MergeDetectMultiDrivingBlocksExec "none"
	  CheckExecutionContextPreStartOutputMsg off
	  CheckExecutionContextRuntimeOutputMsg	off
	  SignalResolutionControl "TryResolveAllWithWarning"
	  BlockPriorityViolationMsg "warning"
	  MinStepSizeMsg	  "warning"
	  TimeAdjustmentMsg	  "none"
	  MaxConsecutiveZCsMsg	  "error"
	  MaskedZcDiagnostic	  "warning"
	  IgnoredZcDiagnostic	  "warning"
	  SolverPrmCheckMsg	  "none"
	  InheritedTsInSrcMsg	  "warning"
	  DiscreteInheritContinuousMsg "warning"
	  MultiTaskDSMMsg	  "warning"
	  MultiTaskCondExecSysMsg "none"
	  MultiTaskRateTransMsg	  "error"
	  SingleTaskRateTransMsg  "none"
	  TasksWithSamePriorityMsg "warning"
	  SigSpecEnsureSampleTimeMsg "warning"
	  CheckMatrixSingularityMsg "none"
	  IntegerOverflowMsg	  "warning"
	  Int32ToFloatConvMsg	  "warning"
	  ParameterDowncastMsg	  "error"
	  ParameterOverflowMsg	  "error"
	  ParameterUnderflowMsg	  "none"
	  ParameterPrecisionLossMsg "warning"
	  ParameterTunabilityLossMsg "warning"
	  FixptConstUnderflowMsg  "none"
	  FixptConstOverflowMsg	  "none"
	  FixptConstPrecisionLossMsg "none"
	  UnderSpecifiedDataTypeMsg "none"
	  UnnecessaryDatatypeConvMsg "none"
	  VectorMatrixConversionMsg "none"
	  InvalidFcnCallConnMsg	  "error"
	  FcnCallInpInsideContextMsg "UseLocalSettings"
	  SignalLabelMismatchMsg  "none"
	  UnconnectedInputMsg	  "warning"
	  UnconnectedOutputMsg	  "warning"
	  UnconnectedLineMsg	  "warning"
	  SFcnCompatibilityMsg	  "none"
	  FrameProcessingCompatibilityMsg "warning"
	  UniqueDataStoreMsg	  "none"
	  BusObjectLabelMismatch  "warning"
	  RootOutportRequireBusObject "warning"
	  AssertControl		  "UseLocalSettings"
	  EnableOverflowDetection off
	  ModelReferenceIOMsg	  "none"
	  ModelReferenceMultiInstanceNormalModeStructChecksumCheck "error"
	  ModelReferenceVersionMismatchMessage "none"
	  ModelReferenceIOMismatchMessage "none"
	  ModelReferenceCSMismatchMessage "none"
	  UnknownTsInhSupMsg	  "warning"
	  ModelReferenceDataLoggingMessage "warning"
	  ModelReferenceSymbolNameMessage "warning"
	  ModelReferenceExtraNoncontSigs "error"
	  StateNameClashWarn	  "warning"
	  SimStateInterfaceChecksumMismatchMsg "warning"
	  SimStateOlderReleaseMsg "error"
	  InitInArrayFormatMsg	  "warning"
	  StrictBusMsg		  "ErrorLevel1"
	  BusNameAdapt		  "WarnAndRepair"
	  NonBusSignalsTreatedAsBus "none"
	  LoggingUnavailableSignals "error"
	  BlockIODiagnostic	  "none"
	  SFUnusedDataAndEventsDiag "warning"
	  SFUnexpectedBacktrackingDiag "warning"
	  SFInvalidInputDataAccessInChartInitDiag "warning"
	  SFNoUnconditionalDefaultTransitionDiag "warning"
	  SFTransitionOutsideNaturalParentDiag "warning"
	  SFUnconditionalTransitionShadowingDiag "warning"
	  SFUndirectedBroadcastEventsDiag "warning"
	  SFTransitionActionBeforeConditionDiag	"warning"
	}
	Simulink.HardwareCC {
	  $ObjectID		  12
	  Version		  "1.14.2"
	  ProdBitPerChar	  8
	  ProdBitPerShort	  16
	  ProdBitPerInt		  32
	  ProdBitPerLong	  32
	  ProdBitPerLongLong	  64
	  ProdBitPerFloat	  32
	  ProdBitPerDouble	  64
	  ProdBitPerPointer	  32
	  ProdLargestAtomicInteger "Char"
	  ProdLargestAtomicFloat  "None"
	  ProdIntDivRoundTo	  "Undefined"
	  ProdEndianess		  "Unspecified"
	  ProdWordSize		  32
	  ProdShiftRightIntArith  on
	  ProdLongLongMode	  off
	  ProdHWDeviceType	  "32-bit Generic"
	  TargetBitPerChar	  8
	  TargetBitPerShort	  16
	  TargetBitPerInt	  32
	  TargetBitPerLong	  32
	  TargetBitPerLongLong	  64
	  TargetBitPerFloat	  32
	  TargetBitPerDouble	  64
	  TargetBitPerPointer	  32
	  TargetLargestAtomicInteger "Char"
	  TargetLargestAtomicFloat "None"
	  TargetShiftRightIntArith on
	  TargetLongLongMode	  off
	  TargetIntDivRoundTo	  "Undefined"
	  TargetEndianess	  "Unspecified"
	  TargetWordSize	  32
	  TargetTypeEmulationWarnSuppressLevel 0
	  TargetPreprocMaxBitsSint 32
	  TargetPreprocMaxBitsUint 32
	  TargetHWDeviceType	  "Specified"
	  TargetUnknown		  on
	  ProdEqTarget		  on
	}
	Simulink.ModelReferenceCC {
	  $ObjectID		  13
	  Version		  "1.14.2"
	  UpdateModelReferenceTargets "IfOutOfDateOrStructuralChange"
	  CheckModelReferenceTargetMessage "error"
	  EnableParallelModelReferenceBuilds off
	  ParallelModelReferenceErrorOnInvalidPool on
	  ParallelModelReferenceMATLABWorkerInit "None"
	  ModelReferenceNumInstancesAllowed "Multi"
	  PropagateVarSize	  "Infer from blocks in model"
	  ModelReferencePassRootInputsByReference on
	  ModelReferenceMinAlgLoopOccurrences off
	  PropagateSignalLabelsOutOfModel off
	  SupportModelReferenceSimTargetCustomCode off
	}
	Simulink.SFSimCC {
	  $ObjectID		  14
	  Version		  "1.14.2"
	  SFSimEnableDebug	  on
	  SFSimOverflowDetection  on
	  SFSimEcho		  on
	  SimBlas		  on
	  SimCtrlC		  on
	  SimExtrinsic		  on
	  SimIntegrity		  on
	  SimUseLocalCustomCode	  off
	  SimParseCustomCode	  on
	  SimBuildMode		  "sf_incremental_build"
	  SimGenImportedTypeDefs  off
	}
	Simulink.RTWCC {
	  $BackupClass		  "Simulink.RTWCC"
	  $ObjectID		  15
	  Version		  "1.14.2"
	  Array {
	    Type		    "Cell"
	    Dimension		    1
	    Cell		    "IncludeHyperlinkInReport"
	    PropName		    "DisabledProps"
	  }
	  SystemTargetFile	  "grt.tlc"
	  TLCOptions		  ""
	  GenCodeOnly		  off
	  MakeCommand		  "make_rtw"
	  GenerateMakefile	  on
	  PackageGeneratedCodeAndArtifacts off
	  PackageName		  ""
	  TemplateMakefile	  "grt_default_tmf"
	  PostCodeGenCommand	  ""
	  Description		  ""
	  GenerateReport	  off
	  SaveLog		  off
	  RTWVerbose		  on
	  RetainRTWFile		  off
	  ProfileTLC		  off
	  TLCDebug		  off
	  TLCCoverage		  off
	  TLCAssert		  off
	  ProcessScriptMode	  "Default"
	  ConfigurationMode	  "Optimized"
	  ProcessScript		  ""
	  ConfigurationScript	  ""
	  ConfigAtBuild		  off
	  RTWUseLocalCustomCode	  off
	  RTWUseSimCustomCode	  off
	  CustomSourceCode	  ""
	  CustomHeaderCode	  ""
	  CustomInclude		  ""
	  CustomSource		  ""
	  CustomLibrary		  ""
	  CustomInitializer	  ""
	  CustomTerminator	  ""
	  Toolchain		  "Automatically locate an installed toolchain"
	  BuildConfiguration	  "Faster Builds"
	  IncludeHyperlinkInReport off
	  LaunchReport		  off
	  PortableWordSizes	  off
	  CreateSILPILBlock	  "None"
	  CodeExecutionProfiling  off
	  CodeExecutionProfileVariable "executionProfile"
	  CodeProfilingSaveOptions "SummaryOnly"
	  CodeProfilingInstrumentation off
	  SILDebugging		  off
	  TargetLang		  "C"
	  IncludeBusHierarchyInRTWFileBlockHierarchyMap	off
	  IncludeERTFirstTime	  on
	  GenerateTraceInfo	  off
	  GenerateTraceReport	  off
	  GenerateTraceReportSl	  off
	  GenerateTraceReportSf	  off
	  GenerateTraceReportEml  off
	  GenerateCodeInfo	  off
	  GenerateWebview	  off
	  GenerateCodeMetricsReport off
	  GenerateCodeReplacementReport	off
	  RTWCompilerOptimization "Off"
	  RTWCustomCompilerOptimizations ""
	  CheckMdlBeforeBuild	  "Off"
	  CustomRebuildMode	  "OnUpdate"
	  DataInitializer	  ""
	  SharedConstantsCachingThreshold 1024
	  Array {
	    Type		    "Handle"
	    Dimension		    2
	    Simulink.CodeAppCC {
	      $ObjectID		      16
	      Version		      "1.14.2"
	      Array {
		Type			"Cell"
		Dimension		9
		Cell			"IgnoreCustomStorageClasses"
		Cell			"InsertBlockDesc"
		Cell			"SFDataObjDesc"
		Cell			"SimulinkDataObjDesc"
		Cell			"DefineNamingRule"
		Cell			"SignalNamingRule"
		Cell			"ParamNamingRule"
		Cell			"InlinedPrmAccess"
		Cell			"CustomSymbolStr"
		PropName		"DisabledProps"
	      }
	      ForceParamTrailComments off
	      GenerateComments	      on
	      CommentStyle	      "Auto"
	      IgnoreCustomStorageClasses on
	      IgnoreTestpoints	      off
	      IncHierarchyInIds	      off
	      MaxIdLength	      31
	      PreserveName	      off
	      PreserveNameWithParent  off
	      ShowEliminatedStatement off
	      OperatorAnnotations     off
	      IncAutoGenComments      off
	      SimulinkDataObjDesc     off
	      SFDataObjDesc	      off
	      MATLABFcnDesc	      off
	      IncDataTypeInIds	      off
	      MangleLength	      1
	      CustomSymbolStrGlobalVar "$R$N$M"
	      CustomSymbolStrType     "$N$R$M_T"
	      CustomSymbolStrField    "$N$M"
	      CustomSymbolStrFcn      "$R$N$M$F"
	      CustomSymbolStrFcnArg   "rt$I$N$M"
	      CustomSymbolStrBlkIO    "rtb_$N$M"
	      CustomSymbolStrTmpVar   "$N$M"
	      CustomSymbolStrMacro    "$R$N$M"
	      CustomSymbolStrUtil     "$N$C"
	      DefineNamingRule	      "None"
	      ParamNamingRule	      "None"
	      SignalNamingRule	      "None"
	      InsertBlockDesc	      off
	      InsertPolySpaceComments off
	      SimulinkBlockComments   on
	      MATLABSourceComments    off
	      EnableCustomComments    off
	      InternalIdentifier      "Shortened"
	      InlinedPrmAccess	      "Literals"
	      ReqsInCode	      off
	      UseSimReservedNames     off
	    }
	    Simulink.GRTTargetCC {
	      $BackupClass	      "Simulink.TargetCC"
	      $ObjectID		      17
	      Version		      "1.14.2"
	      Array {
		Type			"Cell"
		Dimension		11
		Cell			"IncludeMdlTerminateFcn"
		Cell			"CombineOutputUpdateFcns"
		Cell			"SuppressErrorStatus"
		Cell			"ERTCustomFileBanners"
		Cell			"GenerateSampleERTMain"
		Cell			"SupportContinuousTime"
		Cell			"PurelyIntegerCode"
		Cell			"SupportNonInlinedSFcns"
		Cell			"SupportComplex"
		Cell			"SupportAbsoluteTime"
		Cell			"GenerateAllocFcn"
		PropName		"DisabledProps"
	      }
	      TargetFcnLib	      "ansi_tfl_tmw.mat"
	      TargetLibSuffix	      ""
	      TargetPreCompLibLocation ""
	      GenFloatMathFcnCalls    "NOT IN USE"
	      TargetLangStandard      "C89/C90 (ANSI)"
	      CodeReplacementLibrary  "None"
	      UtilityFuncGeneration   "Auto"
	      ERTMultiwordTypeDef     "System defined"
	      ERTMultiwordLength      256
	      MultiwordLength	      2048
	      GenerateFullHeader      on
	      GenerateSampleERTMain   off
	      GenerateTestInterfaces  off
	      ModelReferenceCompliant on
	      ParMdlRefBuildCompliant on
	      CompOptLevelCompliant   on
	      ConcurrentExecutionCompliant on
	      IncludeMdlTerminateFcn  on
	      GeneratePreprocessorConditionals "Disable all"
	      CombineOutputUpdateFcns off
	      CombineSignalStateStructs	off
	      SuppressErrorStatus     off
	      ERTFirstTimeCompliant   off
	      IncludeFileDelimiter    "Auto"
	      ERTCustomFileBanners    off
	      SupportAbsoluteTime     on
	      LogVarNameModifier      "rt_"
	      MatFileLogging	      on
	      MultiInstanceERTCode    off
	      CodeInterfacePackaging  "Nonreusable function"
	      SupportNonFinite	      on
	      SupportComplex	      on
	      PurelyIntegerCode	      off
	      SupportContinuousTime   on
	      SupportNonInlinedSFcns  on
	      SupportVariableSizeSignals off
	      EnableShiftOperators    on
	      ParenthesesLevel	      "Nominal"
	      MATLABClassNameForMDSCustomization "Simulink.SoftwareTarget.GRTCustomization"
	      ModelStepFunctionPrototypeControlCompliant off
	      CPPClassGenCompliant    on
	      AutosarCompliant	      off
	      GRTInterface	      on
	      GenerateAllocFcn	      off
	      UseMalloc		      off
	      ExtMode		      off
	      ExtModeStaticAlloc      off
	      ExtModeTesting	      off
	      ExtModeStaticAllocSize  1000000
	      ExtModeTransport	      0
	      ExtModeMexFile	      "ext_comm"
	      ExtModeIntrfLevel	      "Level1"
	      RTWCAPISignals	      off
	      RTWCAPIParams	      off
	      RTWCAPIStates	      off
	      RTWCAPIRootIO	      off
	      GenerateASAP2	      off
	      MultiInstanceErrorCode  "Error"
	    }
	    PropName		    "Components"
	  }
	}
	PropName		"Components"
      }
      Name		      "Configuration"
      CurrentDlgPage	      "Diagnostics/Saving"
      ConfigPrmDlgPosition     [ 171, -6, 1267, 738 ] 
    }
    PropName		    "ConfigurationSets"
  }
  Simulink.ConfigSet {
    $PropName		    "ActiveConfigurationSet"
    $ObjectID		    7
  }
  Object {
    $PropName		    "DataTransfer"
    $ObjectID		    18
    $ClassName		    "Simulink.GlobalDataTransfer"
    DefaultTransitionBetweenSyncTasks "Ensure deterministic transfer (maximum delay)"
    DefaultTransitionBetweenAsyncTasks "Ensure data integrity only"
    DefaultTransitionBetweenContTasks "Ensure deterministic transfer (minimum delay)"
    DefaultExtrapolationMethodBetweenContTasks "None"
    AutoInsertRateTranBlk   [0]
  }
  ExplicitPartitioning	  off
  BlockDefaults {
    ForegroundColor	    "black"
    BackgroundColor	    "white"
    DropShadow		    off
    NamePlacement	    "normal"
    FontName		    "Helvetica"
    FontSize		    10
    FontWeight		    "normal"
    FontAngle		    "normal"
    ShowName		    on
    BlockRotation	    0
    BlockMirror		    off
  }
  AnnotationDefaults {
    HorizontalAlignment	    "center"
    VerticalAlignment	    "middle"
    ForegroundColor	    "black"
    BackgroundColor	    "white"
    DropShadow		    off
    FontName		    "Helvetica"
    FontSize		    10
    FontWeight		    "normal"
    FontAngle		    "normal"
    UseDisplayTextAsClickCallback off
  }
  LineDefaults {
    FontName		    "Helvetica"
    FontSize		    9
    FontWeight		    "normal"
    FontAngle		    "normal"
  }
  MaskDefaults {
    SelfModifiable	    "off"
    IconFrame		    "on"
    IconOpaque		    "on"
    RunInitForIconRedraw    "off"
    IconRotate		    "none"
    PortRotate		    "default"
    IconUnits		    "autoscale"
  }
  MaskParameterDefaults {
    Evaluate		    "on"
    Tunable		    "on"
    NeverSave		    "off"
    Internal		    "off"
    ReadOnly		    "off"
    Enabled		    "on"
    Visible		    "on"
    ToolTip		    "on"
  }
  BlockParameterDefaults {
    Block {
      BlockType		      Clock
      DisplayTime	      off
      Decimation	      "10"
    }
    Block {
      BlockType		      Constant
      Value		      "1"
      VectorParams1D	      on
      SamplingMode	      "Sample based"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit from 'Constant value'"
      LockScale		      off
      SampleTime	      "inf"
      FramePeriod	      "inf"
      PreserveConstantTs      off
    }
    Block {
      BlockType		      Demux
      Outputs		      "4"
      DisplayOption	      "none"
      BusSelectionMode	      off
    }
    Block {
      BlockType		      DiscretePulseGenerator
      PulseType		      "Sample based"
      TimeSource	      "Use simulation time"
      Amplitude		      "1"
      Period		      "2"
      PulseWidth	      "1"
      PhaseDelay	      "0"
      SampleTime	      "1"
      VectorParams1D	      on
    }
    Block {
      BlockType		      Display
      Format		      "short"
      Decimation	      "10"
      Floating		      off
      Lockdown		      off
      SampleTime	      "-1"
    }
    Block {
      BlockType		      From
      GotoTag		      "A"
      IconDisplay	      "Tag"
      TagVisibility	      "local"
    }
    Block {
      BlockType		      Gain
      Gain		      "1"
      Multiplication	      "Element-wise(K.*u)"
      ParamMin		      "[]"
      ParamMax		      "[]"
      ParamDataTypeStr	      "Inherit: Same as input"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Same as input"
      LockScale		      off
      RndMeth		      "Floor"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
    }
    Block {
      BlockType		      Goto
      GotoTag		      "A"
      IconDisplay	      "Tag"
      TagVisibility	      "local"
    }
    Block {
      BlockType		      Inport
      Port		      "1"
      OutputFunctionCall      off
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: auto"
      LockScale		      off
      BusOutputAsStruct	      off
      PortDimensions	      "-1"
      VarSizeSig	      "Inherit"
      SampleTime	      "-1"
      SignalType	      "auto"
      SamplingMode	      "auto"
      LatchByDelayingOutsideSignal off
      LatchInputForFeedbackSignals off
      Interpolate	      on
    }
    Block {
      BlockType		      Memory
      X0		      "0"
      InheritSampleTime	      off
      LinearizeMemory	      off
      LinearizeAsDelay	      off
      StateMustResolveToSignalObject off
      RTWStateStorageClass    "Auto"
    }
    Block {
      BlockType		      MultiPortSwitch
      DataPortOrder	      "One-based contiguous"
      Inputs		      "3"
      DataPortIndices	      "{1,2,3}"
      DataPortForDefault      "Last data port"
      DiagnosticForDefault    "Error"
      zeroidx		      off
      InputSameDT	      on
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit via internal rule"
      LockScale		      off
      RndMeth		      "Floor"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
      AllowDiffInputSizes     off
    }
    Block {
      BlockType		      Mux
      Inputs		      "4"
      DisplayOption	      "none"
      UseBusObject	      off
      BusObject		      "BusObject"
      NonVirtualBus	      off
    }
    Block {
      BlockType		      Outport
      Port		      "1"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: auto"
      LockScale		      off
      BusOutputAsStruct	      off
      PortDimensions	      "-1"
      VarSizeSig	      "Inherit"
      SampleTime	      "-1"
      SignalType	      "auto"
      SamplingMode	      "auto"
      SourceOfInitialOutputValue "Dialog"
      OutputWhenDisabled      "held"
      InitialOutput	      "[]"
    }
    Block {
      BlockType		      Polyval
      Coefs		      "[1,2]"
    }
    Block {
      BlockType		      Product
      Inputs		      "2"
      Multiplication	      "Element-wise(.*)"
      CollapseMode	      "All dimensions"
      CollapseDim	      "1"
      InputSameDT	      on
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Same as first input"
      LockScale		      off
      RndMeth		      "Zero"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
    }
    Block {
      BlockType		      RateLimiter
      RisingSlewLimit	      "1"
      FallingSlewLimit	      "-1"
      SampleTimeMode	      "continuous"
      InitialCondition	      "0"
      LinearizeAsGain	      on
    }
    Block {
      BlockType		      S-Function
      FunctionName	      "system"
      SFunctionModules	      "''"
      PortCounts	      "[]"
      SFunctionDeploymentMode off
    }
    Block {
      BlockType		      Scope
      ModelBased	      off
      TickLabels	      "OneTimeTick"
      ZoomMode		      "on"
      Grid		      "on"
      TimeRange		      "auto"
      YMin		      "-5"
      YMax		      "5"
      SaveToWorkspace	      off
      SaveName		      "ScopeData"
      DataFormat	      "Array"
      LimitDataPoints	      on
      MaxDataPoints	      "5000"
      Decimation	      "1"
      SampleInput	      off
      SampleTime	      "-1"
    }
    Block {
      BlockType		      Selector
      NumberOfDimensions      "1"
      IndexMode		      "One-based"
      InputPortWidth	      "-1"
      SampleTime	      "-1"
      IndexOptions	      "Index vector (dialog)"
      Indices		      "1"
      OutputSizes	      "1"
    }
    Block {
      BlockType		      Step
      Time		      "1"
      Before		      "0"
      After		      "1"
      SampleTime	      "-1"
      VectorParams1D	      on
      ZeroCross		      on
    }
    Block {
      BlockType		      SubSystem
      ShowPortLabels	      "FromPortIcon"
      Permissions	      "ReadWrite"
      PermitHierarchicalResolution "All"
      TreatAsAtomicUnit	      off
      MinAlgLoopOccurrences   off
      PropExecContextOutsideSubsystem off
      CheckFcnCallInpInsideContextMsg off
      SystemSampleTime	      "-1"
      RTWSystemCode	      "Auto"
      RTWFcnNameOpts	      "Auto"
      RTWFileNameOpts	      "Auto"
      FunctionInterfaceSpec   "void_void"
      FunctionWithSeparateData off
      RTWMemSecFuncInitTerm   "Inherit from model"
      RTWMemSecFuncExecute    "Inherit from model"
      RTWMemSecDataConstants  "Inherit from model"
      RTWMemSecDataInternal   "Inherit from model"
      RTWMemSecDataParameters "Inherit from model"
      SimViewingDevice	      off
      DataTypeOverride	      "UseLocalSettings"
      DataTypeOverrideAppliesTo	"AllNumericTypes"
      MinMaxOverflowLogging   "UseLocalSettings"
      Opaque		      off
      MaskHideContents	      off
      SFBlockType	      "NONE"
      Variant		      off
      GeneratePreprocessorConditionals off
      ContentPreviewEnabled   off
    }
    Block {
      BlockType		      Sum
      IconShape		      "rectangular"
      Inputs		      "++"
      CollapseMode	      "All dimensions"
      CollapseDim	      "1"
      InputSameDT	      on
      AccumDataTypeStr	      "Inherit: Inherit via internal rule"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Same as first input"
      LockScale		      off
      RndMeth		      "Floor"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
    }
    Block {
      BlockType		      Switch
      Criteria		      "u2 >= Threshold"
      Threshold		      "0"
      InputSameDT	      on
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit via internal rule"
      LockScale		      off
      RndMeth		      "Floor"
      SaturateOnIntegerOverflow	on
      ZeroCross		      on
      SampleTime	      "-1"
      AllowDiffInputSizes     off
    }
    Block {
      BlockType		      Terminator
    }
    Block {
      BlockType		      ToWorkspace
      VariableName	      "simulink_output"
      MaxDataPoints	      "1000"
      Decimation	      "1"
      SaveFormat	      "Array"
      Save2DSignal	      "Inherit from input (this choice will be removed - see release notes)"
      FixptAsFi		      off
      NumInputs		      "1"
      SampleTime	      "0"
    }
  }
  System {
    Name		    "TEModel"
    Location		    [-8, -8, 1288, 778]
    Open		    off
    ModelBrowserVisibility  off
    ModelBrowserWidth	    200
    ScreenColor		    "white"
    PaperOrientation	    "landscape"
    PaperPositionMode	    "auto"
    PaperType		    "usletter"
    PaperUnits		    "inches"
    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
    TiledPageScale	    1
    ShowPageBoundaries	    off
    ZoomFactor		    "100"
    ReportName		    "simulink-default.rpt"
    SIDHighWatermark	    "709"
    Block {
      BlockType		      Scope
      Name		      "$ per hr"
      SID		      "1"
      Ports		      [1]
      Position		      [1090, 199, 1120, 231]
      ZOrder		      -1
      Floating		      off
      Location		      [60, 77, 1273, 1018]
      Open		      off
      NumInputPorts	      "1"
      List {
	ListType		AxesTitles
	axes1			"%<SignalLabel>"
      }
      List {
	ListType		ScopeGraphics
	FigureColor		"[0.5 0.5 0.5]"
	AxesColor		"[0 0 0]"
	AxesTickColor		"[1 1 1]"
	LineColors		"[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
	LineStyles		"-|-|-|-|-|-"
	LineWidths		"[0.5 0.5 0.5 0.5 0.5 0.5]"
	MarkerStyles		"none|none|none|none|none|none"
      }
      ShowLegends	      off
      YMin		      "25"
      YMax		      "225"
      SaveName		      "OpCost"
      DataFormat	      "StructureWithTime"
      LimitDataPoints	      off
      SampleInput	      on
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      Clock
      Name		      "Clock"
      SID		      "2"
      Position		      [580, 30, 600, 50]
      ZOrder		      -2
    }
    Block {
      BlockType		      Constant
      Name		      "Disturbances"
      SID		      "3"
      Position		      [385, 343, 435, 367]
      ZOrder		      -3
      Value		      "[ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]"
    }
    Block {
      BlockType		      SubSystem
      Name		      "HourlyCost"
      SID		      "4"
      Ports		      [2, 1]
      Position		      [940, 179, 1035, 246]
      ZOrder		      -4
      RequestExecContextInheritance off
      System {
	Name			"HourlyCost"
	Location		[-8, -8, 1928, 1178]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"125"
	Block {
	  BlockType		  Inport
	  Name			  "xmeas"
	  SID			  "5"
	  Position		  [35, 33, 65, 47]
	  ZOrder		  -1
	  IconDisplay		  "Port number"
	  PortDimensions	  "41"
	}
	Block {
	  BlockType		  Inport
	  Name			  "xmv"
	  SID			  "6"
	  Position		  [45, 308, 75, 322]
	  ZOrder		  -2
	  Port			  "2"
	  IconDisplay		  "Port number"
	  PortDimensions	  "12"
	}
	Block {
	  BlockType		  Gain
	  Name			  "Gain"
	  SID			  "7"
	  Position		  [190, 20, 225, 60]
	  ZOrder		  -3
	  Gain			  "[0.0318, 0.0536]"
	  Multiplication	  "Matrix(K*u)"
	}
	Block {
	  BlockType		  Gain
	  Name			  "Gain1"
	  SID			  "8"
	  Position		  [190, 90, 225, 130]
	  ZOrder		  -4
	  Gain			  "0.44791"
	}
	Block {
	  BlockType		  Gain
	  Name			  "Gain2"
	  SID			  "9"
	  Position		  [190, 160, 225, 200]
	  ZOrder		  -5
	  Gain			  "[2.209 6.177 22.06 14.56 17.89 30.44 22.94]"
	  Multiplication	  "Matrix(K*u)"
	}
	Block {
	  BlockType		  Gain
	  Name			  "Gain3"
	  SID			  "10"
	  Position		  [190, 225, 225, 265]
	  ZOrder		  -6
	  Gain			  "[0.2206 0.1456 0.1789]"
	  Multiplication	  "Matrix(K*u)"
	}
	Block {
	  BlockType		  Gain
	  Name			  "Gain4"
	  SID			  "11"
	  Position		  [190, 295, 225, 335]
	  ZOrder		  -7
	  Gain			  "4.541"
	}
	Block {
	  BlockType		  Product
	  Name			  "Product"
	  SID			  "12"
	  Ports			  [2, 1]
	  Position		  [260, 236, 305, 269]
	  ZOrder		  -8
	  InputSameDT		  off
	  RndMeth		  "Floor"
	}
	Block {
	  BlockType		  Product
	  Name			  "Product1"
	  SID			  "13"
	  Ports			  [2, 1]
	  Position		  [295, 101, 340, 134]
	  ZOrder		  -9
	  InputSameDT		  off
	  RndMeth		  "Floor"
	}
	Block {
	  BlockType		  Selector
	  Name			  "Selector"
	  SID			  "14"
	  Ports			  [1, 1]
	  Position		  [115, 296, 155, 334]
	  ZOrder		  -10
	  InputPortWidth	  "12"
	  Indices		  "8"
	}
	Block {
	  BlockType		  Selector
	  Name			  "Selector1"
	  SID			  "15"
	  Ports			  [1, 1]
	  Position		  [105, 21, 145, 59]
	  ZOrder		  -11
	  InputPortWidth	  "41"
	  Indices		  "[19 20] "
	}
	Block {
	  BlockType		  Selector
	  Name			  "Selector2"
	  SID			  "16"
	  Ports			  [1, 1]
	  Position		  [105, 91, 145, 129]
	  ZOrder		  -12
	  InputPortWidth	  "41"
	  Indices		  "[10] "
	}
	Block {
	  BlockType		  Selector
	  Name			  "Selector3"
	  SID			  "17"
	  Ports			  [1, 1]
	  Position		  [110, 161, 150, 199]
	  ZOrder		  -13
	  InputPortWidth	  "41"
	  Indices		  "[29, 31:36] "
	}
	Block {
	  BlockType		  Selector
	  Name			  "Selector4"
	  SID			  "18"
	  Ports			  [1, 1]
	  Position		  [110, 226, 150, 264]
	  ZOrder		  -14
	  InputPortWidth	  "41"
	  Indices		  "[37:39] "
	}
	Block {
	  BlockType		  Sum
	  Name			  "Sum"
	  SID			  "19"
	  Ports			  [3, 1]
	  Position		  [375, 110, 395, 130]
	  ZOrder		  -15
	  ShowName		  off
	  IconShape		  "round"
	  Inputs		  "+++"
	  InputSameDT		  off
	  OutDataTypeStr	  "Inherit: Inherit via internal rule"
	}
	Block {
	  BlockType		  Outport
	  Name			  "$ per hr"
	  SID			  "20"
	  Position		  [420, 113, 450, 127]
	  ZOrder		  -16
	  IconDisplay		  "Port number"
	}
	Line {
	  ZOrder		  1
	  SrcBlock		  "xmv"
	  SrcPort		  1
	  DstBlock		  "Selector"
	  DstPort		  1
	}
	Line {
	  ZOrder		  2
	  SrcBlock		  "xmeas"
	  SrcPort		  1
	  Points		  [10, 0]
	  Branch {
	    ZOrder		    3
	    DstBlock		    "Selector1"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    4
	    Points		    [0, 70]
	    Branch {
	      ZOrder		      5
	      DstBlock		      "Selector2"
	      DstPort		      1
	    }
	    Branch {
	      ZOrder		      6
	      Points		      [0, 70]
	      Branch {
		ZOrder			7
		DstBlock		"Selector3"
		DstPort			1
	      }
	      Branch {
		ZOrder			8
		Points			[0, 65]
		DstBlock		"Selector4"
		DstPort			1
	      }
	    }
	  }
	}
	Line {
	  ZOrder		  9
	  SrcBlock		  "Selector1"
	  SrcPort		  1
	  DstBlock		  "Gain"
	  DstPort		  1
	}
	Line {
	  ZOrder		  10
	  SrcBlock		  "Selector2"
	  SrcPort		  1
	  DstBlock		  "Gain1"
	  DstPort		  1
	}
	Line {
	  ZOrder		  11
	  SrcBlock		  "Selector3"
	  SrcPort		  1
	  DstBlock		  "Gain2"
	  DstPort		  1
	}
	Line {
	  ZOrder		  12
	  SrcBlock		  "Selector4"
	  SrcPort		  1
	  DstBlock		  "Gain3"
	  DstPort		  1
	}
	Line {
	  ZOrder		  13
	  SrcBlock		  "Selector"
	  SrcPort		  1
	  DstBlock		  "Gain4"
	  DstPort		  1
	}
	Line {
	  ZOrder		  14
	  SrcBlock		  "Gain3"
	  SrcPort		  1
	  DstBlock		  "Product"
	  DstPort		  1
	}
	Line {
	  ZOrder		  15
	  SrcBlock		  "Gain4"
	  SrcPort		  1
	  Points		  [10, 0; 0, -55]
	  DstBlock		  "Product"
	  DstPort		  2
	}
	Line {
	  ZOrder		  16
	  SrcBlock		  "Sum"
	  SrcPort		  1
	  DstBlock		  "$ per hr"
	  DstPort		  1
	}
	Line {
	  ZOrder		  17
	  SrcBlock		  "Product"
	  SrcPort		  1
	  Points		  [75, 0]
	  DstBlock		  "Sum"
	  DstPort		  3
	}
	Line {
	  ZOrder		  18
	  SrcBlock		  "Gain"
	  SrcPort		  1
	  Points		  [155, 0]
	  DstBlock		  "Sum"
	  DstPort		  1
	}
	Line {
	  ZOrder		  19
	  SrcBlock		  "Product1"
	  SrcPort		  1
	  DstBlock		  "Sum"
	  DstPort		  2
	}
	Line {
	  ZOrder		  20
	  SrcBlock		  "Gain1"
	  SrcPort		  1
	  DstBlock		  "Product1"
	  DstPort		  1
	}
	Line {
	  ZOrder		  21
	  SrcBlock		  "Gain2"
	  SrcPort		  1
	  Points		  [25, 0; 0, -55]
	  DstBlock		  "Product1"
	  DstPort		  2
	}
      }
    }
    Block {
      BlockType		      Reference
      Name		      "Pause"
      SID		      "709"
      Ports		      []
      Position		      [929, 48, 1014, 93]
      ZOrder		      538
      LibraryVersion	      "1.119"
      SourceBlock	      "TElib/Pause"
      SourceType	      "Pause"
      ContentPreviewEnabled   off
      Value		      "-1"
    }
    Block {
      BlockType		      SubSystem
      Name		      "Production Loop Monitor"
      SID		      "21"
      Ports		      []
      Position		      [985, 364, 1034, 407]
      ZOrder		      -5
      RequestExecContextInheritance off
      System {
	Name			"Production Loop Monitor"
	Location		[-8, 0, 1928, 1186]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"100"
	Block {
	  BlockType		  From
	  Name			  "From1"
	  SID			  "22"
	  Position		  [115, 62, 180, 88]
	  ZOrder		  -1
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "Prodsp"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  From
	  Name			  "From27"
	  SID			  "23"
	  Position		  [115, 97, 180, 123]
	  ZOrder		  -2
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas17"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Mux
	  Name			  "Mux2"
	  SID			  "24"
	  Ports			  [2, 1]
	  Position		  [215, 57, 225, 128]
	  ZOrder		  -3
	  ShowName		  off
	  Inputs		  "2"
	  DisplayOption		  "bar"
	}
	Block {
	  BlockType		  Scope
	  Name			  "Production"
	  SID			  "25"
	  Ports			  [1]
	  Position		  [270, 79, 300, 111]
	  ZOrder		  -4
	  Floating		  off
	  Location		  [789, 579, 1614, 1019]
	  Open			  off
	  NumInputPorts		  "1"
	  List {
	    ListType		    AxesTitles
	    axes1		    "%<SignalLabel>"
	  }
	  List {
	    ListType		    ScopeGraphics
	    FigureColor		    "[0.5 0.5 0.5]"
	    AxesColor		    "[0 0 0]"
	    AxesTickColor	    "[1 1 1]"
	    LineColors		    "[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
	    LineStyles		    "-|-|-|-|-|-"
	    LineWidths		    "[0.5 0.5 0.5 0.5 0.5 0.5]"
	    MarkerStyles	    "none|none|none|none|none|none"
	  }
	  ShowLegends		  off
	  YMin			  "20"
	  YMax			  "28"
	  SaveToWorkspace	  on
	  SaveName		  "Production"
	  DataFormat		  "StructureWithTime"
	  LimitDataPoints	  off
	  SampleInput		  on
	  SampleTime		  "Ts_save"
	}
	Block {
	  BlockType		  ToWorkspace
	  Name			  "To Workspace4"
	  SID			  "510"
	  Ports			  [1]
	  Position		  [270, 180, 330, 210]
	  ZOrder		  1
	  ShowName		  off
	  VariableName		  "production"
	  MaxDataPoints		  "inf"
	  SampleTime		  "Ts_save"
	}
	Line {
	  ZOrder		  1
	  SrcBlock		  "Mux2"
	  SrcPort		  1
	  Points		  [21, 0]
	  Branch {
	    ZOrder		    2
	    Points		    [0, 100]
	    DstBlock		    "To Workspace4"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    3
	    DstBlock		    "Production"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  4
	  SrcBlock		  "From27"
	  SrcPort		  1
	  DstBlock		  "Mux2"
	  DstPort		  2
	}
	Line {
	  ZOrder		  5
	  SrcBlock		  "From1"
	  SrcPort		  1
	  DstBlock		  "Mux2"
	  DstPort		  1
	}
      }
    }
    Block {
      BlockType		      SubSystem
      Name		      "Quality Loop Monitor"
      SID		      "26"
      Ports		      []
      Position		      [980, 439, 1029, 482]
      ZOrder		      -6
      RequestExecContextInheritance off
      System {
	Name			"Quality Loop Monitor"
	Location		[1272, -4, 2568, 1032]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"100"
	Block {
	  BlockType		  From
	  Name			  "From"
	  SID			  "267"
	  Position		  [100, 96, 180, 124]
	  ZOrder		  3
	  GotoTag		  "xmeas40"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  From
	  Name			  "From1"
	  SID			  "27"
	  Position		  [115, 62, 180, 88]
	  ZOrder		  -1
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "PctGsp"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Mux
	  Name			  "Mux2"
	  SID			  "29"
	  Ports			  [2, 1]
	  Position		  [215, 57, 225, 128]
	  ZOrder		  -3
	  ShowName		  off
	  Inputs		  "2"
	  DisplayOption		  "bar"
	}
	Block {
	  BlockType		  Scope
	  Name			  "Quality"
	  SID			  "30"
	  Ports			  [1]
	  Position		  [260, 79, 290, 111]
	  ZOrder		  -4
	  Floating		  off
	  Location		  [145, 449, 1133, 998]
	  Open			  off
	  NumInputPorts		  "1"
	  List {
	    ListType		    AxesTitles
	    axes1		    "%<SignalLabel>"
	  }
	  List {
	    ListType		    ScopeGraphics
	    FigureColor		    "[0.5 0.5 0.5]"
	    AxesColor		    "[0 0 0]"
	    AxesTickColor	    "[1 1 1]"
	    LineColors		    "[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
	    LineStyles		    "-|-|-|-|-|-"
	    LineWidths		    "[0.5 0.5 0.5 0.5 0.5 0.5]"
	    MarkerStyles	    "none|none|none|none|none|none"
	  }
	  ShowLegends		  off
	  YMin			  "51.5"
	  YMax			  "56"
	  SaveToWorkspace	  on
	  SaveName		  "Quality"
	  DataFormat		  "StructureWithTime"
	  LimitDataPoints	  off
	  SampleInput		  on
	  SampleTime		  "Ts_save"
	}
	Block {
	  BlockType		  Scope
	  Name			  "Scope"
	  SID			  "265"
	  Ports			  [1]
	  Position		  [265, 154, 295, 186]
	  ZOrder		  1
	  Floating		  off
	  Location		  [596, 439, 920, 678]
	  Open			  off
	  NumInputPorts		  "1"
	  List {
	    ListType		    AxesTitles
	    axes1		    "%<SignalLabel>"
	  }
	  List {
	    ListType		    ScopeGraphics
	    FigureColor		    "[0.5 0.5 0.5]"
	    AxesColor		    "[0 0 0]"
	    AxesTickColor	    "[1 1 1]"
	    LineColors		    "[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
	    LineStyles		    "-|-|-|-|-|-"
	    LineWidths		    "[0.5 0.5 0.5 0.5 0.5 0.5]"
	    MarkerStyles	    "none|none|none|none|none|none"
	  }
	  ShowLegends		  off
	  YMin			  "52.5"
	  YMax			  "55.25"
	  SaveName		  "ScopeData10"
	  DataFormat		  "StructureWithTime"
	  SampleTime		  "0"
	}
	Line {
	  ZOrder		  1
	  SrcBlock		  "From1"
	  SrcPort		  1
	  DstBlock		  "Mux2"
	  DstPort		  1
	}
	Line {
	  ZOrder		  2
	  SrcBlock		  "From"
	  SrcPort		  1
	  Points		  [12, 0]
	  Branch {
	    ZOrder		    3
	    Points		    [0, 60]
	    DstBlock		    "Scope"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    4
	    DstBlock		    "Mux2"
	    DstPort		    2
	  }
	}
	Line {
	  ZOrder		  5
	  SrcBlock		  "Mux2"
	  SrcPort		  1
	  DstBlock		  "Quality"
	  DstPort		  1
	}
      }
    }
    Block {
      BlockType		      Scope
      Name		      "Scope"
      SID		      "306"
      Ports		      [1]
      Position		      [1090, 134, 1120, 166]
      ZOrder		      1
      Floating		      off
      Location		      [188, 377, 1070, 1018]
      Open		      off
      NumInputPorts	      "1"
      List {
	ListType		AxesTitles
	axes1			"%<SignalLabel>"
      }
      List {
	ListType		ScopeGraphics
	FigureColor		"[0.5 0.5 0.5]"
	AxesColor		"[0 0 0]"
	AxesTickColor		"[1 1 1]"
	LineColors		"[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
	LineStyles		"-|-|-|-|-|-"
	LineWidths		"[0.5 0.5 0.5 0.5 0.5 0.5]"
	MarkerStyles		"none|none|none|none|none|none"
      }
      ShowLegends	      off
      YMin		      "75"
      YMax		      "325"
      SaveName		      "ScopeData19"
      DataFormat	      "StructureWithTime"
      SampleTime	      "0"
    }
    Block {
      BlockType		      SubSystem
      Name		      "TE Plant"
      SID		      "31"
      Ports		      [13, 5]
      Position		      [505, 92, 740, 548]
      ZOrder		      -7
      RequestExecContextInheritance off
      System {
	Name			"TE Plant"
	Location		[-8, -8, 1288, 778]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"100"
	Block {
	  BlockType		  Inport
	  Name			  "Sep Level Setpoint"
	  SID			  "34"
	  Position		  [1445, 1033, 1475, 1047]
	  ZOrder		  -3
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Reactor Press Setpoint"
	  SID			  "36"
	  Position		  [1415, 788, 1445, 802]
	  ZOrder		  -5
	  Port			  "2"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Mole % G Setpoint"
	  SID			  "37"
	  Position		  [1180, 1593, 1210, 1607]
	  ZOrder		  -6
	  Port			  "3"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Recycle Rate SetPoint"
	  SID			  "39"
	  Position		  [1080, 803, 1110, 817]
	  ZOrder		  -8
	  Port			  "4"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Recycle Valve Position"
	  SID			  "41"
	  Position		  [780, 238, 810, 252]
	  ZOrder		  -10
	  Port			  "5"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Steam Valve Position"
	  SID			  "42"
	  Position		  [785, 418, 815, 432]
	  ZOrder		  -11
	  Port			  "6"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Agitator Setting"
	  SID			  "43"
	  Position		  [780, 553, 810, 567]
	  ZOrder		  -12
	  Port			  "7"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Disturbances"
	  SID			  "44"
	  Position		  [1010, 368, 1040, 382]
	  ZOrder		  -13
	  Port			  "8"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Reactor Temp Setpoint"
	  SID			  "40"
	  Position		  [1450, 923, 1480, 937]
	  ZOrder		  252
	  Port			  "9"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Production Setpoint"
	  SID			  "32"
	  Position		  [1330, 1228, 1360, 1242]
	  ZOrder		  293
	  Port			  "10"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Strip Level Setpoint"
	  SID			  "33"
	  Position		  [1090, 1148, 1120, 1162]
	  ZOrder		  299
	  Port			  "11"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "%C Setpoint"
	  SID			  "38"
	  Position		  [745, 1253, 775, 1267]
	  ZOrder		  316
	  Port			  "12"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Reactor Level Setpoint"
	  SID			  "35"
	  Position		  [755, 918, 785, 932]
	  ZOrder		  333
	  Port			  "13"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Reference
	  Name			  "%C in purge"
	  SID			  "45"
	  Ports			  [2, 1]
	  Position		  [835, 1240, 925, 1320]
	  ZOrder		  315
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "0.0009"
	  Ti			  "562/60"
	  Ts			  "Ts_base"
	  x0			  "r4_0"
	  Hi			  "200"
	  Lo			  "0"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "A feed rate"
	  SID			  "46"
	  Ports			  [2, 1]
	  Position		  [825, 654, 920, 736]
	  ZOrder		  -15
	  RequestExecContextInheritance	off
	  System {
	    Name		    "A feed rate"
	    Location		    [-8, -8, 1374, 736]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Ratio"
	      SID		      "47"
	      Position		      [50, 23, 80, 37]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Measured Flow"
	      SID		      "48"
	      Position		      [205, 98, 235, 112]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Reference
	      Name		      "Discrete PI"
	      SID		      "49"
	      Ports		      [2, 1]
	      Position		      [305, 53, 380, 122]
	      ZOrder		      -3
	      LibraryVersion	      "1.115"
	      SourceBlock	      "TElib/Discrete PI"
	      SourceType	      ""
	      ContentPreviewEnabled   off
	      Kc		      "0.01"
	      Ti		      "0.001/60"
	      Ts		      "Ts_base"
	      x0		      "xmv3_0"
	      Hi		      "100"
	      Lo		      "0"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From12"
	      SID		      "50"
	      Position		      [45, 61, 100, 89]
	      ZOrder		      -4
	      ShowName		      off
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "51"
	      Ports		      [2, 1]
	      Position		      [150, 51, 195, 84]
	      ZOrder		      -5
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Valve %"
	      SID		      "52"
	      Position		      [435, 83, 465, 97]
	      ZOrder		      -6
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Discrete PI"
	      SrcPort		      1
	      DstBlock		      "Valve %"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Ratio"
	      SrcPort		      1
	      Points		      [25, 0; 0, 30]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "From12"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Measured Flow"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Product"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "C feed rate"
	  SID			  "53"
	  Ports			  [2, 1]
	  Position		  [825, 789, 930, 871]
	  ZOrder		  -16
	  RequestExecContextInheritance	off
	  System {
	    Name		    "C feed rate"
	    Location		    [-8, -8, 1928, 1178]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Ratio"
	      SID		      "54"
	      Position		      [50, 23, 80, 37]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Measured Flow"
	      SID		      "55"
	      Position		      [205, 98, 235, 112]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Reference
	      Name		      "Discrete PI"
	      SID		      "56"
	      Ports		      [2, 1]
	      Position		      [315, 53, 390, 122]
	      ZOrder		      -3
	      LibraryVersion	      "1.115"
	      SourceBlock	      "TElib/Discrete PI"
	      SourceType	      ""
	      ContentPreviewEnabled   off
	      Kc		      "0.003"
	      Ti		      "0.001/60"
	      Ts		      "Ts_base"
	      x0		      "xmv4_0"
	      Hi		      "100"
	      Lo		      "0"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From12"
	      SID		      "57"
	      Position		      [45, 61, 100, 89]
	      ZOrder		      -4
	      ShowName		      off
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "58"
	      Ports		      [2, 1]
	      Position		      [150, 51, 195, 84]
	      ZOrder		      -5
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Valve %"
	      SID		      "59"
	      Position		      [435, 83, 465, 97]
	      ZOrder		      -6
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Product"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Measured Flow"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "From12"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Ratio"
	      SrcPort		      1
	      Points		      [25, 0; 0, 30]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Discrete PI"
	      SrcPort		      1
	      DstBlock		      "Valve %"
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "D feed rate"
	  SID			  "60"
	  Ports			  [2, 1]
	  Position		  [1155, 661, 1255, 734]
	  ZOrder		  -17
	  RequestExecContextInheritance	off
	  System {
	    Name		    "D feed rate"
	    Location		    [-8, 0, 1928, 1186]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Ratio"
	      SID		      "61"
	      Position		      [50, 23, 80, 37]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Measured Flow"
	      SID		      "62"
	      Position		      [205, 98, 235, 112]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Reference
	      Name		      "Discrete PI"
	      SID		      "63"
	      Ports		      [2, 1]
	      Position		      [310, 53, 385, 122]
	      ZOrder		      -3
	      LibraryVersion	      "1.115"
	      SourceBlock	      "TElib/Discrete PI"
	      SourceType	      ""
	      ContentPreviewEnabled   off
	      Kc		      "1.6e-6"
	      Ti		      "0.001/60"
	      Ts		      "Ts_base"
	      x0		      "xmv1_0"
	      Hi		      "100"
	      Lo		      "0"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From12"
	      SID		      "64"
	      Position		      [45, 61, 100, 89]
	      ZOrder		      -4
	      ShowName		      off
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "65"
	      Ports		      [2, 1]
	      Position		      [150, 51, 195, 84]
	      ZOrder		      -5
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Valve %"
	      SID		      "66"
	      Position		      [435, 83, 465, 97]
	      ZOrder		      -6
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Product"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Measured Flow"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "From12"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Ratio"
	      SrcPort		      1
	      Points		      [25, 0; 0, 30]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Discrete PI"
	      SrcPort		      1
	      DstBlock		      "Valve %"
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  Demux
	  Name			  "Demux"
	  SID			  "67"
	  Ports			  [1, 16]
	  Position		  [1435, 29, 1450, 616]
	  ZOrder		  -18
	  BackgroundColor	  "black"
	  ShowName		  off
	  Outputs		  "16"
	}
	Block {
	  BlockType		  Display
	  Name			  "Display"
	  SID			  "68"
	  Ports			  [1]
	  Position		  [1600, 340, 1690, 370]
	  ZOrder		  -19
	  Decimation		  "1"
	}
	Block {
	  BlockType		  Display
	  Name			  "Display1"
	  SID			  "69"
	  Ports			  [1]
	  Position		  [1610, 410, 1700, 440]
	  ZOrder		  -20
	  Decimation		  "1"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "E feed rate"
	  SID			  "70"
	  Ports			  [2, 1]
	  Position		  [1490, 661, 1600, 739]
	  ZOrder		  -21
	  RequestExecContextInheritance	off
	  System {
	    Name		    "E feed rate"
	    Location		    [399, 284, 942, 670]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Ratio"
	      SID		      "71"
	      Position		      [50, 23, 80, 37]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Measured Flow"
	      SID		      "72"
	      Position		      [205, 98, 235, 112]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Reference
	      Name		      "Discrete PI"
	      SID		      "73"
	      Ports		      [2, 1]
	      Position		      [315, 53, 390, 122]
	      ZOrder		      -3
	      LibraryVersion	      "1.115"
	      SourceBlock	      "TElib/Discrete PI"
	      SourceType	      ""
	      ContentPreviewEnabled   off
	      Kc		      "1.8e-6"
	      Ti		      "0.001/60"
	      Ts		      "Ts_base"
	      x0		      "xmv2_0"
	      Hi		      "100"
	      Lo		      "0"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From12"
	      SID		      "74"
	      Position		      [45, 61, 100, 89]
	      ZOrder		      -4
	      ShowName		      off
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "75"
	      Ports		      [2, 1]
	      Position		      [150, 51, 195, 84]
	      ZOrder		      -5
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Valve %"
	      SID		      "76"
	      Position		      [435, 83, 465, 97]
	      ZOrder		      -6
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Product"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Measured Flow"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "From12"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Ratio"
	      SrcPort		      1
	      Points		      [25, 0; 0, 30]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Discrete PI"
	      SrcPort		      1
	      DstBlock		      "Valve %"
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "Feedforward"
	  SID			  "77"
	  Ports			  [2, 2]
	  Position		  [1190, 911, 1290, 984]
	  ZOrder		  338
	  RequestExecContextInheritance	off
	  System {
	    Name		    "Feedforward"
	    Location		    [683, 0, 1366, 728]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "A4"
	    PaperUnits		    "centimeters"
	    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Mole % G SP"
	      SID		      "78"
	      Position		      [40, 103, 70, 117]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Eadj"
	      SID		      "79"
	      Position		      [130, 108, 160, 122]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From"
	      SID		      "80"
	      Position		      [255, 161, 295, 189]
	      ZOrder		      -3
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Gain
	      Name		      "Gain"
	      SID		      "81"
	      Position		      [250, 98, 290, 132]
	      ZOrder		      -4
	      Gain		      "46"
	    }
	    Block {
	      BlockType		      Gain
	      Name		      "Gain1"
	      SID		      "82"
	      Position		      [250, 48, 290, 82]
	      ZOrder		      -5
	      Gain		      "32"
	    }
	    Block {
	      BlockType		      Polyval
	      Name		      "P2"
	      SID		      "83"
	      Position		      [115, 15, 175, 45]
	      ZOrder		      -6
	      Coefs		      "[1.5192e-003  5.9446e-001  2.7690e-001]"
	    }
	    Block {
	      BlockType		      Polyval
	      Name		      "P3"
	      SID		      "84"
	      Position		      [120, 195, 180, 225]
	      ZOrder		      -7
	      Coefs		      "[-1.1377e-003 -8.0893e-001  9.1060e+001]"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "85"
	      Ports		      [2, 1]
	      Position		      [345, 151, 390, 184]
	      ZOrder		      -8
	      Inputs		      "*/"
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product1"
	      SID		      "86"
	      Ports		      [2, 1]
	      Position		      [340, 56, 385, 89]
	      ZOrder		      -9
	      Inputs		      "*/"
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Scope
	      Name		      "Scope"
	      SID		      "242"
	      Ports		      [1]
	      Position		      [110, 294, 140, 326]
	      ZOrder		      1
	      Floating		      off
	      Location		      [338, 276, 662, 515]
	      Open		      off
	      NumInputPorts	      "1"
	      List {
		ListType		AxesTitles
		axes1			"%<SignalLabel>"
	      }
	      List {
		ListType		ScopeGraphics
		FigureColor		"[0.5 0.5 0.5]"
		AxesColor		"[0 0 0]"
		AxesTickColor		"[1 1 1]"
		LineColors		"[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
		LineStyles		"-|-|-|-|-|-"
		LineWidths		"[0.5 0.5 0.5 0.5 0.5 0.5]"
		MarkerStyles		"none|none|none|none|none|none"
	      }
	      ShowLegends	      off
	      YMin		      "53.8"
	      YMax		      "53.8"
	      SaveName		      "ScopeData4"
	      DataFormat	      "StructureWithTime"
	      SampleTime	      "0"
	    }
	    Block {
	      BlockType		      Sum
	      Name		      "Sum"
	      SID		      "87"
	      Ports		      [2, 1]
	      Position		      [405, 20, 425, 40]
	      ZOrder		      -10
	      ShowName		      off
	      IconShape		      "round"
	      Inputs		      "|+-"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	    }
	    Block {
	      BlockType		      Sum
	      Name		      "Sum1"
	      SID		      "88"
	      Ports		      [2, 1]
	      Position		      [415, 200, 435, 220]
	      ZOrder		      -11
	      ShowName		      off
	      IconShape		      "round"
	      Inputs		      "++|"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "r2"
	      SID		      "89"
	      Position		      [455, 23, 485, 37]
	      ZOrder		      -12
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "r3"
	      SID		      "90"
	      Position		      [470, 203, 500, 217]
	      ZOrder		      -13
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Sum"
	      SrcPort		      1
	      DstBlock		      "r2"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "P2"
	      SrcPort		      1
	      DstBlock		      "Sum"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "Sum1"
	      SrcPort		      1
	      DstBlock		      "r3"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "P3"
	      SrcPort		      1
	      DstBlock		      "Sum1"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Product"
	      SrcPort		      1
	      Points		      [30, 0]
	      DstBlock		      "Sum1"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      6
	      SrcBlock		      "From"
	      SrcPort		      1
	      Points		      [20, 0]
	      Branch {
		ZOrder			7
		DstBlock		"Product"
		DstPort			2
	      }
	      Branch {
		ZOrder			8
		Points			[0, -95]
		DstBlock		"Product1"
		DstPort			2
	      }
	    }
	    Line {
	      ZOrder		      9
	      SrcBlock		      "Gain"
	      SrcPort		      1
	      Points		      [10, 0; 0, 45]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      10
	      SrcBlock		      "Eadj"
	      SrcPort		      1
	      Points		      [35, 0]
	      Branch {
		ZOrder			11
		DstBlock		"Gain"
		DstPort			1
	      }
	      Branch {
		ZOrder			12
		Points			[0, -50]
		DstBlock		"Gain1"
		DstPort			1
	      }
	    }
	    Line {
	      ZOrder		      13
	      SrcBlock		      "Product1"
	      SrcPort		      1
	      Points		      [25, 0]
	      DstBlock		      "Sum"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      14
	      SrcBlock		      "Gain1"
	      SrcPort		      1
	      DstBlock		      "Product1"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      15
	      SrcBlock		      "Mole % G SP"
	      SrcPort		      1
	      Points		      [7, 0]
	      Branch {
		ZOrder			16
		Points			[0, -22; -68, 0; 0, 222]
		DstBlock		"Scope"
		DstPort			1
	      }
	      Branch {
		ZOrder			17
		Points			[13, 0]
		Branch {
		  ZOrder		  18
		  Points		  [0, -80]
		  DstBlock		  "P2"
		  DstPort		  1
		}
		Branch {
		  ZOrder		  19
		  Points		  [0, 100]
		  DstBlock		  "P3"
		  DstPort		  1
		}
	      }
	    }
	  }
	}
	Block {
	  BlockType		  From
	  Name			  "From"
	  SID			  "91"
	  Position		  [775, 51, 830, 79]
	  ZOrder		  -23
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv1"
	}
	Block {
	  BlockType		  From
	  Name			  "From A and C feed"
	  SID			  "313"
	  Position		  [1390, 706, 1445, 734]
	  ZOrder		  149
	  GotoTag		  "xmeas3"
	}
	Block {
	  BlockType		  From
	  Name			  "From A feed"
	  SID			  "374"
	  Position		  [715, 721, 780, 749]
	  ZOrder		  155
	  GotoTag		  "xmeas1"
	}
	Block {
	  BlockType		  From
	  Name			  "From D feed"
	  SID			  "367"
	  Position		  [1060, 701, 1120, 729]
	  ZOrder		  146
	  GotoTag		  "xmeas2"
	}
	Block {
	  BlockType		  From
	  Name			  "From1"
	  SID			  "92"
	  Position		  [775, 95, 830, 125]
	  ZOrder		  -24
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv2"
	}
	Block {
	  BlockType		  From
	  Name			  "From10"
	  SID			  "93"
	  Position		  [775, 500, 830, 530]
	  ZOrder		  -25
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv11"
	}
	Block {
	  BlockType		  From
	  Name			  "From11"
	  SID			  "94"
	  Position		  [1060, 666, 1100, 694]
	  ZOrder		  -26
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "r2"
	}
	Block {
	  BlockType		  From
	  Name			  "From12"
	  SID			  "339"
	  Position		  [1080, 1178, 1135, 1202]
	  ZOrder		  301
	  GotoTag		  "xmeas15"
	}
	Block {
	  BlockType		  From
	  Name			  "From13"
	  SID			  "702"
	  Position		  [1365, 843, 1430, 867]
	  ZOrder		  501
	  GotoTag		  "xmeas7"
	}
	Block {
	  BlockType		  From
	  Name			  "From15"
	  SID			  "323"
	  Position		  [715, 836, 780, 864]
	  ZOrder		  95
	  GotoTag		  "xmeas4"
	}
	Block {
	  BlockType		  From
	  Name			  "From16"
	  SID			  "99"
	  Position		  [730, 1057, 800, 1083]
	  ZOrder		  153
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas10"
	}
	Block {
	  BlockType		  From
	  Name			  "From17"
	  SID			  "336"
	  Position		  [730, 1176, 780, 1204]
	  ZOrder		  306
	  GotoTag		  "xmeas14"
	}
	Block {
	  BlockType		  From
	  Name			  "From2"
	  SID			  "103"
	  Position		  [775, 139, 825, 171]
	  ZOrder		  -35
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv3"
	}
	Block {
	  BlockType		  From
	  Name			  "From21"
	  SID			  "105"
	  Position		  [1060, 1322, 1125, 1348]
	  ZOrder		  -37
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "r7"
	}
	Block {
	  BlockType		  From
	  Name			  "From22"
	  SID			  "317"
	  Position		  [1425, 1063, 1495, 1087]
	  ZOrder		  135
	  GotoTag		  "xmeas12"
	}
	Block {
	  BlockType		  From
	  Name			  "From23"
	  SID			  "107"
	  Position		  [725, 1137, 790, 1163]
	  ZOrder		  304
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "r6"
	}
	Block {
	  BlockType		  From
	  Name			  "From24"
	  SID			  "108"
	  Position		  [735, 947, 800, 973]
	  ZOrder		  332
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas8"
	}
	Block {
	  BlockType		  From
	  Name			  "From26"
	  SID			  "353"
	  Position		  [745, 1016, 785, 1044]
	  ZOrder		  125
	  GotoTag		  "r5"
	}
	Block {
	  BlockType		  From
	  Name			  "From27"
	  SID			  "111"
	  Position		  [1050, 1642, 1115, 1668]
	  ZOrder		  -43
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas40"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  From
	  Name			  "From28"
	  SID			  "112"
	  Position		  [745, 1287, 810, 1313]
	  ZOrder		  314
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas31"
	}
	Block {
	  BlockType		  From
	  Name			  "From29"
	  SID			  "113"
	  Position		  [1060, 847, 1125, 873]
	  ZOrder		  -45
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas5"
	}
	Block {
	  BlockType		  From
	  Name			  "From3"
	  SID			  "114"
	  Position		  [775, 186, 825, 214]
	  ZOrder		  -46
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv4"
	}
	Block {
	  BlockType		  From
	  Name			  "From30"
	  SID			  "263"
	  Position		  [715, 798, 780, 822]
	  ZOrder		  39
	  GotoTag		  "r4"
	}
	Block {
	  BlockType		  From
	  Name			  "From33"
	  SID			  "118"
	  Position		  [1070, 1022, 1135, 1048]
	  ZOrder		  143
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "SP17"
	}
	Block {
	  BlockType		  From
	  Name			  "From34"
	  SID			  "119"
	  Position		  [1385, 667, 1450, 693]
	  ZOrder		  -51
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "r3"
	}
	Block {
	  BlockType		  From
	  Name			  "From35"
	  SID			  "120"
	  Position		  [1050, 897, 1115, 923]
	  ZOrder		  337
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "PctGsp"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  From
	  Name			  "From36"
	  SID			  "121"
	  Position		  [1050, 952, 1115, 978]
	  ZOrder		  336
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "Eadj"
	}
	Block {
	  BlockType		  From
	  Name			  "From4"
	  SID			  "351"
	  Position		  [1430, 951, 1495, 979]
	  ZOrder		  257
	  GotoTag		  "xmeas9"
	}
	Block {
	  BlockType		  From
	  Name			  "From5"
	  SID			  "123"
	  Position		  [775, 276, 830, 304]
	  ZOrder		  -55
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv6"
	}
	Block {
	  BlockType		  From
	  Name			  "From6"
	  SID			  "124"
	  Position		  [775, 320, 830, 350]
	  ZOrder		  -56
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv7"
	}
	Block {
	  BlockType		  From
	  Name			  "From7"
	  SID			  "125"
	  Position		  [775, 365, 830, 395]
	  ZOrder		  -57
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv8"
	}
	Block {
	  BlockType		  From
	  Name			  "From8"
	  SID			  "349"
	  Position		  [1070, 1058, 1130, 1082]
	  ZOrder		  144
	  GotoTag		  "xmeas11"
	}
	Block {
	  BlockType		  From
	  Name			  "From9"
	  SID			  "126"
	  Position		  [775, 455, 830, 485]
	  ZOrder		  -58
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv10"
	}
	Block {
	  BlockType		  Gain
	  Name			  "Gain"
	  SID			  "127"
	  Position		  [1560, 1165, 1590, 1195]
	  ZOrder		  292
	  ShowName		  off
	  Gain			  "100/22.89"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto"
	  SID			  "128"
	  Position		  [970, 680, 1020, 710]
	  ZOrder		  -60
	  ShowName		  off
	  GotoTag		  "xmv3"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto1"
	  SID			  "129"
	  Tag			  "sss"
	  Position		  [1300, 685, 1350, 715]
	  ZOrder		  -61
	  ShowName		  off
	  GotoTag		  "xmv1"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto10"
	  SID			  "130"
	  Position		  [975, 930, 1025, 960]
	  ZOrder		  331
	  ShowName		  off
	  GotoTag		  "SP17"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto11"
	  SID			  "131"
	  Position		  [1615, 800, 1665, 830]
	  ZOrder		  -63
	  ShowName		  off
	  GotoTag		  "r5"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto12"
	  SID			  "132"
	  Position		  [1525, 1615, 1575, 1645]
	  ZOrder		  -64
	  ShowName		  off
	  GotoTag		  "Eadj"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto13"
	  SID			  "133"
	  Position		  [975, 1265, 1025, 1295]
	  ZOrder		  313
	  ShowName		  off
	  GotoTag		  "r4"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto14"
	  SID			  "134"
	  Position		  [1295, 815, 1345, 845]
	  ZOrder		  -66
	  ShowName		  off
	  GotoTag		  "r1"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto15"
	  SID			  "135"
	  Position		  [1660, 935, 1710, 965]
	  ZOrder		  248
	  ShowName		  off
	  GotoTag		  "xmv10"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto16"
	  SID			  "136"
	  Position		  [1305, 1040, 1365, 1070]
	  ZOrder		  -68
	  ShowName		  off
	  GotoTag		  "xmv11"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto17"
	  SID			  "137"
	  Position		  [1370, 1525, 1420, 1555]
	  ZOrder		  -69
	  ShowName		  off
	  GotoTag		  "PctGsp"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto18"
	  SID			  "138"
	  Position		  [1350, 915, 1400, 945]
	  ZOrder		  335
	  ShowName		  off
	  GotoTag		  "r2"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto19"
	  SID			  "139"
	  Position		  [1350, 950, 1400, 980]
	  ZOrder		  334
	  ShowName		  off
	  GotoTag		  "r3"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto2"
	  SID			  "140"
	  Position		  [1650, 685, 1700, 715]
	  ZOrder		  -72
	  ShowName		  off
	  GotoTag		  "xmv2"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto22"
	  SID			  "141"
	  Position		  [1480, 48, 1560, 72]
	  ZOrder		  -73
	  ShowName		  off
	  GotoTag		  "xmeas1"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto23"
	  SID			  "142"
	  Position		  [1480, 83, 1560, 107]
	  ZOrder		  -74
	  ShowName		  off
	  GotoTag		  "xmeas2"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto24"
	  SID			  "143"
	  Position		  [1480, 118, 1560, 142]
	  ZOrder		  -75
	  ShowName		  off
	  GotoTag		  "xmeas3"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto25"
	  SID			  "144"
	  Position		  [1480, 153, 1560, 177]
	  ZOrder		  -76
	  ShowName		  off
	  GotoTag		  "xmeas4"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto26"
	  SID			  "145"
	  Position		  [1480, 188, 1560, 212]
	  ZOrder		  -77
	  ShowName		  off
	  GotoTag		  "xmeas7"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto27"
	  SID			  "146"
	  Position		  [1480, 223, 1560, 247]
	  ZOrder		  -78
	  ShowName		  off
	  GotoTag		  "xmeas8"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto28"
	  SID			  "147"
	  Position		  [1480, 258, 1560, 282]
	  ZOrder		  -79
	  ShowName		  off
	  GotoTag		  "xmeas9"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto29"
	  SID			  "148"
	  Position		  [1480, 293, 1560, 317]
	  ZOrder		  -80
	  ShowName		  off
	  GotoTag		  "xmeas10"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto3"
	  SID			  "149"
	  Position		  [990, 815, 1040, 845]
	  ZOrder		  -81
	  ShowName		  off
	  GotoTag		  "xmv4"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto30"
	  SID			  "150"
	  Position		  [1480, 328, 1560, 352]
	  ZOrder		  -82
	  ShowName		  off
	  GotoTag		  "xmeas11"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto31"
	  SID			  "151"
	  Position		  [1480, 363, 1560, 387]
	  ZOrder		  -83
	  ShowName		  off
	  GotoTag		  "xmeas12"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto32"
	  SID			  "152"
	  Position		  [1480, 398, 1560, 422]
	  ZOrder		  -84
	  ShowName		  off
	  GotoTag		  "xmeas14"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto33"
	  SID			  "153"
	  Position		  [1480, 433, 1560, 457]
	  ZOrder		  -85
	  ShowName		  off
	  GotoTag		  "xmeas15"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto34"
	  SID			  "154"
	  Position		  [1480, 468, 1560, 492]
	  ZOrder		  -86
	  ShowName		  off
	  GotoTag		  "xmeas17"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto35"
	  SID			  "155"
	  Position		  [1480, 503, 1560, 527]
	  ZOrder		  -87
	  ShowName		  off
	  GotoTag		  "xmeas5"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto36"
	  SID			  "156"
	  Position		  [1480, 538, 1560, 562]
	  ZOrder		  -88
	  ShowName		  off
	  GotoTag		  "xmeas31"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto37"
	  SID			  "157"
	  Position		  [1480, 573, 1560, 597]
	  ZOrder		  -89
	  ShowName		  off
	  GotoTag		  "xmeas40"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto4"
	  SID			  "158"
	  Position		  [975, 1035, 1025, 1065]
	  ZOrder		  -90
	  ShowName		  off
	  GotoTag		  "xmv6"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto40"
	  SID			  "159"
	  Position		  [1560, 1120, 1615, 1150]
	  ZOrder		  291
	  ShowName		  off
	  GotoTag		  "Prodsp"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto5"
	  SID			  "160"
	  Position		  [985, 1155, 1035, 1185]
	  ZOrder		  303
	  ShowName		  off
	  GotoTag		  "xmv7"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto6"
	  SID			  "161"
	  Position		  [1345, 1340, 1395, 1370]
	  ZOrder		  -93
	  ShowName		  off
	  GotoTag		  "xmv8"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto7"
	  SID			  "162"
	  Position		  [1710, 1246, 1765, 1274]
	  ZOrder		  290
	  ShowName		  off
	  GotoTag		  "Fp"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto8"
	  SID			  "163"
	  Position		  [1300, 1160, 1350, 1190]
	  ZOrder		  298
	  ShowName		  off
	  GotoTag		  "r7"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto9"
	  SID			  "164"
	  Position		  [1655, 1045, 1705, 1075]
	  ZOrder		  -96
	  ShowName		  off
	  GotoTag		  "r6"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "MATLAB Function2"
	  SID			  "327"
	  Ports			  [2, 1]
	  Position		  [1165, 1444, 1235, 1491]
	  ZOrder		  99
	  LibraryVersion	  "1.32"
	  ErrorFcn		  "Stateflow.Translate.translate"
	  PermitHierarchicalResolution "ExplicitOnly"
	  TreatAsAtomicUnit	  on
	  RequestExecContextInheritance	off
	  SFBlockType		  "MATLAB Function"
	  System {
	    Name		    "MATLAB Function2"
	    Location		    [223, 338, 826, 833]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    SIDHighWatermark	    "43"
	    Block {
	      BlockType		      Inport
	      Name		      "u"
	      SID		      "327::1"
	      Position		      [20, 101, 40, 119]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "z"
	      SID		      "327::23"
	      Position		      [20, 136, 40, 154]
	      ZOrder		      9
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Demux
	      Name		      " Demux "
	      SID		      "327::42"
	      Ports		      [1, 1]
	      Position		      [270, 230, 320, 270]
	      ZOrder		      26
	      Outputs		      "1"
	    }
	    Block {
	      BlockType		      S-Function
	      Name		      " SFunction "
	      SID		      "327::41"
	      Tag		      "Stateflow S-Function TEModel 3"
	      Ports		      [2, 2]
	      Position		      [180, 100, 230, 160]
	      ZOrder		      25
	      FunctionName	      "sf_sfun"
	      PortCounts	      "[2 2]"
	      EnableBusSupport	      on
	      Port {
		PortNumber		2
		Name			"y"
		RTWStorageClass		"Auto"
		DataLoggingNameMode	"SignalName"
	      }
	    }
	    Block {
	      BlockType		      Terminator
	      Name		      " Terminator "
	      SID		      "327::43"
	      Position		      [460, 241, 480, 259]
	      ZOrder		      27
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "y"
	      SID		      "327::5"
	      Position		      [460, 101, 480, 119]
	      ZOrder		      -5
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      6
	      SrcBlock		      "u"
	      SrcPort		      1
	      Points		      [120, 0]
	      DstBlock		      " SFunction "
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      7
	      SrcBlock		      "z"
	      SrcPort		      1
	      DstBlock		      " SFunction "
	      DstPort		      2
	    }
	    Line {
	      Name		      "y"
	      ZOrder		      8
	      Labels		      [0, 0]
	      SrcBlock		      " SFunction "
	      SrcPort		      2
	      DstBlock		      "y"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      9
	      SrcBlock		      " Demux "
	      SrcPort		      1
	      DstBlock		      " Terminator "
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      10
	      SrcBlock		      " SFunction "
	      SrcPort		      1
	      DstBlock		      " Demux "
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  Mux
	  Name			  "Mux"
	  SID			  "165"
	  Ports			  [2, 1]
	  Position		  [1085, 306, 1090, 344]
	  ZOrder		  -97
	  ShowName		  off
	  Inputs		  "2"
	  DisplayOption		  "bar"
	}
	Block {
	  BlockType		  Mux
	  Name			  "Mux1"
	  SID			  "166"
	  Ports			  [12, 1]
	  Position		  [865, 45, 880, 580]
	  ZOrder		  -98
	  ShowName		  off
	  Inputs		  "12"
	  DisplayOption		  "bar"
	}
	Block {
	  BlockType		  Scope
	  Name			  "Pressure"
	  SID			  "167"
	  Ports			  [1]
	  Position		  [1645, 164, 1675, 196]
	  ZOrder		  -99
	  Floating		  off
	  Location		  [2375, 441, 2709, 680]
	  Open			  off
	  NumInputPorts		  "1"
	  List {
	    ListType		    AxesTitles
	    axes1		    "%<SignalLabel>"
	  }
	  List {
	    ListType		    ScopeGraphics
	    FigureColor		    "[0.5 0.5 0.5]"
	    AxesColor		    "[0 0 0]"
	    AxesTickColor	    "[1 1 1]"
	    LineColors		    "[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
	    LineStyles		    "-|-|-|-|-|-"
	    LineWidths		    "[0.5 0.5 0.5 0.5 0.5 0.5]"
	    MarkerStyles	    "none|none|none|none|none|none"
	  }
	  ShowLegends		  off
	  YMin			  "2700"
	  YMax			  "2900"
	  SaveName		  "ScopeData1"
	  DataFormat		  "StructureWithTime"
	  LimitDataPoints	  off
	  SampleInput		  on
	  SampleTime		  "Ts_save"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Product %G"
	  SID			  "168"
	  Ports			  [2, 1]
	  Position		  [1350, 1573, 1470, 1682]
	  ZOrder		  -100
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "-0.032"
	  Ti			  "100/60"
	  Ts			  "Ts_base"
	  x0			  "Eadj_0"
	  Hi			  "inf"
	  Lo			  "-inf"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Production rate"
	  SID			  "169"
	  Ports			  [2, 1]
	  Position		  [1510, 1210, 1605, 1305]
	  ZOrder		  289
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "3.2"
	  Ti			  "120/60"
	  Ts			  "Ts_base"
	  x0			  "0"
	  Hi			  "20"
	  Lo			  "-20"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "Purge rate"
	  SID			  "170"
	  Ports			  [2, 1]
	  Position		  [825, 1011, 930, 1089]
	  ZOrder		  -102
	  RequestExecContextInheritance	off
	  System {
	    Name		    "Purge rate"
	    Location		    [-8, 0, 1928, 1186]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Ratio"
	      SID		      "171"
	      Position		      [50, 23, 80, 37]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Measured Flow"
	      SID		      "172"
	      Position		      [205, 98, 235, 112]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Reference
	      Name		      "Discrete PI"
	      SID		      "173"
	      Ports		      [2, 1]
	      Position		      [315, 53, 390, 122]
	      ZOrder		      -3
	      LibraryVersion	      "1.115"
	      SourceBlock	      "TElib/Discrete PI"
	      SourceType	      ""
	      ContentPreviewEnabled   off
	      Kc		      "0.01"
	      Ti		      "0.001/60"
	      Ts		      "Ts_base"
	      x0		      "xmv6_0"
	      Hi		      "100"
	      Lo		      "0"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From12"
	      SID		      "174"
	      Position		      [45, 61, 100, 89]
	      ZOrder		      -4
	      ShowName		      off
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "175"
	      Ports		      [2, 1]
	      Position		      [150, 51, 195, 84]
	      ZOrder		      -5
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Valve %"
	      SID		      "176"
	      Position		      [435, 83, 465, 97]
	      ZOrder		      -6
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Discrete PI"
	      SrcPort		      1
	      DstBlock		      "Valve %"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Ratio"
	      SrcPort		      1
	      Points		      [25, 0; 0, 30]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "From12"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Measured Flow"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Product"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  RateLimiter
	  Name			  "Rate Limiter"
	  SID			  "177"
	  Position		  [1415, 1220, 1445, 1250]
	  ZOrder		  288
	  RisingSlewLimit	  "0.3*22.95/24"
	  FallingSlewLimit	  "-0.3*22.95/24"
	}
	Block {
	  BlockType		  RateLimiter
	  Name			  "Rate Limiter1"
	  SID			  "178"
	  Position		  [1260, 1585, 1290, 1615]
	  ZOrder		  -104
	  RisingSlewLimit	  "50/24"
	  FallingSlewLimit	  "-50/24"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Reactor level"
	  SID			  "179"
	  Ports			  [2, 1]
	  Position		  [840, 908, 915, 977]
	  ZOrder		  330
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "0.8"
	  Ti			  "60/60"
	  Ts			  "Ts_base"
	  x0			  "SP17_0"
	  Hi			  "120"
	  Lo			  "0"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Reactor pressure"
	  SID			  "180"
	  Ports			  [2, 1]
	  Position		  [1505, 778, 1580, 847]
	  ZOrder		  -106
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "-1e-4"
	  Ti			  "20/60"
	  Ts			  "Ts_base"
	  x0			  "r5_0"
	  Hi			  "100"
	  Lo			  "0"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Reactor temperature"
	  SID			  "181"
	  Ports			  [2, 1]
	  Position		  [1530, 913, 1605, 982]
	  ZOrder		  245
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "-8"
	  Ti			  "7.5/60"
	  Ts			  "Ts_base"
	  x0			  "xmv10_0"
	  Hi			  "100"
	  Lo			  "0"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Recycle Rate"
	  SID			  "182"
	  Ports			  [2, 1]
	  Position		  [1175, 793, 1250, 862]
	  ZOrder		  -108
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "0.00125"
	  Ti			  "120/60"
	  Ts			  "Ts_base"
	  x0			  "r1_0"
	  Hi			  "200"
	  Lo			  "0"
	}
	Block {
	  BlockType		  Selector
	  Name			  "Selector"
	  SID			  "183"
	  Ports			  [1, 1]
	  Position		  [1360, 306, 1400, 344]
	  ZOrder		  -109
	  InputPortWidth	  "41"
	  Indices		  "[1:4, 7:12, 14, 15, 17, 5, 31, 40]"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Sep Temperature"
	  SID			  "184"
	  Ports			  [2, 1]
	  Position		  [1170, 1018, 1245, 1087]
	  ZOrder		  -110
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "-4"
	  Ti			  "15/60"
	  Ts			  "Ts_base"
	  x0			  "xmv11_0"
	  Hi			  "100"
	  Lo			  "0"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "Sep liq rate"
	  SID			  "185"
	  Ports			  [2, 1]
	  Position		  [830, 1131, 930, 1209]
	  ZOrder		  302
	  RequestExecContextInheritance	off
	  System {
	    Name		    "Sep liq rate"
	    Location		    [683, 0, 1366, 728]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "A4"
	    PaperUnits		    "centimeters"
	    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Ratio"
	      SID		      "186"
	      Position		      [50, 23, 80, 37]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Measured Flow"
	      SID		      "187"
	      Position		      [205, 98, 235, 112]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Reference
	      Name		      "Discrete PI"
	      SID		      "188"
	      Ports		      [2, 1]
	      Position		      [315, 53, 390, 122]
	      ZOrder		      -3
	      LibraryVersion	      "1.115"
	      SourceBlock	      "TElib/Discrete PI"
	      SourceType	      ""
	      ContentPreviewEnabled   off
	      Kc		      "4e-4"
	      Ti		      "0.001/60"
	      Ts		      "Ts_base"
	      x0		      "xmv7_0"
	      Hi		      "100"
	      Lo		      "0"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From12"
	      SID		      "189"
	      Position		      [45, 61, 100, 89]
	      ZOrder		      -4
	      ShowName		      off
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "190"
	      Ports		      [2, 1]
	      Position		      [150, 51, 195, 84]
	      ZOrder		      -5
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Valve %"
	      SID		      "191"
	      Position		      [435, 83, 465, 97]
	      ZOrder		      -6
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Product"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Measured Flow"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "From12"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Ratio"
	      SrcPort		      1
	      Points		      [25, 0; 0, 30]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Discrete PI"
	      SrcPort		      1
	      DstBlock		      "Valve %"
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  Reference
	  Name			  "Separator level"
	  SID			  "192"
	  Ports			  [2, 1]
	  Position		  [1530, 1023, 1605, 1092]
	  ZOrder		  -112
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "-1e-3"
	  Ti			  "200/60"
	  Ts			  "Ts_base"
	  x0			  "r6_0"
	  Hi			  "100"
	  Lo			  "0"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "Strip liq rate"
	  SID			  "193"
	  Ports			  [2, 1]
	  Position		  [1165, 1316, 1270, 1394]
	  ZOrder		  -113
	  RequestExecContextInheritance	off
	  System {
	    Name		    "Strip liq rate"
	    Location		    [683, 0, 1366, 728]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "80"
	    Block {
	      BlockType		      Inport
	      Name		      "Ratio"
	      SID		      "194"
	      Position		      [50, 23, 80, 37]
	      ZOrder		      -1
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Inport
	      Name		      "Measured Flow"
	      SID		      "195"
	      Position		      [205, 98, 235, 112]
	      ZOrder		      -2
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Reference
	      Name		      "Discrete PI"
	      SID		      "196"
	      Ports		      [2, 1]
	      Position		      [315, 53, 390, 122]
	      ZOrder		      -3
	      LibraryVersion	      "1.115"
	      SourceBlock	      "TElib/Discrete PI"
	      SourceType	      ""
	      ContentPreviewEnabled   off
	      Kc		      "4e-4"
	      Ti		      "0.001/60"
	      Ts		      "Ts_base"
	      x0		      "xmv8_0"
	      Hi		      "100"
	      Lo		      "0"
	    }
	    Block {
	      BlockType		      From
	      Name		      "From12"
	      SID		      "197"
	      Position		      [45, 61, 100, 89]
	      ZOrder		      -4
	      ShowName		      off
	      CloseFcn		      "tagdialog Close"
	      GotoTag		      "Fp"
	      TagVisibility	      "global"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "198"
	      Ports		      [2, 1]
	      Position		      [150, 51, 195, 84]
	      ZOrder		      -5
	      InputSameDT	      off
	      RndMeth		      "Floor"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Valve %"
	      SID		      "199"
	      Position		      [435, 83, 465, 97]
	      ZOrder		      -6
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "Discrete PI"
	      SrcPort		      1
	      DstBlock		      "Valve %"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Ratio"
	      SrcPort		      1
	      Points		      [25, 0; 0, 30]
	      DstBlock		      "Product"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "From12"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Measured Flow"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "Product"
	      SrcPort		      1
	      DstBlock		      "Discrete PI"
	      DstPort		      1
	    }
	  }
	}
	Block {
	  BlockType		  Reference
	  Name			  "Stripper level"
	  SID			  "200"
	  Ports			  [2, 1]
	  Position		  [1170, 1138, 1245, 1207]
	  ZOrder		  297
	  LibraryVersion	  "1.118"
	  SourceBlock		  "TElib/Discrete PI"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  Kc			  "-2e-4"
	  Ti			  "200/60"
	  Ts			  "Ts_base"
	  x0			  "r7_0"
	  Hi			  "100"
	  Lo			  "0"
	}
	Block {
	  BlockType		  From
	  Name			  "Stripper underflow (stream 11)"
	  SID			  "359"
	  Position		  [1005, 1363, 1075, 1387]
	  ZOrder		  133
	  GotoTag		  "xmeas17"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  From
	  Name			  "Stripper underflow (stream 11) "
	  SID			  "343"
	  Position		  [1415, 1266, 1470, 1294]
	  ZOrder		  296
	  GotoTag		  "xmeas17"
	  TagVisibility		  "global"
	}
	Block {
	  BlockType		  Sum
	  Name			  "Sum"
	  SID			  "201"
	  Ports			  [2, 1]
	  Position		  [1645, 1250, 1665, 1270]
	  ZOrder		  287
	  ShowName		  off
	  IconShape		  "round"
	  Inputs		  "++|"
	  InputSameDT		  off
	  OutDataTypeStr	  "Inherit: Inherit via internal rule"
	}
	Block {
	  BlockType		  S-Function
	  Name			  "TE Code"
	  SID			  "202"
	  Ports			  [1, 1]
	  Position		  [1155, 310, 1215, 340]
	  ZOrder		  -116
	  FunctionName		  "temexd"
	  Parameters		  "[]"
	  EnableBusSupport	  off
	}
	Block {
	  BlockType		  Scope
	  Name			  "Temperature"
	  SID			  "203"
	  Ports			  [1]
	  Position		  [1645, 234, 1675, 266]
	  ZOrder		  -117
	  Floating		  off
	  Location		  [551, 140, 878, 379]
	  Open			  off
	  NumInputPorts		  "1"
	  List {
	    ListType		    AxesTitles
	    axes1		    "%<SignalLabel>"
	  }
	  List {
	    ListType		    ScopeGraphics
	    FigureColor		    "[0.5 0.5 0.5]"
	    AxesColor		    "[0 0 0]"
	    AxesTickColor	    "[1 1 1]"
	    LineColors		    "[1 1 0;1 0 1;0 1 1;1 0 0;0 1 0;0 0 1]"
	    LineStyles		    "-|-|-|-|-|-"
	    LineWidths		    "[0.5 0.5 0.5 0.5 0.5 0.5]"
	    MarkerStyles	    "none|none|none|none|none|none"
	  }
	  ShowLegends		  off
	  YMin			  "120"
	  YMax			  "130"
	  DataFormat		  "StructureWithTime"
	  LimitDataPoints	  off
	  SampleInput		  on
	  SampleTime		  "Ts_save"
	}
	Block {
	  BlockType		  ToWorkspace
	  Name			  "To Workspace"
	  SID			  "330"
	  Ports			  [1]
	  Position		  [1290, 1455, 1350, 1485]
	  ZOrder		  102
	  VariableName		  "product_G"
	  MaxDataPoints		  "inf"
	  SampleTime		  "-1"
	}
	Block {
	  BlockType		  From
	  Name			  "from recycle rate"
	  SID			  "261"
	  Position		  [750, 661, 790, 689]
	  ZOrder		  37
	  GotoTag		  "r1"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "xmeas atk block"
	  SID			  "685"
	  Ports			  [1, 1]
	  Position		  [1250, 304, 1325, 346]
	  ZOrder		  500
	  RequestExecContextInheritance	off
	  System {
	    Name		    "xmeas atk block"
	    Location		    [-8, 0, 1284, 786]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "A4"
	    PaperUnits		    "centimeters"
	    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "xmeas"
	      SID		      "686"
	      Position		      [145, 498, 175, 512]
	      ZOrder		      498
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Demux
	      Name		      "Demux"
	      SID		      "688"
	      Ports		      [1, 41]
	      Position		      [255, 37, 265, 2643]
	      ZOrder		      502
	      ShowName		      off
	      Outputs		      "41"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      Mux
	      Name		      "Mux"
	      SID		      "689"
	      Ports		      [41, 1]
	      Position		      [620, 35, 630, 2645]
	      ZOrder		      501
	      ShowName		      off
	      Inputs		      "41"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas1 attack controller"
	      SID		      "690"
	      Ports		      [1, 1]
	      Position		      [340, 21, 535, 59]
	      ZOrder		      503
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		19
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    20
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    21
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    22
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    23
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    24
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    25
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    26
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    27
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    28
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    29
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    30
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    31
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    32
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    33
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    34
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    35
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    36
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    37
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    38
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    39
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    40
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    41
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas1 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "690:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "690:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    42
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    43
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    44
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    45
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "690:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    46
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "690:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "690:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "690:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    47
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "690:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "690:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    48
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "690:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "690:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "690:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    49
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "690:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "690:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "690:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "690:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "690:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "690:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "690:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "690:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "690:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "690:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "690:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas10 attack controller"
	      SID		      "698"
	      Ports		      [1, 1]
	      Position		      [340, 606, 535, 644]
	      ZOrder		      527
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		50
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    51
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    52
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    53
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    54
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    55
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    56
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    57
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    58
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    59
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    60
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    61
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    62
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    63
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    64
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    65
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    66
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    67
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    68
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    69
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    70
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    71
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    72
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas10 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "698:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "698:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    73
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    74
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    75
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    76
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "698:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    77
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "698:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "698:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "698:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    78
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "698:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "698:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    79
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "698:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "698:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "698:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    80
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "698:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "698:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "698:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "698:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "698:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "698:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "698:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "698:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "698:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "698:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "698:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas11 attack controller"
	      SID		      "699"
	      Ports		      [1, 1]
	      Position		      [340, 671, 535, 709]
	      ZOrder		      526
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		81
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    82
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    83
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    84
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    85
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    86
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    87
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    88
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    89
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    90
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    91
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    92
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    93
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    94
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    95
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    96
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    97
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    98
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    99
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    100
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    101
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    102
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    103
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas11 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "699:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "699:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    104
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    105
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    106
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    107
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "699:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    108
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "699:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "699:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "699:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    109
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "699:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "699:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    110
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "699:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "699:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "699:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    111
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "699:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "699:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "699:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "699:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "699:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "699:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "699:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "699:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "699:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "699:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "699:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas12 attack controller"
	      SID		      "700"
	      Ports		      [1, 1]
	      Position		      [340, 736, 535, 774]
	      ZOrder		      525
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		112
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    113
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    114
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    115
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    116
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    117
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    118
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    119
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    120
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    121
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    122
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    123
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    124
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    125
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    126
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    127
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    128
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    129
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    130
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    131
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    132
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    133
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    134
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas12 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "700:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "700:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    135
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    136
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    137
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    138
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "700:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    139
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "700:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "700:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "700:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    140
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "700:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "700:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    141
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "700:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "700:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "700:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    142
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "700:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "700:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "700:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "700:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "700:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "700:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "700:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "700:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "700:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "700:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "700:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas14 attack controller"
	      SID		      "692"
	      Ports		      [1, 1]
	      Position		      [340, 866, 535, 904]
	      ZOrder		      524
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		143
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    144
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    145
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    146
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    147
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    148
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    149
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    150
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    151
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    152
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    153
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    154
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    155
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    156
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    157
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    158
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    159
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    160
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    161
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    162
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    163
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    164
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    165
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas14 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "692:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "692:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    166
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    167
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    168
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    169
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "692:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    170
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "692:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "692:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "692:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    171
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "692:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "692:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    172
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "692:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "692:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "692:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    173
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "692:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "692:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "692:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "692:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "692:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "692:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "692:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "692:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "692:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "692:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "692:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas15 attack controller"
	      SID		      "687"
	      Ports		      [1, 1]
	      Position		      [340, 931, 535, 969]
	      ZOrder		      521
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		174
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    175
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    176
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    177
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    178
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    179
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    180
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    181
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    182
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    183
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    184
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    185
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    186
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    187
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    188
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    189
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    190
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    191
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    192
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    193
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    194
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    195
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    196
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas15 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "687:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "687:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    197
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    198
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    199
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    200
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "687:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    201
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "687:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "687:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "687:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    202
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "687:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "687:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    203
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "687:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "687:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "687:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    204
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "687:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "687:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "687:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "687:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "687:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "687:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "687:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "687:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "687:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "687:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "687:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas17 attack controller"
	      SID		      "705"
	      Ports		      [1, 1]
	      Position		      [340, 1061, 535, 1099]
	      ZOrder		      522
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		205
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    206
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    207
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    208
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    209
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    210
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    211
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    212
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    213
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    214
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    215
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    216
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    217
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    218
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    219
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    220
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    221
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    222
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    223
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    224
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    225
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    226
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    227
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas17 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "705:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "705:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    228
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    229
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    230
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    231
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "705:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    232
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "705:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "705:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "705:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    233
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "705:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "705:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    234
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "705:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "705:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "705:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    235
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "705:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "705:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "705:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "705:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "705:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "705:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "705:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "705:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "705:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "705:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "705:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas2 attack controller"
	      SID		      "691"
	      Ports		      [1, 1]
	      Position		      [340, 86, 535, 124]
	      ZOrder		      505
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		236
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    237
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    238
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    239
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    240
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    241
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    242
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    243
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    244
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    245
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    246
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    247
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    248
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    249
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    250
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    251
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    252
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    253
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    254
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    255
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    256
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    257
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    258
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas2 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "691:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "691:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    259
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    260
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    261
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    262
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "691:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    263
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "691:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "691:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "691:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    264
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "691:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "691:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    265
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "691:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "691:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "691:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    266
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "691:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "691:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "691:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "691:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "691:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "691:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "691:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "691:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "691:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "691:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "691:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas3 attack controller"
	      SID		      "693"
	      Ports		      [1, 1]
	      Position		      [340, 151, 535, 189]
	      ZOrder		      506
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		267
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    268
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    269
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    270
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    271
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    272
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    273
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    274
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    275
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    276
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    277
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    278
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    279
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    280
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    281
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    282
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    283
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    284
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    285
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    286
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    287
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    288
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    289
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas3 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "693:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "693:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    290
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    291
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    292
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    293
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "693:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    294
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "693:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "693:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "693:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    295
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "693:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "693:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    296
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "693:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "693:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "693:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    297
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "693:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "693:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "693:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "693:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "693:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "693:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "693:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "693:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "693:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "693:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "693:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas31 attack controller"
	      SID		      "703"
	      Ports		      [1, 1]
	      Position		      [340, 1971, 535, 2009]
	      ZOrder		      520
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		298
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    299
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    300
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    301
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    302
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    303
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    304
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    305
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    306
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    307
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    308
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    309
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    310
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    311
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    312
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    313
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    314
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    315
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    316
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    317
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    318
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    319
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    320
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas31 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "703:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "703:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    321
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    322
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    323
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    324
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "703:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    325
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "703:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "703:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "703:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    326
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "703:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "703:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    327
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "703:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "703:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "703:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    328
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "703:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "703:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "703:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "703:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "703:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "703:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "703:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "703:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "703:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "703:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "703:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas4 attack controller"
	      SID		      "694"
	      Ports		      [1, 1]
	      Position		      [340, 216, 535, 254]
	      ZOrder		      507
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		329
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    330
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    331
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    332
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    333
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    334
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    335
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    336
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    337
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    338
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    339
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    340
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    341
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    342
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    343
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    344
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    345
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    346
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    347
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    348
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    349
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    350
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    351
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas4 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "694:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "694:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    352
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    353
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    354
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    355
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "694:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    356
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "694:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "694:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "694:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    357
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "694:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "694:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    358
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "694:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "694:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "694:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    359
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "694:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "694:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "694:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "694:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "694:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "694:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "694:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "694:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "694:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "694:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "694:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas40 attack controller"
	      SID		      "706"
	      Ports		      [1, 1]
	      Position		      [340, 2556, 535, 2594]
	      ZOrder		      519
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		360
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    361
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    362
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    363
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    364
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    365
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    366
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    367
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    368
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    369
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    370
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    371
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    372
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    373
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    374
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    375
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    376
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    377
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    378
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    379
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    380
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    381
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    382
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas40 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "706:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "706:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    383
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    384
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    385
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    386
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "706:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "706:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "706:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    387
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "706:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "706:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "706:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "706:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "706:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "706:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    388
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "706:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "706:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "706:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "706:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "706:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    389
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "706:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "706:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "706:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "706:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "706:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "706:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    390
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "706:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "706:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "706:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "706:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "706:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "706:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "706:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "706:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "706:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "706:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "706:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "706:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "706:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "706:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "706:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas5 attack controller"
	      SID		      "704"
	      Ports		      [1, 1]
	      Position		      [340, 281, 535, 319]
	      ZOrder		      523
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		391
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    392
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    393
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    394
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    395
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    396
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    397
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    398
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    399
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    400
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    401
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    402
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    403
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    404
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    405
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    406
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    407
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    408
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    409
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    410
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    411
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    412
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    413
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas5 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "704:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "704:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    414
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    415
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    416
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    417
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "704:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    418
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "704:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "704:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "704:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    419
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "704:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "704:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    420
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "704:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "704:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "704:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    421
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "704:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "704:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "704:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "704:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "704:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "704:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "704:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "704:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "704:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "704:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "704:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas7 attack controller"
	      SID		      "695"
	      Ports		      [1, 1]
	      Position		      [340, 411, 535, 449]
	      ZOrder		      530
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		422
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    423
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    424
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    425
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    426
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    427
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    428
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    429
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    430
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    431
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    432
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    433
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    434
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    435
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    436
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    437
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    438
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    439
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    440
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    441
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    442
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    443
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    444
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas7 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "695:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "695:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    445
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    446
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    447
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    448
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "695:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    449
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "695:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "695:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "695:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    450
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "695:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "695:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    451
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "695:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "695:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "695:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    452
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "695:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "695:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "695:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "695:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "695:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "695:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "695:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "695:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "695:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "695:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "695:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas8 attack controller"
	      SID		      "696"
	      Ports		      [1, 1]
	      Position		      [340, 476, 535, 514]
	      ZOrder		      529
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		453
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    454
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    455
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    456
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    457
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    458
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    459
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    460
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    461
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    462
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    463
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    464
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    465
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    466
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    467
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    468
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    469
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    470
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    471
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    472
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    473
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    474
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    475
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas8 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "696:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "696:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    476
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    477
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    478
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    479
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "696:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    480
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "696:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "696:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "696:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    481
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "696:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "696:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    482
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "696:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "696:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "696:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    483
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "696:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "696:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "696:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "696:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "696:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "696:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "696:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "696:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "696:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "696:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "696:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas9 attack controller"
	      SID		      "697"
	      Ports		      [1, 1]
	      Position		      [340, 541, 535, 579]
	      ZOrder		      528
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		484
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    485
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    486
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    487
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    488
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    489
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    490
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    491
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    492
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    493
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    494
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    495
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    496
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    497
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    498
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    499
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    500
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    501
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    502
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    503
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    504
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    505
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    506
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas9 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "697:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "697:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    507
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    508
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    509
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    510
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "697:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    511
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "697:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "697:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "697:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    512
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "697:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "697:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    513
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "697:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "697:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "697:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    514
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "697:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "697:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "697:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "697:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "697:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "697:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "697:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "697:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "697:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "697:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "697:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "faked"
	      SID		      "701"
	      Position		      [690, 498, 720, 512]
	      ZOrder		      499
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "xmeas5 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      5
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Demux"
	      SrcPort		      6
	      DstBlock		      "Mux"
	      DstPort		      6
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "xmeas7 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      7
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "xmeas8 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      8
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "xmeas9 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      9
	    }
	    Line {
	      ZOrder		      6
	      SrcBlock		      "xmeas10 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      10
	    }
	    Line {
	      ZOrder		      7
	      SrcBlock		      "xmeas11 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      11
	    }
	    Line {
	      ZOrder		      8
	      SrcBlock		      "Demux"
	      SrcPort		      11
	      DstBlock		      "xmeas11 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      9
	      SrcBlock		      "Demux"
	      SrcPort		      10
	      DstBlock		      "xmeas10 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      10
	      SrcBlock		      "Demux"
	      SrcPort		      9
	      DstBlock		      "xmeas9 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      11
	      SrcBlock		      "Demux"
	      SrcPort		      8
	      DstBlock		      "xmeas8 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      12
	      SrcBlock		      "Demux"
	      SrcPort		      7
	      DstBlock		      "xmeas7 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      13
	      SrcBlock		      "Demux"
	      SrcPort		      5
	      DstBlock		      "xmeas5 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      14
	      SrcBlock		      "xmeas4 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      4
	    }
	    Line {
	      ZOrder		      15
	      SrcBlock		      "Demux"
	      SrcPort		      4
	      DstBlock		      "xmeas4 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      16
	      SrcBlock		      "xmeas3 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      3
	    }
	    Line {
	      ZOrder		      17
	      SrcBlock		      "Demux"
	      SrcPort		      3
	      DstBlock		      "xmeas3 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      18
	      SrcBlock		      "xmeas2 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      19
	      SrcBlock		      "Demux"
	      SrcPort		      2
	      DstBlock		      "xmeas2 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      20
	      SrcBlock		      "Mux"
	      SrcPort		      1
	      Points		      [25, 0; 0, -835]
	      DstBlock		      "faked"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      21
	      SrcBlock		      "xmeas12 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      12
	    }
	    Line {
	      ZOrder		      22
	      SrcBlock		      "Demux"
	      SrcPort		      12
	      DstBlock		      "xmeas12 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      23
	      SrcBlock		      "xmeas1 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      24
	      SrcBlock		      "Demux"
	      SrcPort		      1
	      DstBlock		      "xmeas1 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      25
	      SrcBlock		      "xmeas"
	      SrcPort		      1
	      Points		      [35, 0; 0, 835]
	      DstBlock		      "Demux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      26
	      SrcBlock		      "Demux"
	      SrcPort		      16
	      DstBlock		      "Mux"
	      DstPort		      16
	    }
	    Line {
	      ZOrder		      27
	      SrcBlock		      "Demux"
	      SrcPort		      14
	      DstBlock		      "xmeas14 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      28
	      SrcBlock		      "Demux"
	      SrcPort		      13
	      DstBlock		      "Mux"
	      DstPort		      13
	    }
	    Line {
	      ZOrder		      29
	      SrcBlock		      "xmeas14 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      14
	    }
	    Line {
	      ZOrder		      30
	      SrcBlock		      "Demux"
	      SrcPort		      24
	      DstBlock		      "Mux"
	      DstPort		      24
	    }
	    Line {
	      ZOrder		      31
	      SrcBlock		      "Demux"
	      SrcPort		      26
	      DstBlock		      "Mux"
	      DstPort		      26
	    }
	    Line {
	      ZOrder		      32
	      SrcBlock		      "Demux"
	      SrcPort		      25
	      DstBlock		      "Mux"
	      DstPort		      25
	    }
	    Line {
	      ZOrder		      33
	      SrcBlock		      "Demux"
	      SrcPort		      33
	      DstBlock		      "Mux"
	      DstPort		      33
	    }
	    Line {
	      ZOrder		      34
	      SrcBlock		      "Demux"
	      SrcPort		      37
	      DstBlock		      "Mux"
	      DstPort		      37
	    }
	    Line {
	      ZOrder		      35
	      SrcBlock		      "Demux"
	      SrcPort		      23
	      DstBlock		      "Mux"
	      DstPort		      23
	    }
	    Line {
	      ZOrder		      36
	      SrcBlock		      "Demux"
	      SrcPort		      18
	      DstBlock		      "Mux"
	      DstPort		      18
	    }
	    Line {
	      ZOrder		      37
	      SrcBlock		      "Demux"
	      SrcPort		      28
	      DstBlock		      "Mux"
	      DstPort		      28
	    }
	    Line {
	      ZOrder		      38
	      SrcBlock		      "Demux"
	      SrcPort		      34
	      DstBlock		      "Mux"
	      DstPort		      34
	    }
	    Line {
	      ZOrder		      39
	      SrcBlock		      "Demux"
	      SrcPort		      20
	      DstBlock		      "Mux"
	      DstPort		      20
	    }
	    Line {
	      ZOrder		      40
	      SrcBlock		      "Demux"
	      SrcPort		      39
	      DstBlock		      "Mux"
	      DstPort		      39
	    }
	    Line {
	      ZOrder		      41
	      SrcBlock		      "Demux"
	      SrcPort		      41
	      DstBlock		      "Mux"
	      DstPort		      41
	    }
	    Line {
	      ZOrder		      42
	      SrcBlock		      "Demux"
	      SrcPort		      30
	      DstBlock		      "Mux"
	      DstPort		      30
	    }
	    Line {
	      ZOrder		      43
	      SrcBlock		      "Demux"
	      SrcPort		      32
	      DstBlock		      "Mux"
	      DstPort		      32
	    }
	    Line {
	      ZOrder		      44
	      SrcBlock		      "Demux"
	      SrcPort		      19
	      DstBlock		      "Mux"
	      DstPort		      19
	    }
	    Line {
	      ZOrder		      45
	      SrcBlock		      "Demux"
	      SrcPort		      21
	      DstBlock		      "Mux"
	      DstPort		      21
	    }
	    Line {
	      ZOrder		      46
	      SrcBlock		      "Demux"
	      SrcPort		      38
	      DstBlock		      "Mux"
	      DstPort		      38
	    }
	    Line {
	      ZOrder		      47
	      SrcBlock		      "Demux"
	      SrcPort		      22
	      DstBlock		      "Mux"
	      DstPort		      22
	    }
	    Line {
	      ZOrder		      48
	      SrcBlock		      "Demux"
	      SrcPort		      29
	      DstBlock		      "Mux"
	      DstPort		      29
	    }
	    Line {
	      ZOrder		      49
	      SrcBlock		      "Demux"
	      SrcPort		      35
	      DstBlock		      "Mux"
	      DstPort		      35
	    }
	    Line {
	      ZOrder		      50
	      SrcBlock		      "Demux"
	      SrcPort		      36
	      DstBlock		      "Mux"
	      DstPort		      36
	    }
	    Line {
	      ZOrder		      51
	      SrcBlock		      "Demux"
	      SrcPort		      27
	      DstBlock		      "Mux"
	      DstPort		      27
	    }
	    Line {
	      ZOrder		      52
	      SrcBlock		      "Demux"
	      SrcPort		      40
	      DstBlock		      "xmeas40 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      53
	      SrcBlock		      "xmeas40 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      40
	    }
	    Line {
	      ZOrder		      54
	      SrcBlock		      "Demux"
	      SrcPort		      31
	      DstBlock		      "xmeas31 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      55
	      SrcBlock		      "xmeas31 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      31
	    }
	    Line {
	      ZOrder		      56
	      SrcBlock		      "Demux"
	      SrcPort		      15
	      DstBlock		      "xmeas15 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      57
	      SrcBlock		      "xmeas15 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      15
	    }
	    Line {
	      ZOrder		      58
	      SrcBlock		      "Demux"
	      SrcPort		      17
	      DstBlock		      "xmeas17 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      59
	      SrcBlock		      "xmeas17 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      17
	    }
	  }
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "xmv atk block"
	  SID			  "665"
	  Ports			  [1, 1]
	  Position		  [950, 294, 1025, 336]
	  ZOrder		  498
	  RequestExecContextInheritance	off
	  System {
	    Name		    "xmv atk block"
	    Location		    [-8, 0, 1288, 786]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "A4"
	    PaperUnits		    "centimeters"
	    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "xmv"
	      SID		      "666"
	      Position		      [145, 383, 175, 397]
	      ZOrder		      498
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Demux
	      Name		      "Demux"
	      SID		      "671"
	      Ports		      [1, 12]
	      Position		      [255, 29, 265, 751]
	      ZOrder		      502
	      ShowName		      off
	      Outputs		      "12"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      Mux
	      Name		      "Mux"
	      SID		      "670"
	      Ports		      [12, 1]
	      Position		      [620, 31, 630, 749]
	      ZOrder		      501
	      ShowName		      off
	      Inputs		      "12"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv1 attack controller"
	      SID		      "672"
	      Ports		      [1, 1]
	      Position		      [340, 41, 535, 79]
	      ZOrder		      503
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		515
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    516
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    517
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    518
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    519
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    520
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    521
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    522
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    523
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    524
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    525
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    526
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    527
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    528
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    529
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    530
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    531
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    532
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    533
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    534
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    535
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    536
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    537
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv1 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "672:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "672:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    538
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    539
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    540
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    541
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "672:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    542
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "672:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "672:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "672:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    543
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "672:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "672:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    544
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "672:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "672:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "672:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    545
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "672:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "672:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "672:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "672:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "672:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "672:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "672:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "672:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "672:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "672:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "672:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv10 attack controller"
	      SID		      "682"
	      Ports		      [1, 1]
	      Position		      [340, 581, 535, 619]
	      ZOrder		      513
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		546
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    547
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    548
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    549
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    550
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    551
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    552
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    553
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    554
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    555
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    556
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    557
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    558
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    559
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    560
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    561
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    562
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    563
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    564
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    565
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    566
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    567
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    568
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv10 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "682:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "682:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    569
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    570
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    571
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    572
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "682:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    573
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "682:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "682:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "682:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    574
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "682:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "682:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    575
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "682:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "682:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "682:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    576
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "682:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "682:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "682:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "682:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "682:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "682:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "682:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "682:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "682:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "682:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "682:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv11 attack controller"
	      SID		      "683"
	      Ports		      [1, 1]
	      Position		      [340, 641, 535, 679]
	      ZOrder		      514
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		577
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    578
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    579
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    580
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    581
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    582
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    583
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    584
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    585
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    586
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    587
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    588
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    589
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    590
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    591
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    592
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    593
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    594
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    595
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    596
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    597
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    598
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    599
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv11 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "683:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "683:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    600
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    601
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    602
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    603
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "683:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    604
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "683:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "683:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "683:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    605
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "683:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "683:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    606
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "683:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "683:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "683:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    607
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "683:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "683:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "683:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "683:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "683:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "683:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "683:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "683:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "683:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "683:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "683:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv12 attack controller"
	      SID		      "673"
	      Ports		      [1, 1]
	      Position		      [340, 701, 535, 739]
	      ZOrder		      504
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		608
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    609
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    610
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    611
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    612
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    613
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    614
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    615
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    616
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    617
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    618
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    619
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    620
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    621
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    622
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    623
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    624
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    625
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    626
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    627
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    628
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    629
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    630
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv12 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "673:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "673:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    631
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    632
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    633
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    634
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "673:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    635
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "673:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "673:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "673:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    636
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "673:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "673:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    637
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "673:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "673:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "673:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    638
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "673:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "673:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "673:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "673:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "673:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "673:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "673:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "673:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "673:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "673:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "673:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv2 attack controller"
	      SID		      "674"
	      Ports		      [1, 1]
	      Position		      [340, 101, 535, 139]
	      ZOrder		      505
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		639
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    640
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    641
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    642
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    643
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    644
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    645
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    646
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    647
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    648
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    649
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    650
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    651
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    652
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    653
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    654
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    655
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    656
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    657
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    658
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    659
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    660
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    661
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv2 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "674:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "674:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    662
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    663
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    664
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    665
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "674:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "674:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "674:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    666
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "674:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "674:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "674:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "674:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "674:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "674:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    667
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "674:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "674:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "674:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "674:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "674:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    668
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "674:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "674:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "674:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "674:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "674:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "674:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    669
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "674:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "674:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "674:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "674:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "674:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "674:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "674:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "674:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "674:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "674:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "674:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "674:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "674:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "674:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "674:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv3 attack controller"
	      SID		      "675"
	      Ports		      [1, 1]
	      Position		      [340, 161, 535, 199]
	      ZOrder		      506
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		670
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    671
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "DOS attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    672
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    673
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "14.2928"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    674
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "8"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    675
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    676
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    677
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    678
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    679
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    680
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    681
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    682
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    683
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    684
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    685
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    686
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    687
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    688
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    689
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    690
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    691
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    692
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv3 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "675:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "675:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    693
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    694
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    695
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    696
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "675:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "675:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "675:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    697
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "675:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "675:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "675:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "675:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "675:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "675:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    698
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "675:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "675:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "675:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "675:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "675:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    699
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "675:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "675:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "675:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "675:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "675:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "675:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    700
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "675:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "675:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "675:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "675:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "675:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "675:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "675:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "675:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "675:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "675:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "675:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "675:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "675:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "675:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "675:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv4 attack controller"
	      SID		      "676"
	      Ports		      [1, 1]
	      Position		      [340, 221, 535, 259]
	      ZOrder		      507
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		701
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    702
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    703
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    704
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    705
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    706
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    707
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    708
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    709
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    710
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    711
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    712
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    713
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    714
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    715
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    716
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    717
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    718
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    719
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    720
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    721
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    722
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    723
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv4 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "676:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "676:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    724
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    725
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    726
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    727
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "676:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    728
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "676:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "676:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "676:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    729
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "676:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "676:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    730
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "676:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "676:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "676:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    731
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "676:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "676:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "676:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "676:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "676:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "676:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "676:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "676:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "676:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "676:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "676:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv5 attack controller"
	      SID		      "677"
	      Ports		      [1, 1]
	      Position		      [340, 281, 535, 319]
	      ZOrder		      508
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		732
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    733
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    734
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    735
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    736
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    737
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    738
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    739
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    740
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    741
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    742
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    743
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    744
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    745
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    746
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    747
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    748
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    749
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    750
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    751
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    752
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    753
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    754
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv5 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "677:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "677:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    755
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    756
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    757
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    758
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "677:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    759
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "677:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "677:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "677:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    760
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "677:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "677:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    761
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "677:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "677:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "677:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    762
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "677:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "677:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "677:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "677:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "677:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "677:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "677:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "677:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "677:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "677:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "677:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv6 attack controller"
	      SID		      "678"
	      Ports		      [1, 1]
	      Position		      [340, 341, 535, 379]
	      ZOrder		      509
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		763
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    764
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    765
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    766
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    767
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    768
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    769
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    770
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    771
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    772
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    773
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    774
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    775
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    776
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    777
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    778
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    779
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    780
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    781
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    782
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    783
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    784
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    785
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv6 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "678:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "678:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    786
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    787
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    788
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    789
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "678:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    790
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    on
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "678:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    LibraryVersion	    "1.119"
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "678:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "678:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    791
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "678:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "678:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    792
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "678:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "678:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "678:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    793
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "678:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "678:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "678:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "678:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "678:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "678:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "678:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "678:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "678:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "678:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "678:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv7 attack controller"
	      SID		      "679"
	      Ports		      [1, 1]
	      Position		      [340, 401, 535, 439]
	      ZOrder		      510
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		794
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    795
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    796
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    797
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    798
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    799
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    800
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    801
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    802
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    803
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    804
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    805
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    806
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    807
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    808
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    809
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    810
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    811
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    812
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    813
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    814
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    815
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    816
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv7 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "679:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "679:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    817
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    818
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    819
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    820
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "679:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    821
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "679:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "679:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "679:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    822
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "679:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "679:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    823
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "679:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "679:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "679:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    824
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "679:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "679:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "679:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "679:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "679:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "679:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "679:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "679:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "679:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "679:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "679:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv8 attack controller"
	      SID		      "680"
	      Ports		      [1, 1]
	      Position		      [340, 461, 535, 499]
	      ZOrder		      511
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		825
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    826
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    827
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    828
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    829
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    830
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    831
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    832
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    833
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    834
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    835
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    836
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    837
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    838
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    839
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    840
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    841
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    842
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    843
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    844
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    845
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    846
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    847
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv8 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "680:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "680:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    848
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    849
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    850
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    851
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "680:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    852
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "680:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "680:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "680:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    853
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "680:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "680:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    854
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "680:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "680:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "680:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    855
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "680:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "680:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "680:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "680:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "680:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "680:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "680:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "680:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "680:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "680:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "680:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv9 attack controller"
	      SID		      "681"
	      Ports		      [1, 1]
	      Position		      [340, 521, 535, 559]
	      ZOrder		      512
	      AncestorBlock	      "TElib/Attack Controller"
	      LibraryVersion	      "1.119"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		856
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    857
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    858
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    859
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    860
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    861
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    862
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    863
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    864
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    865
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    866
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    867
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    868
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    869
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    870
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    871
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    872
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    873
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    874
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    875
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    876
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    877
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    878
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv9 attack controller"
		Location		[0, 0, 640, 770]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"939"
		SIDPrevWatermark	"939"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "681:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "681:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    879
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    880
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    881
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0"
		    }
		    Object {
		    $ObjectID		    882
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "681:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    883
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "681:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "TElib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "681:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "681:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    884
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "681:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "681:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    885
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [129, 59, 769, 829]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "681:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "681:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "681:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    886
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "681:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "681:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "681:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "681:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "681:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "681:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "681:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "681:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "681:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "681:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "681:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    2
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    3
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  4
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    5
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    6
		    DstBlock		    "output"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    8
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    9
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		}
		Line {
		  ZOrder		  10
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    12
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		  Branch {
		    ZOrder		    13
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		}
		Line {
		  ZOrder		  14
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  16
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
	      }
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "faked"
	      SID		      "667"
	      Position		      [695, 383, 725, 397]
	      ZOrder		      499
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "xmv"
	      SrcPort		      1
	      DstBlock		      "Demux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Demux"
	      SrcPort		      1
	      DstBlock		      "xmv1 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "xmv1 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Demux"
	      SrcPort		      12
	      DstBlock		      "xmv12 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "xmv12 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      12
	    }
	    Line {
	      ZOrder		      6
	      SrcBlock		      "Mux"
	      SrcPort		      1
	      DstBlock		      "faked"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      7
	      SrcBlock		      "Demux"
	      SrcPort		      2
	      DstBlock		      "xmv2 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      8
	      SrcBlock		      "xmv2 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      9
	      SrcBlock		      "Demux"
	      SrcPort		      3
	      DstBlock		      "xmv3 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      10
	      SrcBlock		      "xmv3 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      3
	    }
	    Line {
	      ZOrder		      11
	      SrcBlock		      "Demux"
	      SrcPort		      4
	      DstBlock		      "xmv4 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      12
	      SrcBlock		      "xmv4 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      4
	    }
	    Line {
	      ZOrder		      13
	      SrcBlock		      "Demux"
	      SrcPort		      5
	      DstBlock		      "xmv5 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      14
	      SrcBlock		      "Demux"
	      SrcPort		      6
	      DstBlock		      "xmv6 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      15
	      SrcBlock		      "Demux"
	      SrcPort		      7
	      DstBlock		      "xmv7 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      16
	      SrcBlock		      "Demux"
	      SrcPort		      8
	      DstBlock		      "xmv8 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      17
	      SrcBlock		      "Demux"
	      SrcPort		      9
	      DstBlock		      "xmv9 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      18
	      SrcBlock		      "Demux"
	      SrcPort		      10
	      DstBlock		      "xmv10 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      19
	      SrcBlock		      "Demux"
	      SrcPort		      11
	      DstBlock		      "xmv11 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      20
	      SrcBlock		      "xmv11 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      11
	    }
	    Line {
	      ZOrder		      21
	      SrcBlock		      "xmv10 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      10
	    }
	    Line {
	      ZOrder		      22
	      SrcBlock		      "xmv9 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      9
	    }
	    Line {
	      ZOrder		      23
	      SrcBlock		      "xmv8 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      8
	    }
	    Line {
	      ZOrder		      24
	      SrcBlock		      "xmv7 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      7
	    }
	    Line {
	      ZOrder		      25
	      SrcBlock		      "xmv6 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      6
	    }
	    Line {
	      ZOrder		      26
	      SrcBlock		      "xmv5 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      5
	    }
	  }
	}
	Block {
	  BlockType		  Outport
	  Name			  "xmeas"
	  SID			  "204"
	  Position		  [1250, 238, 1280, 252]
	  ZOrder		  -118
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "xmv"
	  SID			  "205"
	  Position		  [970, 193, 1000, 207]
	  ZOrder		  -119
	  Port			  "2"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "idv"
	  SID			  "206"
	  Position		  [1105, 368, 1135, 382]
	  ZOrder		  -120
	  Port			  "3"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "atkxmv"
	  SID			  "669"
	  Position		  [1070, 238, 1100, 252]
	  ZOrder		  499
	  Port			  "4"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "atkxmeas"
	  SID			  "707"
	  Position		  [1365, 413, 1395, 427]
	  ZOrder		  502
	  Port			  "5"
	  IconDisplay		  "Port number"
	}
	Line {
	  ZOrder		  1
	  SrcBlock		  "Mux"
	  SrcPort		  1
	  DstBlock		  "TE Code"
	  DstPort		  1
	}
	Line {
	  ZOrder		  2
	  SrcBlock		  "Disturbances"
	  SrcPort		  1
	  Points		  [20, 0]
	  Branch {
	    ZOrder		    3
	    Points		    [0, -40]
	    DstBlock		    "Mux"
	    DstPort		    2
	  }
	  Branch {
	    ZOrder		    4
	    DstBlock		    "idv"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  5
	  SrcBlock		  "TE Code"
	  SrcPort		  1
	  Points		  [8, 0]
	  Branch {
	    ZOrder		    6
	    DstBlock		    "xmeas atk block"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    7
	    Points		    [0, -80]
	    DstBlock		    "xmeas"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  8
	  SrcBlock		  "From"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  1
	}
	Line {
	  ZOrder		  9
	  SrcBlock		  "From1"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  2
	}
	Line {
	  ZOrder		  10
	  SrcBlock		  "From2"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  3
	}
	Line {
	  ZOrder		  11
	  SrcBlock		  "From3"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  4
	}
	Line {
	  ZOrder		  12
	  SrcBlock		  "Recycle Valve Position"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  5
	}
	Line {
	  ZOrder		  13
	  SrcBlock		  "From5"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  6
	}
	Line {
	  ZOrder		  14
	  SrcBlock		  "From6"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  7
	}
	Line {
	  ZOrder		  15
	  SrcBlock		  "From7"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  8
	}
	Line {
	  ZOrder		  16
	  SrcBlock		  "Steam Valve Position"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  9
	}
	Line {
	  ZOrder		  17
	  SrcBlock		  "From9"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  10
	}
	Line {
	  ZOrder		  18
	  SrcBlock		  "From10"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  11
	}
	Line {
	  ZOrder		  19
	  SrcBlock		  "Agitator Setting"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  12
	}
	Line {
	  ZOrder		  20
	  SrcBlock		  "A feed rate"
	  SrcPort		  1
	  DstBlock		  "Goto"
	  DstPort		  1
	}
	Line {
	  ZOrder		  21
	  SrcBlock		  "D feed rate"
	  SrcPort		  1
	  DstBlock		  "Goto1"
	  DstPort		  1
	}
	Line {
	  ZOrder		  22
	  SrcBlock		  "E feed rate"
	  SrcPort		  1
	  DstBlock		  "Goto2"
	  DstPort		  1
	}
	Line {
	  ZOrder		  23
	  SrcBlock		  "Purge rate"
	  SrcPort		  1
	  DstBlock		  "Goto4"
	  DstPort		  1
	}
	Line {
	  ZOrder		  24
	  SrcBlock		  "Stripper underflow (stream 11)"
	  SrcPort		  1
	  Points		  [32, 0]
	  Branch {
	    ZOrder		    25
	    DstBlock		    "Strip liq rate"
	    DstPort		    2
	  }
	  Branch {
	    ZOrder		    26
	    Points		    [0, 80]
	    DstBlock		    "MATLAB Function2"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  27
	  SrcBlock		  "From21"
	  SrcPort		  1
	  DstBlock		  "Strip liq rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  28
	  SrcBlock		  "Sep Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Separator level"
	  DstPort		  1
	}
	Line {
	  ZOrder		  29
	  SrcBlock		  "Separator level"
	  SrcPort		  1
	  DstBlock		  "Goto9"
	  DstPort		  1
	}
	Line {
	  ZOrder		  30
	  SrcBlock		  "Reactor Press Setpoint"
	  SrcPort		  1
	  DstBlock		  "Reactor pressure"
	  DstPort		  1
	}
	Line {
	  ZOrder		  31
	  SrcBlock		  "Reactor pressure"
	  SrcPort		  1
	  DstBlock		  "Goto11"
	  DstPort		  1
	}
	Line {
	  ZOrder		  32
	  SrcBlock		  "Product %G"
	  SrcPort		  1
	  DstBlock		  "Goto12"
	  DstPort		  1
	}
	Line {
	  ZOrder		  33
	  SrcBlock		  "Recycle Rate SetPoint"
	  SrcPort		  1
	  DstBlock		  "Recycle Rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  34
	  SrcBlock		  "Recycle Rate"
	  SrcPort		  1
	  DstBlock		  "Goto14"
	  DstPort		  1
	}
	Line {
	  ZOrder		  35
	  SrcBlock		  "from recycle rate"
	  SrcPort		  1
	  DstBlock		  "A feed rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  36
	  SrcBlock		  "Sep Temperature"
	  SrcPort		  1
	  DstBlock		  "Goto16"
	  DstPort		  1
	}
	Line {
	  ZOrder		  37
	  SrcBlock		  "From11"
	  SrcPort		  1
	  DstBlock		  "D feed rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  38
	  SrcBlock		  "From34"
	  SrcPort		  1
	  DstBlock		  "E feed rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  39
	  SrcBlock		  "Mux1"
	  SrcPort		  1
	  Points		  [35, 0]
	  Branch {
	    ZOrder		    40
	    DstBlock		    "xmv atk block"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    41
	    Points		    [0, -115]
	    DstBlock		    "xmv"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  42
	  SrcBlock		  "Demux"
	  SrcPort		  1
	  DstBlock		  "Goto22"
	  DstPort		  1
	}
	Line {
	  ZOrder		  43
	  SrcBlock		  "Demux"
	  SrcPort		  2
	  DstBlock		  "Goto23"
	  DstPort		  1
	}
	Line {
	  ZOrder		  44
	  SrcBlock		  "Demux"
	  SrcPort		  3
	  DstBlock		  "Goto24"
	  DstPort		  1
	}
	Line {
	  ZOrder		  45
	  SrcBlock		  "Demux"
	  SrcPort		  4
	  DstBlock		  "Goto25"
	  DstPort		  1
	}
	Line {
	  ZOrder		  46
	  SrcBlock		  "Demux"
	  SrcPort		  5
	  Points		  [5, 0]
	  Branch {
	    ZOrder		    47
	    DstBlock		    "Goto26"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    48
	    Points		    [0, -20]
	    DstBlock		    "Pressure"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  49
	  SrcBlock		  "Demux"
	  SrcPort		  6
	  DstBlock		  "Goto27"
	  DstPort		  1
	}
	Line {
	  ZOrder		  50
	  SrcBlock		  "Demux"
	  SrcPort		  7
	  Points		  [5, 0]
	  Branch {
	    ZOrder		    51
	    DstBlock		    "Goto28"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    52
	    Points		    [0, -20]
	    DstBlock		    "Temperature"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  53
	  SrcBlock		  "Demux"
	  SrcPort		  8
	  DstBlock		  "Goto29"
	  DstPort		  1
	}
	Line {
	  ZOrder		  54
	  SrcBlock		  "Demux"
	  SrcPort		  9
	  DstBlock		  "Goto30"
	  DstPort		  1
	}
	Line {
	  ZOrder		  55
	  SrcBlock		  "Demux"
	  SrcPort		  10
	  Points		  [5, 0]
	  Branch {
	    ZOrder		    56
	    DstBlock		    "Goto31"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    57
	    Points		    [0, -20]
	    DstBlock		    "Display"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  58
	  SrcBlock		  "Demux"
	  SrcPort		  11
	  DstBlock		  "Goto32"
	  DstPort		  1
	}
	Line {
	  ZOrder		  59
	  SrcBlock		  "Demux"
	  SrcPort		  12
	  Points		  [5, 0]
	  Branch {
	    ZOrder		    60
	    DstBlock		    "Goto33"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    61
	    Points		    [0, -20]
	    DstBlock		    "Display1"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  62
	  SrcBlock		  "Demux"
	  SrcPort		  13
	  DstBlock		  "Goto34"
	  DstPort		  1
	}
	Line {
	  ZOrder		  63
	  SrcBlock		  "Demux"
	  SrcPort		  14
	  DstBlock		  "Goto35"
	  DstPort		  1
	}
	Line {
	  ZOrder		  64
	  SrcBlock		  "Demux"
	  SrcPort		  15
	  DstBlock		  "Goto36"
	  DstPort		  1
	}
	Line {
	  ZOrder		  65
	  SrcBlock		  "Demux"
	  SrcPort		  16
	  DstBlock		  "Goto37"
	  DstPort		  1
	}
	Line {
	  ZOrder		  66
	  SrcBlock		  "From30"
	  SrcPort		  1
	  DstBlock		  "C feed rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  67
	  SrcBlock		  "Rate Limiter1"
	  SrcPort		  1
	  Points		  [18, 0]
	  Branch {
	    ZOrder		    68
	    DstBlock		    "Product %G"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    69
	    Points		    [0, -60]
	    DstBlock		    "Goto17"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  70
	  SrcBlock		  "Mole % G Setpoint"
	  SrcPort		  1
	  DstBlock		  "Rate Limiter1"
	  DstPort		  1
	}
	Line {
	  ZOrder		  71
	  SrcBlock		  "C feed rate"
	  SrcPort		  1
	  DstBlock		  "Goto3"
	  DstPort		  1
	}
	Line {
	  ZOrder		  72
	  SrcBlock		  "From A and C feed"
	  SrcPort		  1
	  DstBlock		  "E feed rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  73
	  SrcBlock		  "MATLAB Function2"
	  SrcPort		  1
	  DstBlock		  "To Workspace"
	  DstPort		  1
	}
	Line {
	  ZOrder		  74
	  SrcBlock		  "From26"
	  SrcPort		  1
	  DstBlock		  "Purge rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  75
	  SrcBlock		  "From33"
	  SrcPort		  1
	  DstBlock		  "Sep Temperature"
	  DstPort		  1
	}
	Line {
	  ZOrder		  76
	  SrcBlock		  "From8"
	  SrcPort		  1
	  DstBlock		  "Sep Temperature"
	  DstPort		  2
	}
	Line {
	  ZOrder		  77
	  SrcBlock		  "From A feed"
	  SrcPort		  1
	  Points		  [18, 0; 0, -20]
	  DstBlock		  "A feed rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  78
	  SrcBlock		  "From D feed"
	  SrcPort		  1
	  DstBlock		  "D feed rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  79
	  SrcBlock		  "Reactor Temp Setpoint"
	  SrcPort		  1
	  DstBlock		  "Reactor temperature"
	  DstPort		  1
	}
	Line {
	  ZOrder		  80
	  SrcBlock		  "Reactor temperature"
	  SrcPort		  1
	  DstBlock		  "Goto15"
	  DstPort		  1
	}
	Line {
	  ZOrder		  81
	  SrcBlock		  "From4"
	  SrcPort		  1
	  DstBlock		  "Reactor temperature"
	  DstPort		  2
	}
	Line {
	  ZOrder		  82
	  SrcBlock		  "Rate Limiter"
	  SrcPort		  1
	  Points		  [22, 0]
	  Branch {
	    ZOrder		    83
	    DstBlock		    "Production rate"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    84
	    Points		    [0, -55; 40, 0]
	    Branch {
	      ZOrder		      85
	      Points		      [0, -45]
	      DstBlock		      "Goto40"
	      DstPort		      1
	    }
	    Branch {
	      ZOrder		      86
	      DstBlock		      "Gain"
	      DstPort		      1
	    }
	  }
	}
	Line {
	  ZOrder		  87
	  SrcBlock		  "Production Setpoint"
	  SrcPort		  1
	  DstBlock		  "Rate Limiter"
	  DstPort		  1
	}
	Line {
	  ZOrder		  88
	  SrcBlock		  "Sum"
	  SrcPort		  1
	  DstBlock		  "Goto7"
	  DstPort		  1
	}
	Line {
	  ZOrder		  89
	  SrcBlock		  "Production rate"
	  SrcPort		  1
	  DstBlock		  "Sum"
	  DstPort		  2
	}
	Line {
	  ZOrder		  90
	  SrcBlock		  "Gain"
	  SrcPort		  1
	  Points		  [60, 0]
	  DstBlock		  "Sum"
	  DstPort		  1
	}
	Line {
	  ZOrder		  91
	  SrcBlock		  "Strip Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Stripper level"
	  DstPort		  1
	}
	Line {
	  ZOrder		  92
	  SrcBlock		  "Stripper level"
	  SrcPort		  1
	  DstBlock		  "Goto8"
	  DstPort		  1
	}
	Line {
	  ZOrder		  93
	  SrcBlock		  "Sep liq rate"
	  SrcPort		  1
	  DstBlock		  "Goto5"
	  DstPort		  1
	}
	Line {
	  ZOrder		  94
	  SrcBlock		  "From23"
	  SrcPort		  1
	  DstBlock		  "Sep liq rate"
	  DstPort		  1
	}
	Line {
	  ZOrder		  95
	  SrcBlock		  "From17"
	  SrcPort		  1
	  DstBlock		  "Sep liq rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  96
	  SrcBlock		  "%C Setpoint"
	  SrcPort		  1
	  DstBlock		  "%C in purge"
	  DstPort		  1
	}
	Line {
	  ZOrder		  97
	  SrcBlock		  "%C in purge"
	  SrcPort		  1
	  DstBlock		  "Goto13"
	  DstPort		  1
	}
	Line {
	  ZOrder		  98
	  SrcBlock		  "From28"
	  SrcPort		  1
	  DstBlock		  "%C in purge"
	  DstPort		  2
	}
	Line {
	  ZOrder		  99
	  SrcBlock		  "Reactor Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Reactor level"
	  DstPort		  1
	}
	Line {
	  ZOrder		  100
	  SrcBlock		  "Reactor level"
	  SrcPort		  1
	  DstBlock		  "Goto10"
	  DstPort		  1
	}
	Line {
	  ZOrder		  101
	  SrcBlock		  "From35"
	  SrcPort		  1
	  Points		  [25, 0; 0, 20]
	  DstBlock		  "Feedforward"
	  DstPort		  1
	}
	Line {
	  ZOrder		  102
	  SrcBlock		  "From36"
	  SrcPort		  1
	  DstBlock		  "Feedforward"
	  DstPort		  2
	}
	Line {
	  ZOrder		  103
	  SrcBlock		  "Feedforward"
	  SrcPort		  1
	  DstBlock		  "Goto18"
	  DstPort		  1
	}
	Line {
	  ZOrder		  104
	  SrcBlock		  "Feedforward"
	  SrcPort		  2
	  DstBlock		  "Goto19"
	  DstPort		  1
	}
	Line {
	  ZOrder		  105
	  SrcBlock		  "From27"
	  SrcPort		  1
	  Points		  [30, 0]
	  Branch {
	    ZOrder		    106
	    DstBlock		    "Product %G"
	    DstPort		    2
	  }
	  Branch {
	    ZOrder		    107
	    DstBlock		    "MATLAB Function2"
	    DstPort		    2
	  }
	}
	Line {
	  ZOrder		  108
	  SrcBlock		  "From12"
	  SrcPort		  1
	  DstBlock		  "Stripper level"
	  DstPort		  2
	}
	Line {
	  ZOrder		  109
	  SrcBlock		  "From24"
	  SrcPort		  1
	  DstBlock		  "Reactor level"
	  DstPort		  2
	}
	Line {
	  ZOrder		  110
	  SrcBlock		  "Stripper underflow (stream 11) "
	  SrcPort		  1
	  DstBlock		  "Production rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  111
	  SrcBlock		  "Strip liq rate"
	  SrcPort		  1
	  DstBlock		  "Goto6"
	  DstPort		  1
	}
	Line {
	  ZOrder		  112
	  SrcBlock		  "From29"
	  SrcPort		  1
	  Points		  [20, 0; 0, -15]
	  DstBlock		  "Recycle Rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  113
	  SrcBlock		  "From16"
	  SrcPort		  1
	  DstBlock		  "Purge rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  114
	  SrcBlock		  "From15"
	  SrcPort		  1
	  DstBlock		  "C feed rate"
	  DstPort		  2
	}
	Line {
	  ZOrder		  115
	  SrcBlock		  "From22"
	  SrcPort		  1
	  DstBlock		  "Separator level"
	  DstPort		  2
	}
	Line {
	  ZOrder		  116
	  SrcBlock		  "xmv atk block"
	  SrcPort		  1
	  Points		  [13, 0]
	  Branch {
	    ZOrder		    117
	    Points		    [0, -70]
	    DstBlock		    "atkxmv"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    118
	    DstBlock		    "Mux"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  119
	  SrcBlock		  "From13"
	  SrcPort		  1
	  Points		  [33, 0; 0, -25]
	  DstBlock		  "Reactor pressure"
	  DstPort		  2
	}
	Line {
	  ZOrder		  120
	  SrcBlock		  "xmeas atk block"
	  SrcPort		  1
	  Points		  [8, 0]
	  Branch {
	    ZOrder		    121
	    Points		    [0, 95]
	    DstBlock		    "atkxmeas"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    122
	    DstBlock		    "Selector"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  123
	  SrcBlock		  "Selector"
	  SrcPort		  1
	  DstBlock		  "Demux"
	  DstPort		  1
	}
	Annotation {
	  SID			  "647"
	  Name			  "f(MoleSp)"
	  Position		  [1083, 945, 1131, 960]
	  InternalMargins	  [0, 0, 0, 0]
	  FixedHeight		  off
	  FixedWidth		  off
	  HorizontalAlignment	  "left"
	  VerticalAlignment	  "top"
	  ZOrder		  -6
	}
      }
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace"
      SID		      "207"
      Ports		      [1]
      Position		      [785, 125, 845, 155]
      ZOrder		      -8
      ShowName		      off
      VariableName	      "simout"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace1"
      SID		      "208"
      Ports		      [1]
      Position		      [785, 240, 845, 270]
      ZOrder		      -9
      ShowName		      off
      VariableName	      "xmv"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace2"
      SID		      "209"
      Ports		      [1]
      Position		      [785, 305, 845, 335]
      ZOrder		      -10
      ShowName		      off
      VariableName	      "idv"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace3"
      SID		      "210"
      Ports		      [1]
      Position		      [650, 25, 710, 55]
      ZOrder		      -11
      ShowName		      off
      VariableName	      "tout"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace4"
      SID		      "211"
      Ports		      [1]
      Position		      [1075, 260, 1135, 290]
      ZOrder		      -12
      ShowName		      off
      VariableName	      "OpCost"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace5"
      SID		      "684"
      Ports		      [1]
      Position		      [785, 395, 845, 425]
      ZOrder		      2
      ShowName		      off
      VariableName	      "atkxmv"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace6"
      SID		      "708"
      Ports		      [1]
      Position		      [785, 485, 845, 515]
      ZOrder		      3
      ShowName		      off
      VariableName	      "atkxmeas"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv1"
      SID		      "212"
      Position		      [385, 448, 440, 472]
      ZOrder		      -13
      ShowName		      off
      Value		      "50"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv10"
      SID		      "213"
      Position		      [385, 273, 440, 297]
      ZOrder		      -14
      ShowName		      off
      Value		      "0"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv11"
      SID		      "214"
      Position		      [385, 308, 440, 332]
      ZOrder		      -15
      ShowName		      off
      Value		      "100"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv13"
      SID		      "215"
      Position		      [385, 168, 440, 192]
      ZOrder		      -16
      ShowName		      off
      Value		      "53.8"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv14"
      SID		      "216"
      Position		      [385, 413, 440, 437]
      ZOrder		      -17
      ShowName		      off
      Value		      "22.89"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv2"
      SID		      "217"
      Position		      [385, 98, 440, 122]
      ZOrder		      -18
      ShowName		      off
      Value		      "50"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv3"
      SID		      "218"
      Position		      [385, 518, 440, 542]
      ZOrder		      -19
      ShowName		      off
      Value		      "65"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv4"
      SID		      "219"
      Position		      [385, 133, 440, 157]
      ZOrder		      -20
      ShowName		      off
      Value		      "2800"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv6"
      SID		      "220"
      Position		      [385, 483, 440, 507]
      ZOrder		      -21
      ShowName		      off
      Value		      "13.1"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv7"
      SID		      "221"
      Position		      [385, 203, 440, 227]
      ZOrder		      -22
      ShowName		      off
      Value		      "32.2"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv8"
      SID		      "222"
      Position		      [385, 378, 440, 402]
      ZOrder		      -23
      ShowName		      off
      Value		      "122.9"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv9"
      SID		      "223"
      Position		      [385, 238, 440, 262]
      ZOrder		      -24
      ShowName		      off
      Value		      "0"
    }
    Line {
      ZOrder		      1
      SrcBlock		      "TE Plant"
      SrcPort		      1
      Points		      [20, 0]
      Branch {
	ZOrder			2
	Points			[0, 55]
	DstBlock		"HourlyCost"
	DstPort			1
      }
      Branch {
	ZOrder			3
	DstBlock		"To Workspace"
	DstPort			1
      }
    }
    Line {
      ZOrder		      4
      SrcBlock		      "xmv1"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      11
    }
    Line {
      ZOrder		      5
      SrcBlock		      "xmv2"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      1
    }
    Line {
      ZOrder		      6
      SrcBlock		      "xmv3"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      13
    }
    Line {
      ZOrder		      7
      SrcBlock		      "xmv4"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      2
    }
    Line {
      ZOrder		      8
      SrcBlock		      "xmv8"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      9
    }
    Line {
      ZOrder		      9
      SrcBlock		      "xmv6"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      12
    }
    Line {
      ZOrder		      10
      SrcBlock		      "xmv7"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      4
    }
    Line {
      ZOrder		      11
      SrcBlock		      "TE Plant"
      SrcPort		      2
      Points		      [15, 0]
      Branch {
	ZOrder			12
	Points			[0, 25]
	DstBlock		"To Workspace1"
	DstPort			1
      }
      Branch {
	ZOrder			13
	DstBlock		"HourlyCost"
	DstPort			2
      }
    }
    Line {
      ZOrder		      14
      SrcBlock		      "TE Plant"
      SrcPort		      3
      DstBlock		      "To Workspace2"
      DstPort		      1
    }
    Line {
      ZOrder		      15
      SrcBlock		      "Clock"
      SrcPort		      1
      DstBlock		      "To Workspace3"
      DstPort		      1
    }
    Line {
      ZOrder		      16
      SrcBlock		      "HourlyCost"
      SrcPort		      1
      Points		      [5, 0]
      Branch {
	ZOrder			17
	Points			[17, 0]
	Branch {
	  ZOrder		  18
	  Points		  [0, -65]
	  DstBlock		  "Scope"
	  DstPort		  1
	}
	Branch {
	  ZOrder		  19
	  DstBlock		  "$ per hr"
	  DstPort		  1
	}
      }
      Branch {
	ZOrder			20
	Points			[0, 60]
	DstBlock		"To Workspace4"
	DstPort			1
      }
    }
    Line {
      ZOrder		      21
      SrcBlock		      "xmv9"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      5
    }
    Line {
      ZOrder		      22
      SrcBlock		      "xmv10"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      6
    }
    Line {
      ZOrder		      23
      SrcBlock		      "xmv11"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      7
    }
    Line {
      ZOrder		      24
      SrcBlock		      "Disturbances"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      8
    }
    Line {
      ZOrder		      25
      SrcBlock		      "xmv13"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      3
    }
    Line {
      ZOrder		      26
      SrcBlock		      "xmv14"
      SrcPort		      1
      DstBlock		      "TE Plant"
      DstPort		      10
    }
    Line {
      ZOrder		      27
      SrcBlock		      "TE Plant"
      SrcPort		      4
      DstBlock		      "To Workspace5"
      DstPort		      1
    }
    Line {
      ZOrder		      28
      SrcBlock		      "TE Plant"
      SrcPort		      5
      DstBlock		      "To Workspace6"
      DstPort		      1
    }
  }
}
#Finite State Machines
#
#   Stateflow Version 8.1 (R2014a) dated Feb  8 2014, 02:29:12
#
#
Stateflow {
  machine {
    id			    1
    name		    "TEModel"
    created		    "03-May-2013 19:33:24"
    isLibrary		    0
    firstTarget		    10
    sfVersion		    76014001.002
  }
  chart {
    id			    2
    name		    "TE Plant/MATLAB Function2"
    windowPosition	    [357.12 483.496 167 391]
    viewLimits		    [0 156.75 0 153.75]
    screen		    [1 1 1280 1024 1.041666666666667]
    treeNode		    [0 3 0 0]
    firstTransition	    8
    firstJunction	    7
    viewObj		    2
    machine		    1
    ssIdHighWaterMark	    8
    decomposition	    CLUSTER_CHART
    type		    EML_CHART
    firstData		    4
    chartFileNumber	    3
    disableImplicitCasting  1
    eml {
      name		      "fcn"
    }
  }
  state {
    id			    3
    labelString		    "eML_blk_kernel()"
    position		    [18 64.5 118 66]
    fontSize		    12
    chart		    2
    treeNode		    [2 0 0 0]
    superState		    SUBCHART
    subviewer		    2
    ssIdNumber		    1
    type		    FUNC_STATE
    decomposition	    CLUSTER_STATE
    eml {
      isEML		      1
      script		      "function y  = fcn(u,z)\n\n    y=(z/100)*u;\n    %plot(t,y);\nend\n"
      editorLayout	      "100 M4x1[10 5 700 500]"
    }
  }
  data {
    id			    4
    ssIdNumber		    4
    name		    "u"
    linkNode		    [2 0 5]
    scope		    INPUT_DATA
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
      }
      complexity	      SF_COMPLEX_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    5
    ssIdNumber		    5
    name		    "y"
    linkNode		    [2 4 6]
    scope		    OUTPUT_DATA
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_NO
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    6
    ssIdNumber		    6
    name		    "z"
    linkNode		    [2 5 0]
    scope		    INPUT_DATA
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  junction {
    id			    7
    position		    [23.5747 49.5747 7]
    chart		    2
    linkNode		    [2 0 0]
    subviewer		    2
    ssIdNumber		    3
    type		    CONNECTIVE_JUNCTION
  }
  transition {
    id			    8
    labelString		    "{eML_blk_kernel();}"
    labelPosition	    [32.125 19.875 102.544 14.964]
    fontSize		    12
    src {
      intersection	      [0 0 1 0 23.5747 14.625 0 0]
    }
    dst {
      id		      7
      intersection	      [1 0 -1 0 23.5747 42.5747 0 0]
    }
    midPoint		    [23.5747 24.9468]
    chart		    2
    linkNode		    [2 0 0]
    dataLimits		    [21.175 25.975 14.625 42.575]
    subviewer		    2
    drawStyle		    SMART
    slide {
      sticky		      BOTH_STICK
    }
    executionOrder	    1
    ssIdNumber		    2
  }
  instance {
    id			    9
    name		    "TE Plant/MATLAB Function2"
    machine		    1
    chart		    2
  }
  target {
    id			    10
    name		    "sfun"
    description		    "Default Simulink S-Function Target."
    machine		    1
    linkNode		    [1 0 11]
  }
  target {
    id			    11
    name		    "rtw"
    machine		    1
    linkNode		    [1 10 0]
  }
}
