using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;
using PHPAnalysis.Analysis.PHPDefinitions;
using PHPAnalysis.Annotations;

namespace PHPAnalysis.Analysis
{
    [Export(typeof(IVulnerabilityReporter))]
    public sealed class ConsoleVulnerabilityReporter : IVulnerabilityReporter
    {
        private readonly FunctionsHandler _funcHandler;
        
        [ImportingConstructor]
        public ConsoleVulnerabilityReporter(FunctionsHandler fh)
        {
            this._funcHandler = fh;
        }
        
        public void ReportVulnerability(IVulnerabilityInfo vulnerabilityInfo)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine();
            Console.WriteLine("--------------------");
            Console.WriteLine(vulnerabilityInfo.Message);
            Console.WriteLine("Include sequence: " + GetIncludeSequenceString(vulnerabilityInfo));
            if (vulnerabilityInfo.CallStack.Any())
            {
                PrintCallStackAndFile(vulnerabilityInfo.CallStack.Peek().Name);
            }
            Console.WriteLine("--------------------");
            Console.ForegroundColor = ConsoleColor.Gray;
        }

        public void ReportStoredVulnerability(IVulnerabilityInfo[] vulnerabilityPathInfos)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine();
            Console.WriteLine("--------------------");

            foreach (IVulnerabilityInfo vulnInfo in vulnerabilityPathInfos)
            {
                Console.WriteLine(vulnInfo.Message);
                Console.WriteLine("Include sequence: " + GetIncludeSequenceString(vulnInfo));
                if (vulnInfo.CallStack.Any())
                {
                    PrintCallStackAndFile(vulnInfo.CallStack.Peek().Name);
                }
            }

            Console.WriteLine("--------------------");
            Console.ForegroundColor = ConsoleColor.Gray;
        }

        public void RegisterFunctionsHandler(FunctionsHandler functionsHandler)
        {
            // No need for a functionsHandler here
        }

        public void PrintCallStackAndFile(string funcName)
        {
            var funcList = _funcHandler.LookupFunction(funcName);
            if (!funcList.Any())
            {
                Console.WriteLine("In function/method: " + funcName);
            }
            else
            {
                if (funcList.Count == 1)
                {
                    var str = "In function/method: " + funcList.First().Name +
                          (string.IsNullOrWhiteSpace(funcList.First().File) ? "" : Environment.NewLine + "In file: " + funcList.First().File);
                    Console.WriteLine(str);
                }
                else
                {
                    Console.WriteLine("In function/method: " + funcList.First().Name + Environment.NewLine
                                        + "File candidates: " + Environment.NewLine
                                        + string.Join(Environment.NewLine, funcList.Select(x => x.File)));
                }
            }
        }

        public string GetIncludeSequenceString(IVulnerabilityInfo vulnInfo)
        {
            var builder = new StringBuilder();
            const string delimeter = " → ";

            for (int i = vulnInfo.IncludeStack.Count() - 1; i >= 0; i--)
            {
                builder.Append(vulnInfo.IncludeStack.ElementAt(i).Name);
                builder.Append(delimeter);
            }

            builder.Remove(builder.Length - delimeter.Length, delimeter.Length);
            return builder.ToString();
        }
    }
}