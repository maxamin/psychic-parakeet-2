using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PHPAnalysis.Analysis.CFG;
using PHPAnalysis.Analysis.CFG.Taint;
using PHPAnalysis.Annotations;
using PHPAnalysis.Data;
using PHPAnalysis.Utils;

namespace PHPAnalysis.Analysis
{
    public interface IVulnerabilityStorage
    {
        IEnumerable<IVulnerabilityInfo> Vulnerabilities { get; }

        void AddVulnerability(IVulnerabilityInfo vulnerabilityInfo);
        void AddPossibleStoredVulnerability(IStoredVulnerabilityInfo vulnerabilityInfo);
    }

    public interface IVulnerabilityInfo
    {
        string Message { get; }
        ImmutableStack<File> IncludeStack { get; } 

        ImmutableStack<FunctionCall> CallStack { get; }
    }

    public interface IStoredVulnerabilityInfo : IVulnerabilityInfo
    {
        StoredVulnInfo PossibleStoredVuln { get; set; }
        VulnType VulnerabilityType { get; set; }
    }
    public class VulnerabilityInfo : IVulnerabilityInfo
    {
        public string Message { get; set; }
        public ImmutableStack<File> IncludeStack { get; set; }

        public ImmutableStack<FunctionCall> CallStack { get; set; }
    }
    public class StoredVulnerabilityInfo : IStoredVulnerabilityInfo
    {
        public string Message { get; set; }
        public ImmutableStack<File> IncludeStack { get; set; }
        public ImmutableStack<FunctionCall> CallStack { get; set; }

        public StoredVulnInfo PossibleStoredVuln { get; set; }
        public VulnType VulnerabilityType { get; set; }
    }

    [Flags]
    public enum VulnType
    {
        Unknown = 0,
        XSS = 1,
        SQL = 2,
        BOTH = 3,
    }
}
