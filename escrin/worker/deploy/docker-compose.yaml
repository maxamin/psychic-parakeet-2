version: '3'

x-base:
  service: &service
    restart: always
    pull_policy: always
  log_level: &log_level ${LOG_LEVEL:-info}

volumes:
  ipfs-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/ipfs

services:
  ipfs:
    image: ipfs/kubo:v0.19.1
    ports:
      - '80:8080'
      - '4001:4001'
      - '4001:4001/udp'
      - '127.0.0.1:5001:5001'
    healthcheck:
      test: ["CMD", "ipfs", "cat", "/ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme"]
      interval: 5s
      timeout: 2s
      retries: 5
    volumes:
      - ipfs-data:/data/ipfs
    entrypoint: /bin/sh -c
    command: |
      'ipfs init
       ipfs config --json Pins.AutoPinMode recursive
       ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin "[\"*\"]"
       ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods "[\"GET\"]"
       ipfs config --json API.HTTPHeaders.Access-Control-Allow-Credentials "[\"false\"]"
       ipfs daemon --offline'

  bacalhau:
    privileged: true
    image: ghcr.io/escrin/escrin/bacalhau:${BACALHAU_BRANCH}
    build:
      context: ..
      dockerfile: bacalhau.Dockerfile
      args:
        BACALHAU_BRANCH: ${BACALHAU_BRANCH}
    command: serve --job-selection-accept-networked --node-type compute,requester --peer none --ipfs-connect /dns/ipfs/tcp/5001 --limit-total-cpu 100 --limit-total-memory 1G
    environment:
      ESTUARY_API_KEY: ${ESTUARY_API_KEY}
      LOG_LEVEL: *log_level
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp
    ports:
      - '127.0.0.1:1234:1234'
    links:
      - ipfs
    depends_on:
      ipfs:
        condition: service_healthy
    <<: *service
