// Copyright 2022 Dynatrace LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Portions of this code, as identified in remarks, are provided under the
// Creative Commons BY-SA 4.0 or the MIT license, and are provided without
// any warranty. In each of the remarks, we have provided attribution to the
// original creators and other attribution parties, along with the title of
// the code (if known) a copyright notice and a link to the license, and a
// statement indicating whether or not we have modified the code.

import { Button, Card, CardContent, Stack, Typography } from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import Collapse from "@mui/material/Collapse";
import React, { useEffect, useState } from "react";
import ArgsContainer from "@components/ArgsContainer";
import { Step } from "@components/ExploitPage";
import ExpandMore from "@components/ExpandMore";

interface ExploitStepProps {
  step: Step;
  stepNo: number; // for expand logic
  initWebSocket: Function;
  setCurrentStepIndex: Function;
  currentStepIndex: number;
  isLastStep: boolean;
  containerId: string;
  deleteExploitContainer: Function;
  updateEnvVariables: Function;
  enqueueSnackbar: Function;
}

export enum Status {
  IDLE,
  RUNNING,
  DONE,
}

const statusColorMap = ["#1976D2", "#7b1fa2", "#2e7d32"];

/*
 * Shows one step of an exploit, along with buttons
 * to run it, the description, the arguments and most
 * importantly the streamed log lines.
 */
const ExploitStep = ({
  step,
  stepNo,
  initWebSocket,
  setCurrentStepIndex: setCurrentStepIndex,
  currentStepIndex: currentStepIndex,
  isLastStep,
  containerId,
  deleteExploitContainer,
  updateEnvVariables,
  enqueueSnackbar,
}: ExploitStepProps) => {
  const [expanded, setExpanded] = useState<boolean>(stepNo === 0);
  const [expandedLogs, setExpandedLogs] = useState<boolean>(false);
  const [status, setStatus] = useState(Status.IDLE);
  const [logs, setLogs] = useState<string[]>([]);
  const [userInteracted, setUserInteracted] = useState<boolean>(false);

  const handleExpandClick = () => {
    setUserInteracted(true);
    setExpanded(!expanded);
  };

  const handleWebsocketConnectionTermination = (newStatus: Status) => {
    setStatus(newStatus);
  };

  const handleNextButtonClick = () => {
    if (!isLastStep) {
      setExpanded(false);
      setCurrentStepIndex(stepNo + 1);
    } else {
      deleteExploitContainer();
    }
  };

  useEffect(() => {
    setUserInteracted(false);
  }, [currentStepIndex]);

  const handleRunButtonClick = () => {
    setStatus(Status.RUNNING);
    initWebSocket(handleWebsocketConnectionTermination, setLogs, stepNo);
    setExpandedLogs(true);
  };

  return (
    <Card
      sx={{ borderColor: `${statusColorMap[status]}` }}
      className={`mt-6 bg-gray-100 border-solid border-0 border-r-8 ${
        isLastStep && "mb-6"
      }`}
    >
      <CardContent>
        <Stack direction="row" justifyContent="left" alignContent="center">
          <ExpandMore
            expand={
              /* This ensures, that when the next-button is clicked,
               * the next step (currentStepIndex) is expanded, but only as long
               * as the user doesn't interact with it.
               * (expanding using next-button shouldn't block user-interaction)
               * The expand-variable is modified at user interaction,
               * or when then next-button is clicked,
               * to close the Card. */
              +(expanded || (!userInteracted && stepNo === currentStepIndex))
            }
            onClick={handleExpandClick}
            aria-expanded={
              expanded || (!userInteracted && stepNo === currentStepIndex)
            }
            aria-label="show more"
            className="float-right"
          >
            <ExpandMoreIcon />
          </ExpandMore>
          <Typography
            variant="h5"
            component="div"
            align="center"
            alignSelf="center"
          >
            {step.name}
          </Typography>
        </Stack>

        <Collapse
          in={expanded || (!userInteracted && stepNo === currentStepIndex)}
          timeout="auto"
          unmountOnExit
        >
          <CardContent>
            <Button
              variant="contained"
              color="success"
              className="float-right ml-10"
              onClick={handleRunButtonClick}
            >
              Run
            </Button>
            <Typography gutterBottom component="div">
              Description:
            </Typography>
            <Typography variant="body2">{step.desc}</Typography>
            <ArgsContainer
              containerId={containerId}
              stepId={step.id}
              updateEnvVariable={updateEnvVariables}
              enqueueSnackbar={enqueueSnackbar}
            ></ArgsContainer>

            <Collapse in={expandedLogs} timeout="auto" unmountOnExit>
              <Typography gutterBottom component="div">
                Logs:
              </Typography>
              <Card>
                <CardContent>
                  {logs.map((x, i) => (
                    <Typography
                      variant="body2"
                      key={i}
                      sx={{ whiteSpace: "break-spaces" }}
                      className="code break-all"
                    >
                      {x}
                    </Typography>
                  ))}
                </CardContent>
              </Card>
              <>
                {status === Status.DONE && (
                  <Button
                    variant="contained"
                    className="float-right mt-3"
                    onClick={handleNextButtonClick}
                  >
                    {!isLastStep ? "Next" : "Finish"}
                  </Button>
                )}
              </>
            </Collapse>
          </CardContent>
        </Collapse>
      </CardContent>
    </Card>
  );
};

export default ExploitStep;
