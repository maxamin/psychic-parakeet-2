import { Column, Entity, Index, BaseEntity, PrimaryGeneratedColumn } from 'typeorm';

export enum OSVAffectedRangeType {
  GIT = 'GIT',
  SEMVER = 'SEMVER',
  ECOSYSTEM = 'ECOSYSTEM',
}

export enum OSVReferenceType {
  ADVISORY = 'ADVISORY',
  ARTICLE = 'ARTICLE',
  REPORT = 'REPORT',
  FIX = 'FIX',
  GIT = 'GIT',
  PACKAGE = 'PACKAGE',
  WEB = 'WEB',
}

export type OSVAffectedRangeEvent = {
  introduced?: string;
  fixed?: string;
  last_affected?: string;
  limit?: string;
};

export type OSVAffectedRange = {
  type: OSVAffectedRangeType;
  repo?: string;
  events: OSVAffectedRangeEvent[];
  database_specific?: object;
};

export type OSVAffectedPackage = {
  package: {
    ecosystem: string;
    name: string;
    purl?: string;
  };
  ranges?: OSVAffectedRange[];
  versions?: string[];
  ecosystem_specific?: object;
  database_specific?: object;
};

// TODO: Conditionals could've been typed out much better, but it serves the purpose for now
// Open Source Vulnerability format (ref: https://ossf.github.io/osv-schema/)
export type OpenSourceVulnerability = {
  schema_version: string;

  id: string;

  modified: string;
  published?: string;
  withdrawn?: string;

  aliases?: string[];
  related?: string[];

  summary?: string;
  details?: string;

  severity?: Array<{
    type: 'CVSS_V3';
    score: string;
  }>;

  affected?: OSVAffectedPackage[];

  references?: Array<{
    type: OSVReferenceType;
    url: string;
  }>;
  credits?: Array<{
    name: string;
    contact?: string[];
  }>;

  database_specific?: object;
};

export type GithubAdvisoryDatabaseSpecific = {
  cwe_ids?: string[];
  severity?: GithubAdvisorySeverity;
  github_reviewed: boolean;
};

export enum GithubAdvisorySeverity {
  Low = 'LOW',
  Moderate = 'MODERATE',
  High = 'HIGH',
  Critical = 'CRITICAL',
}

export type PackageVulnerabilityData = {
  affectedPackageName: string;
  affectedVersionRange: string;
  osvId: string;
  detailsUrl: string;
  summary?: string;
  severity?: GithubAdvisorySeverity;
};

@Entity({ name: 'package_vulnerability' })
@Index(['packageName', 'osvId'], { unique: true })
export class PackageVulnerability extends BaseEntity {
  @PrimaryGeneratedColumn({ type: 'int' })
  id!: number; // Autogenerated PKey as one vulnerability may point to multiple packages

  @Column()
  packageName!: string; // Affected npm package name

  @Column()
  packageVersionRange!: string; // Affected version range

  @Column()
  osvId!: string; // Source OSV id

  @Column({ type: 'jsonb' })
  osvData!: OpenSourceVulnerability; // Raw OSV data
}
