Model {
  Name			  "VAcModel"
  Version		  8.3
  MdlSubVersion		  0
  SavedCharacterEncoding  "windows-1252"
  GraphicalInterface {
    NumRootInports	    0
    NumRootOutports	    0
    ParameterArgumentNames  ""
    ComputedModelVersion    "1.2339"
    NumModelReferences	    0
    NumTestPointedSignals   0
  }
  PreLoadFcn		  "initModel"
  SaveDefaultBlockParams  on
  ScopeRefreshTime	  0.035000
  OverrideScopeRefreshTime on
  DisableAllScopes	  off
  DataTypeOverride	  "UseLocalSettings"
  DataTypeOverrideAppliesTo "AllNumericTypes"
  MinMaxOverflowLogging	  "UseLocalSettings"
  MinMaxOverflowArchiveMode "Overwrite"
  FPTRunName		  "Run 1"
  MaxMDLFileLineLength	  120
  StopFcn		  "overview"
  Object {
    $PropName		    "BdWindowsInfo"
    $ObjectID		    1
    $ClassName		    "Simulink.BDWindowsInfo"
    Object {
      $PropName		      "WindowsInfo"
      $ObjectID		      2
      $ClassName	      "Simulink.WindowInfo"
      IsActive		      [1]
      Location		      [-1688.0, -250.0, 1696.0, 1062.0]
      Object {
	$PropName		"ModelBrowserInfo"
	$ObjectID		3
	$ClassName		"Simulink.ModelBrowserInfo"
	Visible			[0]
	DockPosition		"Left"
	Width			[50]
	Height			[50]
	Filter			[9]
      }
      Object {
	$PropName		"ExplorerBarInfo"
	$ObjectID		4
	$ClassName		"Simulink.ExplorerBarInfo"
	Visible			[1]
      }
      Object {
	$PropName		"EditorsInfo"
	$ObjectID		5
	$ClassName		"Simulink.EditorInfo"
	IsActive		[1]
	ViewObjType		"SimulinkSubsys"
	LoadSaveID		"685"
	Extents			[1646.0, 888.0]
	ZoomFactor		[0.8]
	Offset			[0.0, 0.0]
      }
    }
  }
  Created		  "Fri Nov 22 10:46:09 2002"
  Creator		  "pydipalli"
  UpdateHistory		  "UpdateHistoryNever"
  ModifiedByFormat	  "%<Auto>"
  LastModifiedBy	  "lexx"
  ModifiedDateFormat	  "%<Auto>"
  LastModifiedDate	  "Wed Feb 04 22:15:09 2015"
  RTWModifiedTimeStamp	  344988896
  ModelVersionFormat	  "1.%<AutoIncrement:2339>"
  ConfigurationManager	  "none"
  SampleTimeColors	  on
  SampleTimeAnnotations	  on
  LibraryLinkDisplay	  "all"
  WideLines		  on
  ShowLineDimensions	  on
  ShowPortDataTypes	  off
  ShowDesignRanges	  on
  ShowLoopsOnError	  on
  IgnoreBidirectionalLines off
  ShowStorageClass	  off
  ShowTestPointIcons	  on
  ShowSignalResolutionIcons on
  ShowViewerIcons	  on
  SortedOrder		  off
  ExecutionContextIcon	  off
  ShowLinearizationAnnotations on
  BlockNameDataTip	  off
  BlockParametersDataTip  off
  BlockDescriptionStringDataTip	off
  ToolBar		  on
  StatusBar		  on
  BrowserShowLibraryLinks off
  BrowserLookUnderMasks	  off
  SimulationMode	  "normal"
  PauseTimes		  "5"
  NumberOfSteps		  1
  SnapshotBufferSize	  10
  SnapshotInterval	  10
  NumberOfLastSnapshots	  0
  LinearizationMsg	  "none"
  Profile		  off
  ParamWorkspaceSource	  "MATLABWorkspace"
  AccelSystemTargetFile	  "accel.tlc"
  AccelTemplateMakefile	  "accel_default_tmf"
  AccelMakeCommand	  "make_rtw"
  TryForcingSFcnDF	  off
  Object {
    $PropName		    "DataLoggingOverride"
    $ObjectID		    6
    $ClassName		    "Simulink.SimulationData.ModelLoggingInfo"
    model_		    "VAcModel"
    Array {
      Type		      "Cell"
      Dimension		      1
      Cell		      "VAcModel"
      PropName		      "logAsSpecifiedByModels_"
    }
    Array {
      Type		      "Cell"
      Dimension		      1
      Cell		      ""
      PropName		      "logAsSpecifiedByModelsSSIDs_"
    }
  }
  RecordCoverage	  off
  CovPath		  "/"
  CovSaveName		  "covdata"
  CovMetricSettings	  "dw"
  CovNameIncrementing	  off
  CovHtmlReporting	  on
  CovForceBlockReductionOff on
  CovEnableCumulative	  on
  covSaveCumulativeToWorkspaceVar on
  CovSaveSingleToWorkspaceVar on
  CovCumulativeVarName	  "covCumulativeData"
  CovCumulativeReport	  off
  CovReportOnPause	  on
  CovModelRefEnable	  "Off"
  CovExternalEMLEnable	  off
  CovSFcnEnable		  off
  CovBoundaryAbsTol	  0.000010
  CovBoundaryRelTol	  0.010000
  ExtModeBatchMode	  off
  ExtModeEnableFloating	  on
  ExtModeTrigType	  "manual"
  ExtModeTrigMode	  "normal"
  ExtModeTrigPort	  "1"
  ExtModeTrigElement	  "any"
  ExtModeTrigDuration	  1000
  ExtModeTrigDurationFloating "auto"
  ExtModeTrigHoldOff	  0
  ExtModeTrigDelay	  0
  ExtModeTrigDirection	  "rising"
  ExtModeTrigLevel	  0
  ExtModeArchiveMode	  "off"
  ExtModeAutoIncOneShot	  off
  ExtModeIncDirWhenArm	  off
  ExtModeAddSuffixToVar	  off
  ExtModeWriteAllDataToWs off
  ExtModeArmWhenConnect	  on
  ExtModeSkipDownloadWhenConnect off
  ExtModeLogAll		  on
  ExtModeAutoUpdateStatusClock on
  BufferReuse		  on
  ShowModelReferenceBlockVersion off
  ShowModelReferenceBlockIO off
  Array {
    Type		    "Handle"
    Dimension		    1
    Simulink.ConfigSet {
      $ObjectID		      7
      Version		      "1.14.2"
      Array {
	Type			"Handle"
	Dimension		8
	Simulink.SolverCC {
	  $ObjectID		  8
	  Version		  "1.14.2"
	  StartTime		  "0.0"
	  StopTime		  "24"
	  AbsTol		  "auto"
	  FixedStep		  "Ts_base"
	  InitialStep		  "auto"
	  MaxNumMinSteps	  "-1"
	  MaxOrder		  5
	  ZcThreshold		  "auto"
	  ConsecutiveZCsStepRelTol "10*128*eps"
	  MaxConsecutiveZCs	  "1000"
	  ExtrapolationOrder	  4
	  NumberNewtonIterations  1
	  MaxStep		  "Ts_base"
	  MinStep		  "1e-6"
	  MaxConsecutiveMinStep	  "1"
	  RelTol		  "1e-6"
	  SolverMode		  "MultiTasking"
	  EnableConcurrentExecution off
	  ConcurrentTasks	  off
	  Solver		  "FixedStepDiscrete"
	  SolverName		  "FixedStepDiscrete"
	  SolverJacobianMethodControl "auto"
	  ShapePreserveControl	  "DisableAll"
	  ZeroCrossControl	  "UseLocalSettings"
	  ZeroCrossAlgorithm	  "Nonadaptive"
	  AlgebraicLoopSolver	  "TrustRegion"
	  SolverResetMethod	  "Fast"
	  PositivePriorityOrder	  off
	  AutoInsertRateTranBlk	  on
	  SampleTimeConstraint	  "Unconstrained"
	  InsertRTBMode		  "Whenever possible"
	}
	Simulink.DataIOCC {
	  $ObjectID		  9
	  Version		  "1.14.2"
	  Decimation		  "1"
	  ExternalInput		  "[t, u]"
	  FinalStateName	  "xFinal"
	  InitialState		  "xInitial"
	  LimitDataPoints	  off
	  MaxDataPoints		  "1000"
	  LoadExternalInput	  off
	  LoadInitialState	  off
	  SaveFinalState	  off
	  SaveCompleteFinalSimState off
	  SaveFormat		  "Array"
	  SignalLoggingSaveFormat "Dataset"
	  SaveOutput		  off
	  SaveState		  off
	  SignalLogging		  off
	  DSMLogging		  off
	  InspectSignalLogs	  off
	  VisualizeSimOutput	  on
	  SaveTime		  off
	  ReturnWorkspaceOutputs  off
	  StateSaveName		  "xx"
	  TimeSaveName		  "tt"
	  OutputSaveName	  "yout"
	  SignalLoggingName	  "logsout"
	  DSMLoggingName	  "dsmout"
	  OutputOption		  "RefineOutputTimes"
	  OutputTimes		  "[]"
	  ReturnWorkspaceOutputsName "out"
	  Refine		  "1"
	}
	Simulink.OptimizationCC {
	  $ObjectID		  10
	  Version		  "1.14.2"
	  Array {
	    Type		    "Cell"
	    Dimension		    4
	    Cell		    "ZeroExternalMemoryAtStartup"
	    Cell		    "ZeroInternalMemoryAtStartup"
	    Cell		    "NoFixptDivByZeroProtection"
	    Cell		    "OptimizeModelRefInitCode"
	    PropName		    "DisabledProps"
	  }
	  BlockReduction	  on
	  BooleanDataType	  on
	  ConditionallyExecuteInputs on
	  InlineParams		  off
	  UseIntDivNetSlope	  off
	  UseFloatMulNetSlope	  off
	  DefaultUnderspecifiedDataType	"double"
	  UseSpecifiedMinMax	  off
	  InlineInvariantSignals  off
	  OptimizeBlockIOStorage  on
	  BufferReuse		  on
	  EnhancedBackFolding	  off
	  CachingGlobalReferences off
	  GlobalBufferReuse	  on
	  StrengthReduction	  off
	  ExpressionFolding	  on
	  BooleansAsBitfields	  off
	  BitfieldContainerType	  "uint_T"
	  EnableMemcpy		  on
	  MemcpyThreshold	  64
	  PassReuseOutputArgsAs	  "Structure reference"
	  ExpressionDepthLimit	  2147483647
	  FoldNonRolledExpr	  on
	  LocalBlockOutputs	  on
	  RollThreshold		  5
	  SystemCodeInlineAuto	  off
	  StateBitsets		  off
	  DataBitsets		  off
	  ActiveStateOutputEnumStorageType "Native Integer"
	  UseTempVars		  off
	  ZeroExternalMemoryAtStartup on
	  ZeroInternalMemoryAtStartup on
	  InitFltsAndDblsToZero	  on
	  NoFixptDivByZeroProtection off
	  EfficientFloat2IntCast  off
	  EfficientMapNaN2IntZero on
	  OptimizeModelRefInitCode off
	  LifeSpan		  "inf"
	  MaxStackSize		  "Inherit from target"
	  BufferReusableBoundary  on
	  SimCompilerOptimization "Off"
	  AccelVerboseBuild	  off
	  ParallelExecutionInRapidAccelerator on
	}
	Simulink.DebuggingCC {
	  $ObjectID		  11
	  Version		  "1.14.2"
	  RTPrefix		  "error"
	  ConsistencyChecking	  "none"
	  ArrayBoundsChecking	  "none"
	  SignalInfNanChecking	  "none"
	  SignalRangeChecking	  "none"
	  ReadBeforeWriteMsg	  "UseLocalSettings"
	  WriteAfterWriteMsg	  "UseLocalSettings"
	  WriteAfterReadMsg	  "UseLocalSettings"
	  AlgebraicLoopMsg	  "none"
	  ArtificialAlgebraicLoopMsg "warning"
	  SaveWithDisabledLinksMsg "none"
	  SaveWithParameterizedLinksMsg	"none"
	  CheckSSInitialOutputMsg on
	  UnderspecifiedInitializationDetection	"Classic"
	  MergeDetectMultiDrivingBlocksExec "none"
	  CheckExecutionContextPreStartOutputMsg off
	  CheckExecutionContextRuntimeOutputMsg	off
	  SignalResolutionControl "TryResolveAllWithWarning"
	  BlockPriorityViolationMsg "warning"
	  MinStepSizeMsg	  "warning"
	  TimeAdjustmentMsg	  "none"
	  MaxConsecutiveZCsMsg	  "error"
	  MaskedZcDiagnostic	  "warning"
	  IgnoredZcDiagnostic	  "warning"
	  SolverPrmCheckMsg	  "none"
	  InheritedTsInSrcMsg	  "none"
	  DiscreteInheritContinuousMsg "warning"
	  MultiTaskDSMMsg	  "warning"
	  MultiTaskCondExecSysMsg "none"
	  MultiTaskRateTransMsg	  "error"
	  SingleTaskRateTransMsg  "none"
	  TasksWithSamePriorityMsg "warning"
	  SigSpecEnsureSampleTimeMsg "warning"
	  CheckMatrixSingularityMsg "none"
	  IntegerOverflowMsg	  "warning"
	  Int32ToFloatConvMsg	  "warning"
	  ParameterDowncastMsg	  "error"
	  ParameterOverflowMsg	  "error"
	  ParameterUnderflowMsg	  "none"
	  ParameterPrecisionLossMsg "warning"
	  ParameterTunabilityLossMsg "warning"
	  FixptConstUnderflowMsg  "none"
	  FixptConstOverflowMsg	  "none"
	  FixptConstPrecisionLossMsg "none"
	  UnderSpecifiedDataTypeMsg "none"
	  UnnecessaryDatatypeConvMsg "none"
	  VectorMatrixConversionMsg "none"
	  InvalidFcnCallConnMsg	  "error"
	  FcnCallInpInsideContextMsg "UseLocalSettings"
	  SignalLabelMismatchMsg  "none"
	  UnconnectedInputMsg	  "none"
	  UnconnectedOutputMsg	  "none"
	  UnconnectedLineMsg	  "warning"
	  SFcnCompatibilityMsg	  "none"
	  FrameProcessingCompatibilityMsg "warning"
	  UniqueDataStoreMsg	  "none"
	  BusObjectLabelMismatch  "warning"
	  RootOutportRequireBusObject "warning"
	  AssertControl		  "UseLocalSettings"
	  EnableOverflowDetection off
	  ModelReferenceIOMsg	  "none"
	  ModelReferenceMultiInstanceNormalModeStructChecksumCheck "error"
	  ModelReferenceVersionMismatchMessage "none"
	  ModelReferenceIOMismatchMessage "none"
	  ModelReferenceCSMismatchMessage "none"
	  UnknownTsInhSupMsg	  "warning"
	  ModelReferenceDataLoggingMessage "warning"
	  ModelReferenceSymbolNameMessage "warning"
	  ModelReferenceExtraNoncontSigs "error"
	  StateNameClashWarn	  "warning"
	  SimStateInterfaceChecksumMismatchMsg "warning"
	  SimStateOlderReleaseMsg "error"
	  InitInArrayFormatMsg	  "warning"
	  StrictBusMsg		  "ErrorLevel1"
	  BusNameAdapt		  "WarnAndRepair"
	  NonBusSignalsTreatedAsBus "none"
	  LoggingUnavailableSignals "error"
	  BlockIODiagnostic	  "none"
	  SFUnusedDataAndEventsDiag "warning"
	  SFUnexpectedBacktrackingDiag "warning"
	  SFInvalidInputDataAccessInChartInitDiag "warning"
	  SFNoUnconditionalDefaultTransitionDiag "warning"
	  SFTransitionOutsideNaturalParentDiag "warning"
	  SFUnconditionalTransitionShadowingDiag "warning"
	  SFUndirectedBroadcastEventsDiag "warning"
	  SFTransitionActionBeforeConditionDiag	"warning"
	}
	Simulink.HardwareCC {
	  $ObjectID		  12
	  Version		  "1.14.2"
	  ProdBitPerChar	  8
	  ProdBitPerShort	  16
	  ProdBitPerInt		  32
	  ProdBitPerLong	  32
	  ProdBitPerLongLong	  64
	  ProdBitPerFloat	  32
	  ProdBitPerDouble	  64
	  ProdBitPerPointer	  32
	  ProdLargestAtomicInteger "Char"
	  ProdLargestAtomicFloat  "None"
	  ProdIntDivRoundTo	  "Undefined"
	  ProdEndianess		  "Unspecified"
	  ProdWordSize		  32
	  ProdShiftRightIntArith  on
	  ProdLongLongMode	  off
	  ProdHWDeviceType	  "32-bit Generic"
	  TargetBitPerChar	  8
	  TargetBitPerShort	  16
	  TargetBitPerInt	  32
	  TargetBitPerLong	  32
	  TargetBitPerLongLong	  64
	  TargetBitPerFloat	  32
	  TargetBitPerDouble	  64
	  TargetBitPerPointer	  32
	  TargetLargestAtomicInteger "Char"
	  TargetLargestAtomicFloat "None"
	  TargetShiftRightIntArith on
	  TargetLongLongMode	  off
	  TargetIntDivRoundTo	  "Undefined"
	  TargetEndianess	  "Unspecified"
	  TargetWordSize	  32
	  TargetTypeEmulationWarnSuppressLevel 0
	  TargetPreprocMaxBitsSint 32
	  TargetPreprocMaxBitsUint 32
	  TargetHWDeviceType	  "Specified"
	  TargetUnknown		  on
	  ProdEqTarget		  on
	}
	Simulink.ModelReferenceCC {
	  $ObjectID		  13
	  Version		  "1.14.2"
	  UpdateModelReferenceTargets "IfOutOfDateOrStructuralChange"
	  CheckModelReferenceTargetMessage "error"
	  EnableParallelModelReferenceBuilds off
	  ParallelModelReferenceErrorOnInvalidPool on
	  ParallelModelReferenceMATLABWorkerInit "None"
	  ModelReferenceNumInstancesAllowed "Multi"
	  PropagateVarSize	  "Infer from blocks in model"
	  ModelReferencePassRootInputsByReference on
	  ModelReferenceMinAlgLoopOccurrences off
	  PropagateSignalLabelsOutOfModel off
	  SupportModelReferenceSimTargetCustomCode off
	}
	Simulink.SFSimCC {
	  $ObjectID		  14
	  Version		  "1.14.2"
	  SFSimEnableDebug	  on
	  SFSimOverflowDetection  on
	  SFSimEcho		  on
	  SimBlas		  on
	  SimCtrlC		  on
	  SimExtrinsic		  on
	  SimIntegrity		  on
	  SimUseLocalCustomCode	  off
	  SimParseCustomCode	  on
	  SimBuildMode		  "sf_incremental_build"
	  SimGenImportedTypeDefs  off
	}
	Simulink.RTWCC {
	  $BackupClass		  "Simulink.RTWCC"
	  $ObjectID		  15
	  Version		  "1.14.2"
	  Array {
	    Type		    "Cell"
	    Dimension		    1
	    Cell		    "IncludeHyperlinkInReport"
	    PropName		    "DisabledProps"
	  }
	  SystemTargetFile	  "grt.tlc"
	  TLCOptions		  ""
	  GenCodeOnly		  off
	  MakeCommand		  "make_rtw"
	  GenerateMakefile	  on
	  PackageGeneratedCodeAndArtifacts off
	  PackageName		  ""
	  TemplateMakefile	  "grt_default_tmf"
	  PostCodeGenCommand	  ""
	  Description		  ""
	  GenerateReport	  off
	  SaveLog		  off
	  RTWVerbose		  on
	  RetainRTWFile		  off
	  ProfileTLC		  off
	  TLCDebug		  off
	  TLCCoverage		  off
	  TLCAssert		  off
	  ProcessScriptMode	  "Default"
	  ConfigurationMode	  "Optimized"
	  ProcessScript		  ""
	  ConfigurationScript	  ""
	  ConfigAtBuild		  off
	  RTWUseLocalCustomCode	  off
	  RTWUseSimCustomCode	  off
	  CustomSourceCode	  ""
	  CustomHeaderCode	  ""
	  CustomInclude		  ""
	  CustomSource		  ""
	  CustomLibrary		  ""
	  CustomInitializer	  ""
	  CustomTerminator	  ""
	  Toolchain		  "Automatically locate an installed toolchain"
	  BuildConfiguration	  "Faster Builds"
	  IncludeHyperlinkInReport off
	  LaunchReport		  off
	  PortableWordSizes	  off
	  CreateSILPILBlock	  "None"
	  CodeExecutionProfiling  off
	  CodeExecutionProfileVariable "executionProfile"
	  CodeProfilingSaveOptions "SummaryOnly"
	  CodeProfilingInstrumentation off
	  SILDebugging		  off
	  TargetLang		  "C"
	  IncludeBusHierarchyInRTWFileBlockHierarchyMap	off
	  IncludeERTFirstTime	  on
	  GenerateTraceInfo	  off
	  GenerateTraceReport	  off
	  GenerateTraceReportSl	  off
	  GenerateTraceReportSf	  off
	  GenerateTraceReportEml  off
	  GenerateCodeInfo	  off
	  GenerateWebview	  off
	  GenerateCodeMetricsReport off
	  GenerateCodeReplacementReport	off
	  RTWCompilerOptimization "Off"
	  RTWCustomCompilerOptimizations ""
	  CheckMdlBeforeBuild	  "Off"
	  CustomRebuildMode	  "OnUpdate"
	  DataInitializer	  ""
	  SharedConstantsCachingThreshold 1024
	  Array {
	    Type		    "Handle"
	    Dimension		    2
	    Simulink.CodeAppCC {
	      $ObjectID		      16
	      Version		      "1.14.2"
	      Array {
		Type			"Cell"
		Dimension		9
		Cell			"IgnoreCustomStorageClasses"
		Cell			"InsertBlockDesc"
		Cell			"SFDataObjDesc"
		Cell			"SimulinkDataObjDesc"
		Cell			"DefineNamingRule"
		Cell			"SignalNamingRule"
		Cell			"ParamNamingRule"
		Cell			"InlinedPrmAccess"
		Cell			"CustomSymbolStr"
		PropName		"DisabledProps"
	      }
	      ForceParamTrailComments off
	      GenerateComments	      on
	      CommentStyle	      "Auto"
	      IgnoreCustomStorageClasses on
	      IgnoreTestpoints	      off
	      IncHierarchyInIds	      off
	      MaxIdLength	      31
	      PreserveName	      off
	      PreserveNameWithParent  off
	      ShowEliminatedStatement off
	      OperatorAnnotations     off
	      IncAutoGenComments      off
	      SimulinkDataObjDesc     off
	      SFDataObjDesc	      off
	      MATLABFcnDesc	      off
	      IncDataTypeInIds	      off
	      MangleLength	      1
	      CustomSymbolStrGlobalVar "$R$N$M"
	      CustomSymbolStrType     "$N$R$M_T"
	      CustomSymbolStrField    "$N$M"
	      CustomSymbolStrFcn      "$R$N$M$F"
	      CustomSymbolStrFcnArg   "rt$I$N$M"
	      CustomSymbolStrBlkIO    "rtb_$N$M"
	      CustomSymbolStrTmpVar   "$N$M"
	      CustomSymbolStrMacro    "$R$N$M"
	      CustomSymbolStrUtil     "$N$C"
	      DefineNamingRule	      "None"
	      ParamNamingRule	      "None"
	      SignalNamingRule	      "None"
	      InsertBlockDesc	      off
	      InsertPolySpaceComments off
	      SimulinkBlockComments   on
	      MATLABSourceComments    off
	      EnableCustomComments    off
	      InternalIdentifier      "Shortened"
	      InlinedPrmAccess	      "Literals"
	      ReqsInCode	      off
	      UseSimReservedNames     off
	    }
	    Simulink.GRTTargetCC {
	      $BackupClass	      "Simulink.TargetCC"
	      $ObjectID		      17
	      Version		      "1.14.2"
	      Array {
		Type			"Cell"
		Dimension		11
		Cell			"IncludeMdlTerminateFcn"
		Cell			"CombineOutputUpdateFcns"
		Cell			"SuppressErrorStatus"
		Cell			"ERTCustomFileBanners"
		Cell			"GenerateSampleERTMain"
		Cell			"SupportContinuousTime"
		Cell			"PurelyIntegerCode"
		Cell			"SupportNonInlinedSFcns"
		Cell			"SupportComplex"
		Cell			"SupportAbsoluteTime"
		Cell			"GenerateAllocFcn"
		PropName		"DisabledProps"
	      }
	      TargetFcnLib	      "ansi_tfl_tmw.mat"
	      TargetLibSuffix	      ""
	      TargetPreCompLibLocation ""
	      GenFloatMathFcnCalls    "NOT IN USE"
	      TargetLangStandard      "C89/C90 (ANSI)"
	      CodeReplacementLibrary  "None"
	      UtilityFuncGeneration   "Auto"
	      ERTMultiwordTypeDef     "System defined"
	      ERTMultiwordLength      256
	      MultiwordLength	      2048
	      GenerateFullHeader      on
	      GenerateSampleERTMain   off
	      GenerateTestInterfaces  off
	      ModelReferenceCompliant on
	      ParMdlRefBuildCompliant on
	      CompOptLevelCompliant   on
	      ConcurrentExecutionCompliant on
	      IncludeMdlTerminateFcn  on
	      GeneratePreprocessorConditionals "Disable all"
	      CombineOutputUpdateFcns off
	      CombineSignalStateStructs	off
	      SuppressErrorStatus     off
	      ERTFirstTimeCompliant   off
	      IncludeFileDelimiter    "Auto"
	      ERTCustomFileBanners    off
	      SupportAbsoluteTime     on
	      LogVarNameModifier      "rt_"
	      MatFileLogging	      on
	      MultiInstanceERTCode    off
	      CodeInterfacePackaging  "Nonreusable function"
	      SupportNonFinite	      on
	      SupportComplex	      on
	      PurelyIntegerCode	      off
	      SupportContinuousTime   on
	      SupportNonInlinedSFcns  on
	      SupportVariableSizeSignals off
	      EnableShiftOperators    on
	      ParenthesesLevel	      "Nominal"
	      MATLABClassNameForMDSCustomization "Simulink.SoftwareTarget.GRTCustomization"
	      ModelStepFunctionPrototypeControlCompliant off
	      CPPClassGenCompliant    on
	      AutosarCompliant	      off
	      GRTInterface	      on
	      GenerateAllocFcn	      off
	      UseMalloc		      off
	      ExtMode		      off
	      ExtModeStaticAlloc      off
	      ExtModeTesting	      off
	      ExtModeStaticAllocSize  1000000
	      ExtModeTransport	      0
	      ExtModeMexFile	      "ext_comm"
	      ExtModeIntrfLevel	      "Level1"
	      RTWCAPISignals	      off
	      RTWCAPIParams	      off
	      RTWCAPIStates	      off
	      RTWCAPIRootIO	      off
	      GenerateASAP2	      off
	      MultiInstanceErrorCode  "Error"
	    }
	    PropName		    "Components"
	  }
	}
	PropName		"Components"
      }
      Name		      "Configuration"
      CurrentDlgPage	      "Solver"
      ConfigPrmDlgPosition     [ 206, 89, 1075, 660 ] 
    }
    PropName		    "ConfigurationSets"
  }
  Simulink.ConfigSet {
    $PropName		    "ActiveConfigurationSet"
    $ObjectID		    7
  }
  Object {
    $PropName		    "DataTransfer"
    $ObjectID		    18
    $ClassName		    "Simulink.GlobalDataTransfer"
    DefaultTransitionBetweenSyncTasks "Ensure deterministic transfer (maximum delay)"
    DefaultTransitionBetweenAsyncTasks "Ensure data integrity only"
    DefaultTransitionBetweenContTasks "Ensure deterministic transfer (minimum delay)"
    DefaultExtrapolationMethodBetweenContTasks "None"
    AutoInsertRateTranBlk   [0]
  }
  ExplicitPartitioning	  off
  BlockDefaults {
    ForegroundColor	    "black"
    BackgroundColor	    "white"
    DropShadow		    off
    NamePlacement	    "normal"
    FontName		    "Helvetica"
    FontSize		    10
    FontWeight		    "normal"
    FontAngle		    "normal"
    ShowName		    on
    BlockRotation	    0
    BlockMirror		    off
  }
  AnnotationDefaults {
    HorizontalAlignment	    "center"
    VerticalAlignment	    "middle"
    ForegroundColor	    "black"
    BackgroundColor	    "white"
    DropShadow		    off
    FontName		    "Helvetica"
    FontSize		    10
    FontWeight		    "normal"
    FontAngle		    "normal"
    UseDisplayTextAsClickCallback off
  }
  LineDefaults {
    FontName		    "Helvetica"
    FontSize		    9
    FontWeight		    "normal"
    FontAngle		    "normal"
  }
  MaskDefaults {
    SelfModifiable	    "off"
    IconFrame		    "on"
    IconOpaque		    "on"
    RunInitForIconRedraw    "off"
    IconRotate		    "none"
    PortRotate		    "default"
    IconUnits		    "autoscale"
  }
  MaskParameterDefaults {
    Evaluate		    "on"
    Tunable		    "on"
    NeverSave		    "off"
    Internal		    "off"
    ReadOnly		    "off"
    Enabled		    "on"
    Visible		    "on"
    ToolTip		    "on"
  }
  BlockParameterDefaults {
    Block {
      BlockType		      Clock
      DisplayTime	      off
      Decimation	      "10"
    }
    Block {
      BlockType		      Constant
      Value		      "1"
      VectorParams1D	      on
      SamplingMode	      "Sample based"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit from 'Constant value'"
      LockScale		      off
      SampleTime	      "inf"
      FramePeriod	      "inf"
      PreserveConstantTs      off
    }
    Block {
      BlockType		      Demux
      Outputs		      "4"
      DisplayOption	      "none"
      BusSelectionMode	      off
    }
    Block {
      BlockType		      DiscretePulseGenerator
      PulseType		      "Sample based"
      TimeSource	      "Use simulation time"
      Amplitude		      "1"
      Period		      "2"
      PulseWidth	      "1"
      PhaseDelay	      "0"
      SampleTime	      "1"
      VectorParams1D	      on
    }
    Block {
      BlockType		      From
      GotoTag		      "A"
      IconDisplay	      "Tag"
      TagVisibility	      "local"
    }
    Block {
      BlockType		      Goto
      GotoTag		      "A"
      IconDisplay	      "Tag"
      TagVisibility	      "local"
    }
    Block {
      BlockType		      Inport
      Port		      "1"
      OutputFunctionCall      off
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: auto"
      LockScale		      off
      BusOutputAsStruct	      off
      PortDimensions	      "-1"
      VarSizeSig	      "Inherit"
      SampleTime	      "-1"
      SignalType	      "auto"
      SamplingMode	      "auto"
      LatchByDelayingOutsideSignal off
      LatchInputForFeedbackSignals off
      Interpolate	      on
    }
    Block {
      BlockType		      Memory
      X0		      "0"
      InheritSampleTime	      off
      LinearizeMemory	      off
      LinearizeAsDelay	      off
      StateMustResolveToSignalObject off
      RTWStateStorageClass    "Auto"
    }
    Block {
      BlockType		      MultiPortSwitch
      DataPortOrder	      "One-based contiguous"
      Inputs		      "3"
      DataPortIndices	      "{1,2,3}"
      DataPortForDefault      "Last data port"
      DiagnosticForDefault    "Error"
      zeroidx		      off
      InputSameDT	      on
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit via internal rule"
      LockScale		      off
      RndMeth		      "Floor"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
      AllowDiffInputSizes     off
    }
    Block {
      BlockType		      Mux
      Inputs		      "4"
      DisplayOption	      "none"
      UseBusObject	      off
      BusObject		      "BusObject"
      NonVirtualBus	      off
    }
    Block {
      BlockType		      Outport
      Port		      "1"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: auto"
      LockScale		      off
      BusOutputAsStruct	      off
      PortDimensions	      "-1"
      VarSizeSig	      "Inherit"
      SampleTime	      "-1"
      SignalType	      "auto"
      SamplingMode	      "auto"
      SourceOfInitialOutputValue "Dialog"
      OutputWhenDisabled      "held"
      InitialOutput	      "[]"
    }
    Block {
      BlockType		      RateTransition
      Integrity		      on
      Deterministic	      on
      X0		      "0"
      OutPortSampleTimeOpt    "Specify"
      OutPortSampleTimeMultiple	"1"
      OutPortSampleTime	      "-1"
    }
    Block {
      BlockType		      S-Function
      FunctionName	      "system"
      SFunctionModules	      "''"
      PortCounts	      "[]"
      SFunctionDeploymentMode off
    }
    Block {
      BlockType		      Selector
      NumberOfDimensions      "1"
      IndexMode		      "One-based"
      InputPortWidth	      "-1"
      SampleTime	      "-1"
      IndexOptions	      "Index vector (dialog)"
      Indices		      "1"
      OutputSizes	      "1"
    }
    Block {
      BlockType		      Step
      Time		      "1"
      Before		      "0"
      After		      "1"
      SampleTime	      "-1"
      VectorParams1D	      on
      ZeroCross		      on
    }
    Block {
      BlockType		      SubSystem
      ShowPortLabels	      "FromPortIcon"
      Permissions	      "ReadWrite"
      PermitHierarchicalResolution "All"
      TreatAsAtomicUnit	      off
      MinAlgLoopOccurrences   off
      PropExecContextOutsideSubsystem off
      CheckFcnCallInpInsideContextMsg off
      SystemSampleTime	      "-1"
      RTWSystemCode	      "Auto"
      RTWFcnNameOpts	      "Auto"
      RTWFileNameOpts	      "Auto"
      FunctionInterfaceSpec   "void_void"
      FunctionWithSeparateData off
      RTWMemSecFuncInitTerm   "Inherit from model"
      RTWMemSecFuncExecute    "Inherit from model"
      RTWMemSecDataConstants  "Inherit from model"
      RTWMemSecDataInternal   "Inherit from model"
      RTWMemSecDataParameters "Inherit from model"
      SimViewingDevice	      off
      DataTypeOverride	      "UseLocalSettings"
      DataTypeOverrideAppliesTo	"AllNumericTypes"
      MinMaxOverflowLogging   "UseLocalSettings"
      Opaque		      off
      MaskHideContents	      off
      SFBlockType	      "NONE"
      Variant		      off
      GeneratePreprocessorConditionals off
      ContentPreviewEnabled   off
    }
    Block {
      BlockType		      Switch
      Criteria		      "u2 >= Threshold"
      Threshold		      "0"
      InputSameDT	      on
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit via internal rule"
      LockScale		      off
      RndMeth		      "Floor"
      SaturateOnIntegerOverflow	on
      ZeroCross		      on
      SampleTime	      "-1"
      AllowDiffInputSizes     off
    }
    Block {
      BlockType		      Terminator
    }
    Block {
      BlockType		      ToWorkspace
      VariableName	      "simulink_output"
      MaxDataPoints	      "1000"
      Decimation	      "1"
      SaveFormat	      "Array"
      Save2DSignal	      "Inherit from input (this choice will be removed - see release notes)"
      FixptAsFi		      off
      NumInputs		      "1"
      SampleTime	      "0"
    }
  }
  System {
    Name		    "VAcModel"
    Location		    [-1688, -250, 8, 812]
    Open		    off
    ModelBrowserVisibility  off
    ModelBrowserWidth	    200
    ScreenColor		    "white"
    PaperOrientation	    "landscape"
    PaperPositionMode	    "auto"
    PaperType		    "usletter"
    PaperUnits		    "inches"
    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
    TiledPageScale	    1
    ShowPageBoundaries	    off
    ZoomFactor		    "100"
    ReportName		    "simulink-default.rpt"
    SIDHighWatermark	    "1526"
    Block {
      BlockType		      Clock
      Name		      "Clock"
      SID		      "2"
      Position		      [910, 380, 930, 400]
      ZOrder		      -2
    }
    Block {
      BlockType		      Constant
      Name		      "Constraints"
      SID		      "1508"
      Position		      [250, 667, 350, 693]
      ZOrder		      540
      Value		      "[1 1 1 1 1 1 1 1]"
    }
    Block {
      BlockType		      Constant
      Name		      "Disturbances"
      SID		      "3"
      Position		      [250, 127, 350, 153]
      ZOrder		      -3
      Value		      "[0 0 0 0 0 0 0]"
    }
    Block {
      BlockType		      Reference
      Name		      "Pause"
      SID		      "866"
      Ports		      []
      Position		      [909, 228, 994, 273]
      ZOrder		      538
      ForegroundColor	      "yellow"
      LibraryVersion	      "1.242"
      SourceBlock	      "VAlib/Pause"
      SourceType	      "Pause"
      ContentPreviewEnabled   off
      Value		      "-1"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace"
      SID		      "207"
      Ports		      [1]
      Position		      [775, 160, 835, 190]
      ZOrder		      -8
      ShowName		      off
      VariableName	      "simout"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace1"
      SID		      "208"
      Ports		      [1]
      Position		      [775, 255, 835, 285]
      ZOrder		      -9
      ShowName		      off
      VariableName	      "xmv"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace2"
      SID		      "209"
      Ports		      [1]
      Position		      [775, 350, 835, 380]
      ZOrder		      -10
      ShowName		      off
      VariableName	      "idv"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace3"
      SID		      "210"
      Ports		      [1]
      Position		      [980, 375, 1040, 405]
      ZOrder		      -11
      ShowName		      off
      VariableName	      "tout"
      MaxDataPoints	      "inf"
      Save2DSignal	      "2-D array (concatenate along first dimension)"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace4"
      SID		      "1421"
      Ports		      [1]
      Position		      [775, 635, 835, 665]
      ZOrder		      539
      ShowName		      off
      VariableName	      "states"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace5"
      SID		      "684"
      Ports		      [1]
      Position		      [775, 445, 835, 475]
      ZOrder		      2
      ShowName		      off
      VariableName	      "atkxmv"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace6"
      SID		      "708"
      Ports		      [1]
      Position		      [775, 540, 835, 570]
      ZOrder		      3
      ShowName		      off
      VariableName	      "atksimout"
      MaxDataPoints	      "inf"
      SampleTime	      "Ts_save"
    }
    Block {
      BlockType		      SubSystem
      Name		      "VA Plant"
      SID		      "31"
      Ports		      [28, 6]
      Position		      [530, 126, 740, 694]
      ZOrder		      -7
      RequestExecContextInheritance off
      System {
	Name			"VA Plant"
	Location		[-1688, -250, 8, 812]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"125"
	Block {
	  BlockType		  Inport
	  Name			  "Disturbances"
	  SID			  "44"
	  Position		  [950, 403, 980, 417]
	  ZOrder		  -13
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "O2 Composition Setpoint"
	  SID			  "709"
	  Position		  [490, 740, 530, 760]
	  ZOrder		  503
	  Port			  "2"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Recycle Pressure Setpoint"
	  SID			  "714"
	  Position		  [770, 740, 810, 760]
	  ZOrder		  508
	  Port			  "3"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "HAc Tank Level Setpoint"
	  SID			  "718"
	  Position		  [1055, 740, 1095, 760]
	  ZOrder		  512
	  Port			  "4"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Vaporizer Level Setpoint"
	  SID			  "725"
	  Position		  [1330, 740, 1370, 760]
	  ZOrder		  517
	  Port			  "5"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Vaporizer Pressure Setpoint"
	  SID			  "729"
	  Position		  [490, 840, 530, 860]
	  ZOrder		  521
	  Port			  "6"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Heater Exit Temp. Setpoint"
	  SID			  "735"
	  Position		  [770, 840, 810, 860]
	  ZOrder		  525
	  Port			  "7"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Reactor Exit Temp. Setpoint"
	  SID			  "740"
	  Position		  [1055, 840, 1095, 860]
	  ZOrder		  529
	  Port			  "8"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Separator Level Setpoint"
	  SID			  "745"
	  Position		  [1330, 840, 1370, 860]
	  ZOrder		  533
	  Port			  "9"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Separator Temp. Setpoint"
	  SID			  "750"
	  Position		  [495, 935, 535, 955]
	  ZOrder		  537
	  Port			  "10"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Separator Vapor Flowrate Setpoint"
	  SID			  "756"
	  Position		  [775, 940, 815, 960]
	  ZOrder		  542
	  Port			  "11"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Compressor Exit Temp. Setpoint"
	  SID			  "759"
	  Position		  [1055, 935, 1095, 955]
	  ZOrder		  544
	  Port			  "12"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Absorber Level Setpoint"
	  SID			  "764"
	  Position		  [1335, 935, 1375, 955]
	  ZOrder		  548
	  Port			  "13"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Absorber Scrub Flowrate Setpoint"
	  SID			  "772"
	  Position		  [495, 1040, 535, 1060]
	  ZOrder		  553
	  Port			  "14"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Circulation Stream Temp. Setpoint"
	  SID			  "778"
	  Position		  [775, 1040, 815, 1060]
	  ZOrder		  554
	  Port			  "15"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Absorber Circulation Flowrate Setpoint"
	  SID			  "784"
	  Position		  [1055, 1040, 1095, 1060]
	  ZOrder		  559
	  Port			  "16"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Scrub Stream Temp. Setpoint"
	  SID			  "786"
	  Position		  [1335, 1040, 1375, 1060]
	  ZOrder		  560
	  Port			  "17"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "CO2 Composition Setpoint"
	  SID			  "792"
	  Position		  [495, 1140, 535, 1160]
	  ZOrder		  565
	  Port			  "18"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "C2H6 Composition Setpoint"
	  SID			  "798"
	  Position		  [775, 1140, 815, 1160]
	  ZOrder		  570
	  Port			  "19"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "FEHE Hot Exit Temp. Setpoint"
	  SID			  "804"
	  Position		  [1055, 1140, 1095, 1160]
	  ZOrder		  575
	  Port			  "20"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "H2O in the Column Bottom Setpoint"
	  SID			  "812"
	  Position		  [1335, 1140, 1375, 1160]
	  ZOrder		  580
	  Port			  "21"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "5th Tray Temp. Setpoint"
	  SID			  "818"
	  Position		  [495, 1235, 535, 1255]
	  ZOrder		  585
	  Port			  "22"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Decanter Temp. Setpoint"
	  SID			  "824"
	  Position		  [770, 1235, 810, 1255]
	  ZOrder		  590
	  Port			  "23"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Decanter Organic Level Setpoint"
	  SID			  "830"
	  Position		  [1055, 1235, 1095, 1255]
	  ZOrder		  595
	  Port			  "24"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Decanter Aqueous Level Setpoint"
	  SID			  "836"
	  Position		  [1335, 1235, 1375, 1255]
	  ZOrder		  600
	  Port			  "25"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Column Bottom Level Setpoint"
	  SID			  "842"
	  Position		  [495, 1330, 535, 1350]
	  ZOrder		  605
	  Port			  "26"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Liquid Recycle Flowrate Setpoint"
	  SID			  "848"
	  Position		  [770, 1330, 810, 1350]
	  ZOrder		  610
	  Port			  "27"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Constraints"
	  SID			  "1507"
	  Position		  [950, 368, 980, 382]
	  ZOrder		  822
	  Port			  "28"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Absorber Circulation Flow"
	  SID			  "1486"
	  Ports			  [2, 1]
	  Position		  [580, 998, 675, 1067]
	  ZOrder		  801
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "2 (Fixed)"
	  mode			  "1 (automatic)"
	  gain			  "0"
	  reset			  "0"
	  csampling		  "controller_sampling_frequency(13)"
	  lowmeas		  "0"
	  highmeas		  "100"
	  lowmv			  "0"
	  highmv		  "50"
	  deadtime		  "transmitter_deadtime(13)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(13)"
	  x0mv			  "MVs(13)"
	  x0xs			  "y_ss(13)"
	  x0sp			  "str2num(get_param([gcr '/xmv13'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Absorber Liquid Exit"
	  SID			  "1483"
	  Ports			  [2, 1]
	  Position		  [1410, 893, 1505, 962]
	  ZOrder		  798
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "-5"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(12)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "4.536"
	  deadtime		  "transmitter_deadtime(12)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(12)"
	  x0mv			  "MVs(12)"
	  x0xs			  "y_ss(13)"
	  x0sp			  "str2num(get_param([gcr '/xmv12'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Absorber Scrub Flow"
	  SID			  "1490"
	  Ports			  [2, 1]
	  Position		  [1135, 998, 1230, 1067]
	  ZOrder		  806
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "2 (Fixed)"
	  mode			  "1 (automatic)"
	  gain			  "0"
	  reset			  "0"
	  csampling		  "controller_sampling_frequency(15)"
	  lowmeas		  "0"
	  highmeas		  "100"
	  lowmv			  "0"
	  highmv		  "7.560"
	  deadtime		  "transmitter_deadtime(15)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(15)"
	  x0mv			  "MVs(15)"
	  x0xs			  "y_ss(15)"
	  x0sp			  "str2num(get_param([gcr '/xmv15'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "CO2 Removal Inlet"
	  SID			  "1494"
	  Ports			  [2, 1]
	  Position		  [580, 1098, 675, 1167]
	  ZOrder		  809
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(17)"
	  lowmeas		  "0"
	  highmeas		  "0.5"
	  lowmv			  "0"
	  highmv		  "22.68"
	  deadtime		  "transmitter_deadtime(17)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(17)"
	  x0mv			  "MVs(17)"
	  x0xs			  "y_ss(31)"
	  x0sp			  "str2num(get_param([gcr '/xmv17'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Circulation Cooler Duty"
	  SID			  "1488"
	  Ports			  [2, 1]
	  Position		  [860, 998, 955, 1067]
	  ZOrder		  803
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "5"
	  csampling		  "controller_sampling_frequency(14)"
	  lowmeas		  "10"
	  highmeas		  "40"
	  lowmv			  "0"
	  highmv		  "30000"
	  deadtime		  "transmitter_deadtime(14)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(14)"
	  x0mv			  "MVs(14)"
	  x0xs			  "y_ss(14)"
	  x0sp			  "str2num(get_param([gcr '/xmv14'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Column Aqueous Exit"
	  SID			  "1501"
	  Ports			  [2, 1]
	  Position		  [1410, 1193, 1505, 1262]
	  ZOrder		  816
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(24)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "2.4"
	  deadtime		  "transmitter_deadtime(24)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(24)"
	  x0mv			  "MVs(24)"
	  x0xs			  "y_ss(19)"
	  x0sp			  "str2num(get_param([gcr '/xmv24'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Column Bottom Exit"
	  SID			  "1502"
	  Ports			  [2, 1]
	  Position		  [580, 1288, 675, 1357]
	  ZOrder		  817
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(25)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "4.536"
	  deadtime		  "transmitter_deadtime(25)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(25)"
	  x0mv			  "MVs(25)"
	  x0xs			  "y_ss(21)"
	  x0sp			  "str2num(get_param([gcr '/xmv25'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Column Condenser Duty"
	  SID			  "1499"
	  Ports			  [2, 1]
	  Position		  [860, 1193, 955, 1262]
	  ZOrder		  814
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "5"
	  csampling		  "controller_sampling_frequency(22)"
	  lowmeas		  "40"
	  highmeas		  "50"
	  lowmv			  "0"
	  highmv		  "150000"
	  deadtime		  "transmitter_deadtime(22)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(22)"
	  x0mv			  "MVs(22)"
	  x0xs			  "y_ss(20)"
	  x0sp			  "str2num(get_param([gcr '/xmv22'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Column Organic Exit"
	  SID			  "1500"
	  Ports			  [2, 1]
	  Position		  [1135, 1193, 1230, 1262]
	  ZOrder		  815
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(23)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "2.4"
	  deadtime		  "transmitter_deadtime(23)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(23)"
	  x0mv			  "MVs(23)"
	  x0xs			  "y_ss(18)"
	  x0sp			  "str2num(get_param([gcr '/xmv23'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Column Reboiler Duty"
	  SID			  "1498"
	  Ports			  [2, 1]
	  Position		  [580, 1193, 675, 1262]
	  ZOrder		  813
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "20"
	  reset			  "30"
	  csampling		  "controller_sampling_frequency(21)"
	  lowmeas		  "0"
	  highmeas		  "120"
	  lowmv			  "0"
	  highmv		  "100000"
	  deadtime		  "transmitter_deadtime(21)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(21)"
	  x0mv			  "MVs(21)"
	  x0xs			  "y_ss(22)"
	  x0sp			  "str2num(get_param([gcr '/xmv21'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Column Reflux"
	  SID			  "1497"
	  Ports			  [2, 1]
	  Position		  [1410, 1098, 1505, 1167]
	  ZOrder		  812
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-0.5"
	  reset			  "60"
	  csampling		  "controller_sampling_frequency(20)"
	  lowmeas		  "0"
	  highmeas		  "0.2"
	  lowmv			  "0"
	  highmv		  "7.56"
	  deadtime		  "transmitter_deadtime(20)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(20)"
	  x0mv			  "MVs(20)"
	  x0xs			  "y_ss(28)"
	  x0sp			  "str2num(get_param([gcr '/xmv20'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Compressor Heater Duty"
	  SID			  "1482"
	  Ports			  [2, 1]
	  Position		  [1135, 893, 1230, 962]
	  ZOrder		  797
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "5"
	  csampling		  "controller_sampling_frequency(11)"
	  lowmeas		  "70"
	  highmeas		  "90"
	  lowmv			  "0"
	  highmv		  "50000"
	  deadtime		  "transmitter_deadtime(11)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(11)"
	  x0mv			  "MVs(11)"
	  x0xs			  "y_ss(11)"
	  x0sp			  "str2num(get_param([gcr '/xmv11'], 'Value'))"
	}
	Block {
	  BlockType		  Demux
	  Name			  "Demux"
	  SID			  "67"
	  Ports			  [1, 22]
	  Position		  [1430, 15, 1445, 655]
	  ZOrder		  -18
	  BackgroundColor	  "black"
	  ShowName		  off
	  Outputs		  "22"
	}
	Block {
	  BlockType		  Reference
	  Name			  "FEHE Bypass Ratio"
	  SID			  "1496"
	  Ports			  [2, 1]
	  Position		  [1135, 1098, 1230, 1167]
	  ZOrder		  811
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "5"
	  reset			  "10"
	  csampling		  "controller_sampling_frequency(19)"
	  lowmeas		  "0"
	  highmeas		  "200"
	  lowmv			  "0"
	  highmv		  "1"
	  deadtime		  "transmitter_deadtime(19)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(19)"
	  x0mv			  "MVs(19)"
	  x0xs			  "y_ss(8)"
	  x0sp			  "str2num(get_param([gcr '/xmv19'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Fresh C2H4 Feed"
	  SID			  "1423"
	  Ports			  [2, 1]
	  Position		  [860, 698, 955, 767]
	  ZOrder		  778
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "0.3"
	  reset			  "20"
	  csampling		  "controller_sampling_frequency(2)"
	  lowmeas		  "0"
	  highmeas		  "200"
	  lowmv			  "0"
	  highmv		  "7.56"
	  deadtime		  "transmitter_deadtime(2)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(2)"
	  x0mv			  "MVs(2)"
	  x0xs			  "y_ss(12)"
	  x0sp			  "str2num(get_param([gcr '/xmv2'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Fresh HAc Feed"
	  SID			  "1424"
	  Ports			  [2, 1]
	  Position		  [1135, 698, 1230, 767]
	  ZOrder		  779
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "2"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(3)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "4.536"
	  deadtime		  "transmitter_deadtime(3)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(3)"
	  x0mv			  "MVs(3)"
	  x0xs			  "y_ss(23)"
	  x0sp			  "str2num(get_param([gcr '/xmv3'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Fresh O2 Feed"
	  SID			  "1422"
	  Ports			  [2, 1]
	  Position		  [580, 698, 675, 767]
	  ZOrder		  777
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "5"
	  reset			  "10"
	  csampling		  "controller_sampling_frequency(1)"
	  lowmeas		  "0"
	  highmeas		  "0.2"
	  lowmv			  "0"
	  highmv		  "2.268"
	  deadtime		  "transmitter_deadtime(1)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(1)"
	  x0mv			  "MVs(1)"
	  x0xs			  "y_ss(37)"
	  x0sp			  "str2num(get_param([gcr '/xmv1'], 'Value'))"
	}
	Block {
	  BlockType		  From
	  Name			  "From"
	  SID			  "91"
	  Position		  [650, 64, 705, 86]
	  ZOrder		  -23
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv1"
	}
	Block {
	  BlockType		  From
	  Name			  "From1"
	  SID			  "92"
	  Position		  [745, 84, 800, 106]
	  ZOrder		  -24
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv2"
	}
	Block {
	  BlockType		  From
	  Name			  "From10"
	  SID			  "768"
	  Position		  [745, 285, 800, 305]
	  ZOrder		  552
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv12"
	}
	Block {
	  BlockType		  From
	  Name			  "From11"
	  SID			  "782"
	  Position		  [745, 325, 800, 345]
	  ZOrder		  558
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv14"
	}
	Block {
	  BlockType		  From
	  Name			  "From12"
	  SID			  "790"
	  Position		  [745, 365, 800, 385]
	  ZOrder		  564
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv16"
	}
	Block {
	  BlockType		  From
	  Name			  "From13"
	  SID			  "796"
	  Position		  [650, 385, 705, 405]
	  ZOrder		  569
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv17"
	}
	Block {
	  BlockType		  From
	  Name			  "From14"
	  SID			  "802"
	  Position		  [745, 405, 800, 425]
	  ZOrder		  574
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv18"
	}
	Block {
	  BlockType		  From
	  Name			  "From15"
	  SID			  "808"
	  Position		  [650, 425, 705, 445]
	  ZOrder		  579
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv19"
	}
	Block {
	  BlockType		  From
	  Name			  "From16"
	  SID			  "816"
	  Position		  [745, 445, 800, 465]
	  ZOrder		  584
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv20"
	}
	Block {
	  BlockType		  From
	  Name			  "From17"
	  SID			  "822"
	  Position		  [650, 465, 705, 485]
	  ZOrder		  589
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv21"
	}
	Block {
	  BlockType		  From
	  Name			  "From18"
	  SID			  "828"
	  Position		  [745, 485, 800, 505]
	  ZOrder		  594
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv22"
	}
	Block {
	  BlockType		  From
	  Name			  "From19"
	  SID			  "834"
	  Position		  [650, 505, 705, 525]
	  ZOrder		  599
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv23"
	}
	Block {
	  BlockType		  From
	  Name			  "From2"
	  SID			  "103"
	  Position		  [650, 104, 705, 126]
	  ZOrder		  -35
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv3"
	}
	Block {
	  BlockType		  From
	  Name			  "From20"
	  SID			  "840"
	  Position		  [745, 525, 800, 545]
	  ZOrder		  604
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv24"
	}
	Block {
	  BlockType		  From
	  Name			  "From21"
	  SID			  "846"
	  Position		  [650, 545, 705, 565]
	  ZOrder		  609
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv25"
	}
	Block {
	  BlockType		  From
	  Name			  "From22"
	  SID			  "1091"
	  Position		  [490, 702, 550, 728]
	  ZOrder		  727
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas37"
	}
	Block {
	  BlockType		  From
	  Name			  "From23"
	  SID			  "1154"
	  Position		  [770, 702, 830, 728]
	  ZOrder		  735
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas12"
	}
	Block {
	  BlockType		  From
	  Name			  "From24"
	  SID			  "1158"
	  Position		  [1055, 702, 1115, 728]
	  ZOrder		  737
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas23"
	}
	Block {
	  BlockType		  From
	  Name			  "From25"
	  SID			  "1170"
	  Position		  [1330, 702, 1390, 728]
	  ZOrder		  739
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas2"
	}
	Block {
	  BlockType		  From
	  Name			  "From26"
	  SID			  "1111"
	  Position		  [490, 802, 550, 828]
	  ZOrder		  730
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas1"
	}
	Block {
	  BlockType		  From
	  Name			  "From27"
	  SID			  "1182"
	  Position		  [770, 802, 830, 828]
	  ZOrder		  741
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas4"
	}
	Block {
	  BlockType		  From
	  Name			  "From28"
	  SID			  "1194"
	  Position		  [1055, 802, 1115, 828]
	  ZOrder		  743
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas5"
	}
	Block {
	  BlockType		  From
	  Name			  "From29"
	  SID			  "1206"
	  Position		  [1330, 802, 1390, 828]
	  ZOrder		  745
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas9"
	}
	Block {
	  BlockType		  From
	  Name			  "From3"
	  SID			  "114"
	  Position		  [745, 125, 800, 145]
	  ZOrder		  -46
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv4"
	}
	Block {
	  BlockType		  From
	  Name			  "From30"
	  SID			  "1218"
	  Position		  [495, 897, 555, 923]
	  ZOrder		  747
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas10"
	}
	Block {
	  BlockType		  From
	  Name			  "From31"
	  SID			  "1238"
	  Position		  [1055, 897, 1115, 923]
	  ZOrder		  749
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas11"
	}
	Block {
	  BlockType		  From
	  Name			  "From32"
	  SID			  "1142"
	  Position		  [1335, 897, 1395, 923]
	  ZOrder		  733
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas13"
	}
	Block {
	  BlockType		  From
	  Name			  "From33"
	  SID			  "1268"
	  Position		  [775, 1002, 835, 1028]
	  ZOrder		  754
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas14"
	}
	Block {
	  BlockType		  From
	  Name			  "From34"
	  SID			  "1272"
	  Position		  [1335, 1002, 1395, 1028]
	  ZOrder		  756
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas15"
	}
	Block {
	  BlockType		  From
	  Name			  "From35"
	  SID			  "1292"
	  Position		  [495, 1102, 555, 1128]
	  ZOrder		  758
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas31"
	}
	Block {
	  BlockType		  From
	  Name			  "From36"
	  SID			  "1304"
	  Position		  [775, 1102, 835, 1128]
	  ZOrder		  760
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas33"
	}
	Block {
	  BlockType		  From
	  Name			  "From37"
	  SID			  "1316"
	  Position		  [1055, 1102, 1115, 1128]
	  ZOrder		  762
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas8"
	}
	Block {
	  BlockType		  From
	  Name			  "From38"
	  SID			  "1320"
	  Position		  [1335, 1102, 1395, 1128]
	  ZOrder		  764
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas28"
	}
	Block {
	  BlockType		  From
	  Name			  "From39"
	  SID			  "1340"
	  Position		  [495, 1197, 555, 1223]
	  ZOrder		  766
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas22"
	}
	Block {
	  BlockType		  From
	  Name			  "From4"
	  SID			  "724"
	  Position		  [650, 145, 705, 165]
	  ZOrder		  516
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv5"
	}
	Block {
	  BlockType		  From
	  Name			  "From40"
	  SID			  "1352"
	  Position		  [775, 1197, 835, 1223]
	  ZOrder		  768
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas20"
	}
	Block {
	  BlockType		  From
	  Name			  "From41"
	  SID			  "1364"
	  Position		  [1055, 1197, 1115, 1223]
	  ZOrder		  770
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas18"
	}
	Block {
	  BlockType		  From
	  Name			  "From42"
	  SID			  "1376"
	  Position		  [1335, 1197, 1395, 1223]
	  ZOrder		  772
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas19"
	}
	Block {
	  BlockType		  From
	  Name			  "From43"
	  SID			  "1388"
	  Position		  [495, 1292, 555, 1318]
	  ZOrder		  774
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmeas21"
	}
	Block {
	  BlockType		  From
	  Name			  "From44"
	  SID			  "1481"
	  Position		  [745, 245, 800, 265]
	  ZOrder		  796
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv10"
	}
	Block {
	  BlockType		  From
	  Name			  "From45"
	  SID			  "1487"
	  Position		  [650, 305, 705, 325]
	  ZOrder		  802
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv13"
	}
	Block {
	  BlockType		  From
	  Name			  "From46"
	  SID			  "1492"
	  Position		  [650, 345, 705, 365]
	  ZOrder		  807
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv15"
	}
	Block {
	  BlockType		  From
	  Name			  "From47"
	  SID			  "1506"
	  Position		  [745, 565, 800, 585]
	  ZOrder		  821
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv26"
	}
	Block {
	  BlockType		  From
	  Name			  "From5"
	  SID			  "123"
	  Position		  [745, 163, 800, 187]
	  ZOrder		  -55
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv6"
	}
	Block {
	  BlockType		  From
	  Name			  "From6"
	  SID			  "124"
	  Position		  [650, 185, 705, 205]
	  ZOrder		  -56
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv7"
	}
	Block {
	  BlockType		  From
	  Name			  "From7"
	  SID			  "125"
	  Position		  [745, 205, 800, 225]
	  ZOrder		  -57
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv8"
	}
	Block {
	  BlockType		  From
	  Name			  "From8"
	  SID			  "754"
	  Position		  [650, 225, 705, 245]
	  ZOrder		  541
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv9"
	}
	Block {
	  BlockType		  From
	  Name			  "From9"
	  SID			  "757"
	  Position		  [650, 265, 705, 285]
	  ZOrder		  543
	  ShowName		  off
	  CloseFcn		  "tagdialog Close"
	  GotoTag		  "xmv11"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto1"
	  SID			  "716"
	  Position		  [975, 720, 1025, 750]
	  ZOrder		  509
	  ShowName		  off
	  GotoTag		  "xmv2"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto10"
	  SID			  "766"
	  Position		  [1530, 915, 1580, 945]
	  ZOrder		  549
	  ShowName		  off
	  GotoTag		  "xmv12"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto11"
	  SID			  "780"
	  Position		  [975, 1020, 1025, 1050]
	  ZOrder		  555
	  ShowName		  off
	  GotoTag		  "xmv14"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto12"
	  SID			  "788"
	  Position		  [1530, 1020, 1580, 1050]
	  ZOrder		  561
	  ShowName		  off
	  GotoTag		  "xmv16"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto13"
	  SID			  "794"
	  Position		  [690, 1120, 740, 1150]
	  ZOrder		  566
	  ShowName		  off
	  GotoTag		  "xmv17"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto14"
	  SID			  "800"
	  Position		  [975, 1120, 1025, 1150]
	  ZOrder		  571
	  ShowName		  off
	  GotoTag		  "xmv18"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto15"
	  SID			  "806"
	  Position		  [1250, 1120, 1300, 1150]
	  ZOrder		  576
	  ShowName		  off
	  GotoTag		  "xmv19"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto16"
	  SID			  "814"
	  Position		  [1530, 1120, 1580, 1150]
	  ZOrder		  581
	  ShowName		  off
	  GotoTag		  "xmv20"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto17"
	  SID			  "820"
	  Position		  [690, 1215, 740, 1245]
	  ZOrder		  586
	  ShowName		  off
	  GotoTag		  "xmv21"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto18"
	  SID			  "825"
	  Position		  [975, 1215, 1025, 1245]
	  ZOrder		  591
	  ShowName		  off
	  GotoTag		  "xmv22"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto19"
	  SID			  "832"
	  Position		  [1250, 1215, 1300, 1245]
	  ZOrder		  596
	  ShowName		  off
	  GotoTag		  "xmv23"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto2"
	  SID			  "720"
	  Position		  [1255, 720, 1305, 750]
	  ZOrder		  513
	  ShowName		  off
	  GotoTag		  "xmv3"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto20"
	  SID			  "710"
	  Position		  [695, 720, 745, 750]
	  ZOrder		  683
	  ShowName		  off
	  GotoTag		  "xmv1"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto21"
	  SID			  "837"
	  Position		  [1530, 1215, 1580, 1245]
	  ZOrder		  601
	  ShowName		  off
	  GotoTag		  "xmv24"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto22"
	  SID			  "141"
	  Position		  [1480, 653, 1560, 677]
	  ZOrder		  -73
	  ShowName		  off
	  GotoTag		  "xmeas37"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto23"
	  SID			  "886"
	  Position		  [1480, 243, 1560, 267]
	  ZOrder		  620
	  ShowName		  off
	  GotoTag		  "xmeas12"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto24"
	  SID			  "895"
	  Position		  [1480, 518, 1560, 542]
	  ZOrder		  623
	  ShowName		  off
	  GotoTag		  "xmeas23"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto25"
	  SID			  "900"
	  Position		  [1480, 33, 1560, 57]
	  ZOrder		  626
	  ShowName		  off
	  GotoTag		  "xmeas2"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto26"
	  SID			  "912"
	  Position		  [1480, 3, 1560, 27]
	  ZOrder		  629
	  ShowName		  off
	  GotoTag		  "xmeas1"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto27"
	  SID			  "921"
	  Position		  [1480, 63, 1560, 87]
	  ZOrder		  633
	  ShowName		  off
	  GotoTag		  "xmeas4"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto28"
	  SID			  "929"
	  Position		  [1480, 93, 1560, 117]
	  ZOrder		  636
	  ShowName		  off
	  GotoTag		  "xmeas5"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto29"
	  SID			  "936"
	  Position		  [1480, 153, 1560, 177]
	  ZOrder		  638
	  ShowName		  off
	  GotoTag		  "xmeas9"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto3"
	  SID			  "727"
	  Position		  [1530, 720, 1580, 750]
	  ZOrder		  518
	  ShowName		  off
	  GotoTag		  "xmv4"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto30"
	  SID			  "944"
	  Position		  [1480, 183, 1560, 207]
	  ZOrder		  641
	  ShowName		  off
	  GotoTag		  "xmeas10"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto31"
	  SID			  "954"
	  Position		  [1480, 213, 1560, 237]
	  ZOrder		  645
	  ShowName		  off
	  GotoTag		  "xmeas11"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto32"
	  SID			  "961"
	  Position		  [1480, 273, 1560, 297]
	  ZOrder		  647
	  ShowName		  off
	  GotoTag		  "xmeas13"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto33"
	  SID			  "973"
	  Position		  [1480, 303, 1560, 327]
	  ZOrder		  651
	  ShowName		  off
	  GotoTag		  "xmeas14"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto34"
	  SID			  "981"
	  Position		  [1480, 333, 1560, 357]
	  ZOrder		  654
	  ShowName		  off
	  GotoTag		  "xmeas15"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto35"
	  SID			  "989"
	  Position		  [1480, 588, 1560, 612]
	  ZOrder		  657
	  ShowName		  off
	  GotoTag		  "xmeas31"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto36"
	  SID			  "997"
	  Position		  [1480, 618, 1560, 642]
	  ZOrder		  660
	  ShowName		  off
	  GotoTag		  "xmeas33"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto37"
	  SID			  "1004"
	  Position		  [1480, 123, 1560, 147]
	  ZOrder		  662
	  ShowName		  off
	  GotoTag		  "xmeas8"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto38"
	  SID			  "844"
	  Position		  [690, 1310, 740, 1340]
	  ZOrder		  606
	  ShowName		  off
	  GotoTag		  "xmv25"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto39"
	  SID			  "1012"
	  Position		  [1480, 553, 1560, 577]
	  ZOrder		  665
	  ShowName		  off
	  GotoTag		  "xmeas28"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto4"
	  SID			  "731"
	  Position		  [695, 820, 745, 850]
	  ZOrder		  522
	  ShowName		  off
	  GotoTag		  "xmv5"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto40"
	  SID			  "1020"
	  Position		  [1480, 483, 1560, 507]
	  ZOrder		  668
	  ShowName		  off
	  GotoTag		  "xmeas22"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto41"
	  SID			  "1028"
	  Position		  [1480, 423, 1560, 447]
	  ZOrder		  671
	  ShowName		  off
	  GotoTag		  "xmeas20"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto42"
	  SID			  "1036"
	  Position		  [1480, 363, 1560, 387]
	  ZOrder		  674
	  ShowName		  off
	  GotoTag		  "xmeas18"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto43"
	  SID			  "1044"
	  Position		  [1480, 393, 1560, 417]
	  ZOrder		  677
	  ShowName		  off
	  GotoTag		  "xmeas19"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto44"
	  SID			  "1052"
	  Position		  [1480, 453, 1560, 477]
	  ZOrder		  680
	  ShowName		  off
	  GotoTag		  "xmeas21"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto45"
	  SID			  "1479"
	  Position		  [975, 920, 1025, 950]
	  ZOrder		  793
	  ShowName		  off
	  GotoTag		  "xmv10"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto46"
	  SID			  "1485"
	  Position		  [695, 1020, 745, 1050]
	  ZOrder		  800
	  ShowName		  off
	  GotoTag		  "xmv13"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto47"
	  SID			  "1491"
	  Position		  [1250, 1020, 1300, 1050]
	  ZOrder		  805
	  ShowName		  off
	  GotoTag		  "xmv15"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto48"
	  SID			  "1504"
	  Position		  [975, 1310, 1025, 1340]
	  ZOrder		  819
	  ShowName		  off
	  GotoTag		  "xmv26"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto5"
	  SID			  "737"
	  Position		  [975, 820, 1025, 850]
	  ZOrder		  526
	  ShowName		  off
	  GotoTag		  "xmv6"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto6"
	  SID			  "741"
	  Position		  [1255, 820, 1305, 850]
	  ZOrder		  530
	  ShowName		  off
	  GotoTag		  "xmv7"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto7"
	  SID			  "746"
	  Position		  [1530, 820, 1580, 850]
	  ZOrder		  534
	  ShowName		  off
	  GotoTag		  "xmv8"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto8"
	  SID			  "751"
	  Position		  [695, 915, 745, 945]
	  ZOrder		  538
	  ShowName		  off
	  GotoTag		  "xmv9"
	}
	Block {
	  BlockType		  Goto
	  Name			  "Goto9"
	  SID			  "760"
	  Position		  [1255, 915, 1305, 945]
	  ZOrder		  545
	  ShowName		  off
	  GotoTag		  "xmv11"
	}
	Block {
	  BlockType		  Mux
	  Name			  "Mux1"
	  SID			  "166"
	  Ports			  [26, 1]
	  Position		  [870, 33, 885, 617]
	  ZOrder		  -98
	  ShowName		  off
	  Inputs		  "26"
	  DisplayOption		  "bar"
	}
	Block {
	  BlockType		  Mux
	  Name			  "Mux2"
	  SID			  "1525"
	  Ports			  [2, 1]
	  Position		  [1065, 346, 1070, 384]
	  ZOrder		  835
	  ShowName		  off
	  Inputs		  "2"
	  DisplayOption		  "bar"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Purge"
	  SID			  "1495"
	  Ports			  [2, 1]
	  Position		  [860, 1098, 955, 1167]
	  ZOrder		  810
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(18)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "0.02268"
	  deadtime		  "transmitter_deadtime(18)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(18)"
	  x0mv			  "MVs(18)"
	  x0xs			  "y_ss(33)"
	  x0sp			  "str2num(get_param([gcr '/xmv18'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Reactor Shell Temp."
	  SID			  "1474"
	  Ports			  [2, 1]
	  Position		  [1135, 798, 1230, 867]
	  ZOrder		  789
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "3"
	  reset			  "10"
	  csampling		  "controller_sampling_frequency(7)"
	  lowmeas		  "0"
	  highmeas		  "200"
	  lowmv			  "110"
	  highmv		  "150"
	  deadtime		  "transmitter_deadtime(7)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(7)"
	  x0mv			  "MVs(7)"
	  x0xs			  "y_ss(5)"
	  x0sp			  "str2num(get_param([gcr '/xmv7'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Scrub Cooler Duty"
	  SID			  "1493"
	  Ports			  [2, 1]
	  Position		  [1410, 998, 1505, 1067]
	  ZOrder		  808
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-1"
	  reset			  "5"
	  csampling		  "controller_sampling_frequency(16)"
	  lowmeas		  "10"
	  highmeas		  "40"
	  lowmv			  "0"
	  highmv		  "5000"
	  deadtime		  "transmitter_deadtime(16)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(16)"
	  x0mv			  "MVs(16)"
	  x0xs			  "y_ss(15)"
	  x0sp			  "str2num(get_param([gcr '/xmv16'], 'Value'))"
	}
	Block {
	  BlockType		  Selector
	  Name			  "Selector"
	  SID			  "183"
	  Ports			  [1, 1]
	  Position		  [1360, 316, 1400, 354]
	  ZOrder		  -109
	  InputPortWidth	  "43"
	  Indices		  "[1,2,4,5,8,9,10,11,12,13,14,15,18,19,20,21,22,23,28,31,33,37]"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Separator Jacket Temp."
	  SID			  "1476"
	  Ports			  [2, 1]
	  Position		  [580, 893, 675, 962]
	  ZOrder		  791
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-5"
	  reset			  "20"
	  csampling		  "controller_sampling_frequency(9)"
	  lowmeas		  "0"
	  highmeas		  "80"
	  lowmv			  "0"
	  highmv		  "80"
	  deadtime		  "transmitter_deadtime(9)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(9)"
	  x0mv			  "MVs(9)"
	  x0xs			  "y_ss(10)"
	  x0sp			  "str2num(get_param([gcr '/xmv9'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Separator Liquid Exit"
	  SID			  "1475"
	  Ports			  [2, 1]
	  Position		  [1410, 798, 1505, 867]
	  ZOrder		  790
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "1 (Proportional only)"
	  mode			  "1 (automatic)"
	  gain			  "-5"
	  reset			  "100"
	  csampling		  "controller_sampling_frequency(8)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "4.536"
	  deadtime		  "transmitter_deadtime(8)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(8)"
	  x0mv			  "MVs(8)"
	  x0xs			  "y_ss(9)"
	  x0sp			  "str2num(get_param([gcr '/xmv8'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Separator Vapor Exit"
	  SID			  "1480"
	  Ports			  [2, 1]
	  Position		  [860, 898, 955, 967]
	  ZOrder		  795
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "2 (Fixed)"
	  mode			  "1 (automatic)"
	  gain			  "0"
	  reset			  "0"
	  csampling		  "controller_sampling_frequency(10)"
	  lowmeas		  "0"
	  highmeas		  "100"
	  lowmv			  "0"
	  highmv		  "30"
	  deadtime		  "transmitter_deadtime(10)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(10)"
	  x0mv			  "MVs(10)"
	  x0xs			  "y_ss(10)"
	  x0sp			  "str2num(get_param([gcr '/xmv10'], 'Value'))"
	}
	Block {
	  BlockType		  S-Function
	  Name			  "VA Code"
	  SID			  "202"
	  Ports			  [2, 2]
	  Position		  [1115, 324, 1175, 371]
	  ZOrder		  -116
	  FunctionName		  "vamex"
	  Parameters		  "[]"
	  EnableBusSupport	  off
	}
	Block {
	  BlockType		  Reference
	  Name			  "Vaporizer Heater Duty"
	  SID			  "1473"
	  Ports			  [2, 1]
	  Position		  [860, 798, 955, 867]
	  ZOrder		  788
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "1"
	  reset			  "5"
	  csampling		  "controller_sampling_frequency(6)"
	  lowmeas		  "120"
	  highmeas		  "170"
	  lowmv			  "0"
	  highmv		  "15000"
	  deadtime		  "transmitter_deadtime(6)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(6)"
	  x0mv			  "MVs(6)"
	  x0xs			  "y_ss(4)"
	  x0sp			  "str2num(get_param([gcr '/xmv6'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Vaporizer Liquid Inlet"
	  SID			  "1505"
	  Ports			  [2, 1]
	  Position		  [860, 1288, 955, 1357]
	  ZOrder		  820
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "2 (Fixed)"
	  mode			  "1 (automatic)"
	  gain			  "0"
	  reset			  "0"
	  csampling		  "controller_sampling_frequency(26)"
	  lowmeas		  "0"
	  highmeas		  "100"
	  lowmv			  "0"
	  highmv		  "4.536"
	  deadtime		  "transmitter_deadtime(26)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(26)"
	  x0mv			  "MVs(26)"
	  x0xs			  "y_ss(26)"
	  x0sp			  "str2num(get_param([gcr '/xmv26'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Vaporizer Steam Duty"
	  SID			  "1425"
	  Ports			  [2, 1]
	  Position		  [1410, 698, 1505, 767]
	  ZOrder		  780
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-0.1"
	  reset			  "30"
	  csampling		  "controller_sampling_frequency(4)"
	  lowmeas		  "0"
	  highmeas		  "1"
	  lowmv			  "0"
	  highmv		  "1433400"
	  deadtime		  "transmitter_deadtime(4)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(4)"
	  x0mv			  "MVs(4)"
	  x0xs			  "y_ss(2)"
	  x0sp			  "str2num(get_param([gcr '/xmv4'], 'Value'))"
	}
	Block {
	  BlockType		  Reference
	  Name			  "Vaporizer Vapor Exit"
	  SID			  "1472"
	  Ports			  [2, 1]
	  Position		  [580, 798, 675, 867]
	  ZOrder		  787
	  LibraryVersion	  "1.242"
	  SourceBlock		  "VAlib/CLoop"
	  SourceType		  ""
	  ContentPreviewEnabled	  off
	  ctype			  "0 (PI)"
	  mode			  "1 (automatic)"
	  gain			  "-5"
	  reset			  "10"
	  csampling		  "controller_sampling_frequency(5)"
	  lowmeas		  "0"
	  highmeas		  "200"
	  lowmv			  "0"
	  highmv		  "50"
	  deadtime		  "transmitter_deadtime(5)"
	  tau			  "transmitter_lag"
	  tsampling		  "transmitter_sampling_frequency(5)"
	  x0mv			  "MVs(5)"
	  x0xs			  "y_ss(1)"
	  x0sp			  "str2num(get_param([gcr '/xmv5'], 'Value'))"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "xmeas atk block"
	  SID			  "685"
	  Ports			  [1, 1]
	  Position		  [1250, 314, 1325, 356]
	  ZOrder		  500
	  RequestExecContextInheritance	off
	  System {
	    Name		    "xmeas atk block"
	    Location		    [-1688, -250, 8, 812]
	    Open		    on
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "A4"
	    PaperUnits		    "centimeters"
	    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "80"
	    Block {
	      BlockType		      Inport
	      Name		      "xmeas"
	      SID		      "686"
	      Position		      [145, 498, 175, 512]
	      ZOrder		      498
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Demux
	      Name		      "Demux"
	      SID		      "688"
	      Ports		      [1, 43]
	      Position		      [255, 37, 265, 2643]
	      ZOrder		      502
	      ShowName		      off
	      Outputs		      "43"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      Mux
	      Name		      "Mux"
	      SID		      "689"
	      Ports		      [43, 1]
	      Position		      [620, 35, 630, 2645]
	      ZOrder		      501
	      ShowName		      off
	      Inputs		      "43"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas1 attack controller"
	      SID		      "690"
	      Ports		      [1, 1]
	      Position		      [340, 21, 535, 59]
	      ZOrder		      503
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		19
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    20
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    21
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    22
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    23
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    24
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    25
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    26
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    27
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    28
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    29
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    30
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    31
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    32
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    33
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    34
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    35
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    36
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    37
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    38
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    39
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    40
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    41
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas1 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "690:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "690:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    42
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    43
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    44
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    45
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "690:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    46
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "690:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "690:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "690:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    47
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "690:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "690:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    48
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "690:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "690:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "690:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    49
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "690:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "690:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "690:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "690:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "690:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "690:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "690:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "690:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "690:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "690:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "690:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "690:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "690:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "690:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "690:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas10 attack controller"
	      SID		      "698"
	      Ports		      [1, 1]
	      Position		      [340, 606, 535, 644]
	      ZOrder		      527
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		50
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    51
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    52
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    53
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    54
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    55
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    56
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    57
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    58
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    59
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    60
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    61
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    62
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    63
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    64
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    65
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    66
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    67
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    68
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    69
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    70
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    71
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    72
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas10 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "698:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "698:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    73
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    74
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    75
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    76
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "698:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    77
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "698:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "698:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "698:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    78
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "698:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "698:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    79
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "698:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "698:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "698:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    80
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "698:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "698:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "698:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "698:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "698:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "698:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "698:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "698:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "698:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "698:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "698:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "698:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "698:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "698:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "698:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas11 attack controller"
	      SID		      "699"
	      Ports		      [1, 1]
	      Position		      [340, 671, 535, 709]
	      ZOrder		      526
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		81
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    82
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    83
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    84
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    85
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    86
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    87
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    88
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    89
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    90
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    91
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    92
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    93
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    94
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    95
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    96
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    97
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    98
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    99
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    100
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    101
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    102
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    103
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas11 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "699:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "699:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    104
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    105
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    106
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    107
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "699:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    108
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "699:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "699:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "699:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    109
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "699:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "699:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    110
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "699:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "699:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "699:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    111
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "699:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "699:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "699:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "699:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "699:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "699:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "699:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "699:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "699:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "699:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "699:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "699:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "699:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "699:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "699:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas12 attack controller"
	      SID		      "700"
	      Ports		      [1, 1]
	      Position		      [340, 736, 535, 774]
	      ZOrder		      525
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		112
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    113
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    114
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    115
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    116
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    117
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    118
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    119
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    120
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    121
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    122
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    123
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    124
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    125
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    126
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    127
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    128
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    129
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    130
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    131
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    132
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    133
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    134
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas12 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "700:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "700:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    135
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    136
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    137
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    138
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "700:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    139
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "700:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "700:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "700:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    140
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "700:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "700:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    141
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "700:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "700:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "700:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    142
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "700:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "700:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "700:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "700:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "700:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "700:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "700:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "700:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "700:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "700:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "700:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "700:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "700:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "700:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "700:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas13 attack controller"
	      SID		      "1394"
	      Ports		      [1, 1]
	      Position		      [340, 796, 535, 834]
	      ZOrder		      533
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		143
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    144
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    145
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    146
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    147
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    148
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    149
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    150
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    151
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    152
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    153
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    154
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    155
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    156
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    157
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    158
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    159
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    160
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    161
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    162
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    163
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    164
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    165
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas13 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1394:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1394:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    166
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    167
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    168
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    169
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1394:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1394:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1394:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    170
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1394:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1394:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1394:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1394:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1394:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1394:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    171
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1394:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1394:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1394:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1394:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1394:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    172
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1394:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1394:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1394:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1394:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1394:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1394:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    173
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1394:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1394:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1394:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1394:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1394:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1394:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1394:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1394:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1394:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1394:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1394:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1394:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1394:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1394:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1394:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1394:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas14 attack controller"
	      SID		      "692"
	      Ports		      [1, 1]
	      Position		      [340, 856, 535, 894]
	      ZOrder		      524
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		174
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    175
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    176
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    177
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    178
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    179
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    180
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    181
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    182
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    183
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    184
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    185
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    186
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    187
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    188
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    189
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    190
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    191
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    192
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    193
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    194
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    195
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    196
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas14 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "692:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "692:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    197
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    198
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    199
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    200
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "692:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    201
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "692:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "692:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "692:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    202
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "692:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "692:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    203
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "692:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "692:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "692:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    204
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "692:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "692:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "692:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "692:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "692:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "692:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "692:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "692:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "692:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "692:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "692:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "692:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "692:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "692:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "692:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas15 attack controller"
	      SID		      "687"
	      Ports		      [1, 1]
	      Position		      [340, 916, 535, 954]
	      ZOrder		      521
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		205
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    206
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    207
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    208
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    209
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    210
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    211
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    212
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    213
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    214
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    215
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    216
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    217
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    218
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    219
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    220
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    221
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    222
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    223
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    224
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    225
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    226
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    227
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas15 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "687:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "687:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    228
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    229
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    230
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    231
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "687:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    232
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "687:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "687:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "687:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    233
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "687:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "687:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    234
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "687:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "687:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "687:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    235
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "687:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "687:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "687:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "687:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "687:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "687:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "687:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "687:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "687:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "687:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "687:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "687:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "687:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "687:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "687:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas16 attack controller"
	      SID		      "1395"
	      Ports		      [1, 1]
	      Position		      [340, 976, 535, 1014]
	      ZOrder		      534
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		236
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    237
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    238
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    239
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    240
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    241
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    242
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    243
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    244
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    245
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    246
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    247
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    248
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    249
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    250
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    251
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    252
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    253
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    254
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    255
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    256
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    257
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    258
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas16 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1395:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1395:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    259
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    260
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    261
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    262
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1395:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1395:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1395:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    263
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1395:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1395:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1395:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1395:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1395:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1395:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    264
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1395:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1395:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1395:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1395:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1395:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    265
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1395:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1395:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1395:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1395:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1395:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1395:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    266
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1395:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1395:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1395:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1395:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1395:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1395:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1395:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1395:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1395:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1395:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1395:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1395:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1395:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1395:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1395:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1395:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas17 attack controller"
	      SID		      "705"
	      Ports		      [1, 1]
	      Position		      [340, 1036, 535, 1074]
	      ZOrder		      522
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		267
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    268
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    269
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    270
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    271
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    272
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    273
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    274
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    275
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    276
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    277
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    278
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    279
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    280
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    281
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    282
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    283
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    284
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    285
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    286
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    287
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    288
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    289
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas17 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "705:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "705:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    290
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    291
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    292
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    293
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "705:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    294
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "705:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "705:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "705:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    295
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "705:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "705:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    296
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "705:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "705:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "705:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    297
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "705:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "705:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "705:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "705:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "705:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "705:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "705:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "705:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "705:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "705:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "705:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "705:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "705:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "705:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "705:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas18 attack controller"
	      SID		      "1396"
	      Ports		      [1, 1]
	      Position		      [340, 1096, 535, 1134]
	      ZOrder		      535
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		298
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    299
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    300
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    301
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    302
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    303
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    304
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    305
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    306
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    307
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    308
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    309
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    310
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    311
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    312
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    313
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    314
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    315
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    316
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    317
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    318
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    319
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    320
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas18 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1396:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1396:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    321
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    322
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    323
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    324
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1396:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1396:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1396:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    325
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1396:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1396:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1396:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1396:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1396:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1396:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    326
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1396:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1396:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1396:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1396:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1396:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    327
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1396:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1396:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1396:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1396:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1396:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1396:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    328
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1396:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1396:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1396:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1396:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1396:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1396:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1396:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1396:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1396:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1396:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1396:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1396:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1396:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1396:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1396:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1396:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas19 attack controller"
	      SID		      "1397"
	      Ports		      [1, 1]
	      Position		      [340, 1156, 535, 1194]
	      ZOrder		      536
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		329
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    330
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    331
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    332
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    333
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    334
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    335
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    336
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    337
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    338
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    339
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    340
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    341
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    342
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    343
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    344
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    345
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    346
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    347
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    348
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    349
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    350
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    351
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas19 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1397:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1397:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    352
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    353
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    354
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    355
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1397:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1397:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1397:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    356
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1397:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1397:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1397:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1397:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1397:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1397:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    357
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1397:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1397:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1397:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1397:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1397:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    358
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1397:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1397:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1397:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1397:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1397:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1397:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    359
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1397:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1397:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1397:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1397:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1397:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1397:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1397:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1397:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1397:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1397:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1397:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1397:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1397:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1397:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1397:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1397:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas2 attack controller"
	      SID		      "691"
	      Ports		      [1, 1]
	      Position		      [340, 86, 535, 124]
	      ZOrder		      505
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		360
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    361
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "DOS attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    362
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    363
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1/60"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    364
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1/60"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    365
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    366
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "signal"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    367
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    368
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    369
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    370
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    371
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    372
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    373
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    374
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    375
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    376
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    377
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    378
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    379
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    380
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    381
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    382
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas2 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "691:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "691:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    383
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    384
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    385
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1/60"
		    }
		    Object {
		    $ObjectID		    386
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "691:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    387
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "691:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "691:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "691:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    388
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "691:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "691:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    389
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "691:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "691:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "691:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    390
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "691:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "691:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "691:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "691:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "691:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "691:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "691:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "691:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "691:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "691:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "691:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "691:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "691:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		  Value			  "3"
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "691:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "691:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas20 attack controller"
	      SID		      "1398"
	      Ports		      [1, 1]
	      Position		      [340, 1216, 535, 1254]
	      ZOrder		      537
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		391
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    392
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    393
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    394
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    395
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    396
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    397
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    398
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    399
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    400
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    401
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    402
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    403
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    404
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    405
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    406
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    407
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    408
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    409
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    410
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    411
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    412
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    413
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas20 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1398:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1398:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    414
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    415
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    416
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    417
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1398:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1398:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1398:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    418
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1398:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1398:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1398:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1398:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1398:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1398:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    419
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1398:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1398:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1398:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1398:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1398:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    420
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1398:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1398:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1398:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1398:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1398:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1398:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    421
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1398:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1398:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1398:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1398:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1398:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1398:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1398:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1398:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1398:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1398:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1398:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1398:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1398:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1398:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1398:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1398:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas21 attack controller"
	      SID		      "1399"
	      Ports		      [1, 1]
	      Position		      [340, 1276, 535, 1314]
	      ZOrder		      538
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		422
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    423
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    424
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    425
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    426
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    427
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    428
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    429
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    430
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    431
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    432
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    433
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    434
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    435
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    436
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    437
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    438
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    439
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    440
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    441
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    442
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    443
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    444
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas21 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1399:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1399:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    445
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    446
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    447
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    448
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1399:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1399:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1399:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    449
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1399:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1399:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1399:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1399:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1399:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1399:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    450
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1399:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1399:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1399:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1399:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1399:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    451
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1399:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1399:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1399:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1399:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1399:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1399:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    452
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1399:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1399:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1399:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1399:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1399:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1399:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1399:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1399:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1399:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1399:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1399:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1399:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1399:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1399:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1399:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1399:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas22 attack controller"
	      SID		      "1400"
	      Ports		      [1, 1]
	      Position		      [340, 1336, 535, 1374]
	      ZOrder		      539
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		453
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    454
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    455
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    456
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    457
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    458
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    459
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    460
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    461
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    462
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    463
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    464
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    465
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    466
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    467
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    468
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    469
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    470
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    471
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    472
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    473
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    474
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    475
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas22 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1400:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1400:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    476
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    477
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    478
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    479
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1400:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1400:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1400:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    480
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1400:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1400:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1400:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1400:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1400:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1400:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    481
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1400:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1400:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1400:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1400:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1400:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    482
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1400:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1400:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1400:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1400:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1400:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1400:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    483
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1400:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1400:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1400:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1400:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1400:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1400:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1400:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1400:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1400:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1400:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1400:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1400:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1400:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1400:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1400:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1400:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas23 attack controller"
	      SID		      "1401"
	      Ports		      [1, 1]
	      Position		      [340, 1396, 535, 1434]
	      ZOrder		      540
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		484
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    485
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    486
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    487
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    488
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    489
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    490
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    491
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    492
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    493
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    494
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    495
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    496
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    497
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    498
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    499
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    500
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    501
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    502
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    503
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    504
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    505
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    506
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas23 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1401:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1401:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    507
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    508
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    509
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    510
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1401:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1401:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1401:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    511
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1401:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1401:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1401:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1401:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1401:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1401:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    512
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1401:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1401:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1401:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1401:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1401:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    513
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1401:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1401:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1401:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1401:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1401:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1401:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    514
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1401:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1401:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1401:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1401:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1401:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1401:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1401:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1401:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1401:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1401:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1401:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1401:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1401:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1401:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1401:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1401:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas24 attack controller"
	      SID		      "1402"
	      Ports		      [1, 1]
	      Position		      [340, 1456, 535, 1494]
	      ZOrder		      541
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		515
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    516
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    517
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    518
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    519
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    520
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    521
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    522
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    523
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    524
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    525
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    526
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    527
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    528
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    529
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    530
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    531
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    532
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    533
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    534
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    535
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    536
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    537
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas24 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1402:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1402:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    538
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    539
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    540
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    541
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1402:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1402:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1402:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    542
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1402:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1402:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1402:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1402:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1402:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1402:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    543
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1402:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1402:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1402:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1402:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1402:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    544
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1402:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1402:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1402:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1402:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1402:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1402:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    545
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1402:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1402:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1402:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1402:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1402:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1402:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1402:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1402:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1402:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1402:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1402:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1402:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1402:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1402:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1402:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1402:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas25 attack controller"
	      SID		      "1403"
	      Ports		      [1, 1]
	      Position		      [340, 1516, 535, 1554]
	      ZOrder		      542
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		546
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    547
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    548
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    549
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    550
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    551
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    552
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    553
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    554
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    555
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    556
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    557
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    558
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    559
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    560
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    561
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    562
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    563
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    564
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    565
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    566
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    567
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    568
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas25 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1403:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1403:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    569
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    570
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    571
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    572
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1403:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1403:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1403:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    573
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1403:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1403:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1403:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1403:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1403:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1403:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    574
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1403:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1403:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1403:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1403:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1403:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    575
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1403:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1403:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1403:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1403:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1403:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1403:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    576
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1403:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1403:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1403:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1403:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1403:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1403:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1403:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1403:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1403:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1403:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1403:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1403:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1403:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1403:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1403:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1403:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas26 attack controller"
	      SID		      "1404"
	      Ports		      [1, 1]
	      Position		      [340, 1576, 535, 1614]
	      ZOrder		      543
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		577
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    578
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    579
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    580
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    581
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    582
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    583
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    584
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    585
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    586
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    587
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    588
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    589
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    590
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    591
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    592
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    593
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    594
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    595
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    596
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    597
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    598
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    599
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas26 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1404:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1404:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    600
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    601
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    602
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    603
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1404:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1404:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1404:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    604
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1404:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1404:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1404:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1404:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1404:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1404:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    605
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1404:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1404:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1404:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1404:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1404:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    606
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1404:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1404:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1404:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1404:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1404:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1404:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    607
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1404:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1404:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1404:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1404:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1404:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1404:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1404:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1404:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1404:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1404:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1404:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1404:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1404:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1404:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1404:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1404:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas27 attack controller"
	      SID		      "1405"
	      Ports		      [1, 1]
	      Position		      [340, 1636, 535, 1674]
	      ZOrder		      544
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		608
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    609
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    610
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    611
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    612
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    613
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    614
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    615
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    616
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    617
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    618
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    619
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    620
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    621
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    622
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    623
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    624
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    625
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    626
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    627
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    628
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    629
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    630
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas27 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1405:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1405:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    631
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    632
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    633
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    634
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1405:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1405:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1405:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    635
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1405:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1405:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1405:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1405:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1405:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1405:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    636
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1405:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1405:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1405:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1405:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1405:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    637
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1405:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1405:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1405:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1405:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1405:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1405:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    638
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1405:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1405:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1405:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1405:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1405:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1405:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1405:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1405:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1405:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1405:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1405:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1405:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1405:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1405:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1405:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1405:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas28 attack controller"
	      SID		      "1406"
	      Ports		      [1, 1]
	      Position		      [340, 1696, 535, 1734]
	      ZOrder		      545
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		639
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    640
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    641
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    642
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    643
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    644
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    645
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    646
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    647
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    648
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    649
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    650
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    651
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    652
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    653
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    654
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    655
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    656
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    657
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    658
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    659
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    660
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    661
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas28 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1406:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1406:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    662
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    663
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    664
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    665
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1406:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1406:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1406:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    666
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1406:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1406:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1406:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1406:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1406:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1406:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    667
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1406:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1406:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1406:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1406:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1406:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    668
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1406:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1406:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1406:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1406:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1406:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1406:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    669
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1406:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1406:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1406:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1406:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1406:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1406:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1406:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1406:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1406:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1406:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1406:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1406:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1406:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1406:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1406:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1406:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas29 attack controller"
	      SID		      "1407"
	      Ports		      [1, 1]
	      Position		      [340, 1756, 535, 1794]
	      ZOrder		      546
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		670
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    671
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    672
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    673
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    674
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    675
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    676
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    677
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    678
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    679
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    680
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    681
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    682
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    683
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    684
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    685
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    686
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    687
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    688
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    689
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    690
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    691
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    692
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas29 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1407:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1407:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    693
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    694
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    695
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    696
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1407:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1407:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1407:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    697
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1407:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1407:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1407:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1407:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1407:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1407:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    698
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1407:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1407:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1407:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1407:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1407:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    699
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1407:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1407:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1407:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1407:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1407:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1407:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    700
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1407:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1407:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1407:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1407:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1407:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1407:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1407:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1407:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1407:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1407:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1407:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1407:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1407:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1407:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1407:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1407:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas3 attack controller"
	      SID		      "693"
	      Ports		      [1, 1]
	      Position		      [340, 151, 535, 189]
	      ZOrder		      506
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		701
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    702
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    703
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    704
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    705
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    706
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    707
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    708
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    709
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    710
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    711
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    712
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    713
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    714
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    715
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    716
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    717
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    718
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    719
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    720
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    721
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    722
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    723
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas3 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "693:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "693:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    724
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    725
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    726
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    727
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "693:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    728
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "693:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "693:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "693:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    729
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "693:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "693:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    730
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "693:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "693:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "693:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    731
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "693:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "693:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "693:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "693:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "693:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "693:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "693:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "693:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "693:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "693:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "693:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "693:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "693:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "693:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "693:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas30 attack controller"
	      SID		      "1408"
	      Ports		      [1, 1]
	      Position		      [340, 1816, 535, 1854]
	      ZOrder		      547
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		732
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    733
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    734
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    735
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    736
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    737
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    738
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    739
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    740
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    741
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    742
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    743
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    744
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    745
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    746
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    747
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    748
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    749
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    750
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    751
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    752
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    753
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    754
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas30 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1408:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1408:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    755
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    756
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    757
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    758
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1408:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1408:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1408:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    759
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1408:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1408:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1408:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1408:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1408:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1408:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    760
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1408:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1408:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1408:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1408:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1408:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    761
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1408:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1408:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1408:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1408:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1408:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1408:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    762
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1408:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1408:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1408:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1408:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1408:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1408:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1408:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1408:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1408:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1408:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1408:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1408:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1408:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1408:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1408:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1408:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas31 attack controller"
	      SID		      "703"
	      Ports		      [1, 1]
	      Position		      [340, 1876, 535, 1914]
	      ZOrder		      520
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		763
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    764
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    765
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    766
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    767
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    768
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    769
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    770
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    771
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    772
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    773
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    774
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    775
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    776
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    777
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    778
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    779
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    780
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    781
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    782
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    783
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    784
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    785
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas31 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "703:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "703:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    786
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    787
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    788
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    789
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "703:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    790
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "703:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "703:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "703:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    791
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "703:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "703:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    792
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "703:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "703:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "703:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    793
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "703:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "703:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "703:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "703:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "703:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "703:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "703:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "703:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "703:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "703:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "703:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "703:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "703:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "703:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "703:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas32 attack controller"
	      SID		      "1409"
	      Ports		      [1, 1]
	      Position		      [340, 1936, 535, 1974]
	      ZOrder		      548
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		794
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    795
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    796
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    797
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    798
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    799
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    800
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    801
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    802
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    803
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    804
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    805
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    806
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    807
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    808
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    809
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    810
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    811
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    812
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    813
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    814
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    815
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    816
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas32 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1409:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1409:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    817
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    818
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    819
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    820
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1409:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1409:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1409:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    821
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1409:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1409:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1409:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1409:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1409:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1409:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    822
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1409:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1409:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1409:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1409:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1409:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    823
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1409:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1409:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1409:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1409:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1409:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1409:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    824
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1409:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1409:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1409:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1409:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1409:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1409:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1409:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1409:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1409:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1409:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1409:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1409:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1409:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1409:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1409:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1409:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas33 attack controller"
	      SID		      "1410"
	      Ports		      [1, 1]
	      Position		      [340, 1996, 535, 2034]
	      ZOrder		      549
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		825
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    826
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    827
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    828
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    829
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    830
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    831
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    832
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    833
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    834
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    835
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    836
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    837
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    838
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    839
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    840
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    841
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    842
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    843
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    844
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    845
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    846
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    847
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas33 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1410:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1410:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    848
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    849
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    850
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    851
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1410:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1410:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1410:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    852
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1410:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1410:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1410:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1410:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1410:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1410:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    853
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1410:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1410:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1410:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1410:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1410:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    854
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1410:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1410:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1410:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1410:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1410:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1410:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    855
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1410:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1410:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1410:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1410:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1410:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1410:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1410:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1410:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1410:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1410:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1410:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1410:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1410:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1410:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1410:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1410:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas34 attack controller"
	      SID		      "1411"
	      Ports		      [1, 1]
	      Position		      [340, 2056, 535, 2094]
	      ZOrder		      550
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		856
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    857
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    858
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    859
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    860
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    861
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    862
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    863
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    864
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    865
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    866
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    867
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    868
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    869
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    870
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    871
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    872
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    873
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    874
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    875
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    876
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    877
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    878
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas34 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1411:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1411:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    879
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    880
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    881
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    882
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1411:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1411:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1411:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    883
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1411:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1411:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1411:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1411:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1411:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1411:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    884
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1411:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1411:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1411:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1411:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1411:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    885
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1411:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1411:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1411:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1411:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1411:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1411:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    886
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1411:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1411:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1411:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1411:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1411:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1411:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1411:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1411:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1411:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1411:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1411:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1411:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1411:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1411:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1411:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1411:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas35 attack controller"
	      SID		      "1412"
	      Ports		      [1, 1]
	      Position		      [340, 2116, 535, 2154]
	      ZOrder		      551
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		887
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    888
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    889
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    890
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    891
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    892
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    893
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    894
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    895
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    896
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    897
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    898
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    899
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    900
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    901
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    902
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    903
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    904
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    905
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    906
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    907
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    908
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    909
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas35 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1412:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1412:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    910
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    911
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    912
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    913
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1412:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1412:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1412:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    914
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1412:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1412:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1412:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1412:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1412:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1412:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    915
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1412:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1412:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1412:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1412:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1412:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    916
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1412:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1412:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1412:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1412:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1412:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1412:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    917
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1412:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1412:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1412:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1412:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1412:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1412:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1412:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1412:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1412:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1412:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1412:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1412:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1412:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1412:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1412:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1412:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas36 attack controller"
	      SID		      "1413"
	      Ports		      [1, 1]
	      Position		      [340, 2176, 535, 2214]
	      ZOrder		      552
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		918
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    919
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    920
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    921
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    922
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    923
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    924
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    925
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    926
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    927
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    928
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    929
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    930
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    931
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    932
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    933
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    934
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    935
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    936
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    937
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    938
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    939
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    940
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas36 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1413:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1413:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    941
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    942
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    943
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    944
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1413:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1413:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1413:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    945
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1413:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1413:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1413:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1413:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1413:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1413:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    946
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1413:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1413:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1413:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1413:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1413:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    947
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1413:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1413:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1413:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1413:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1413:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1413:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    948
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1413:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1413:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1413:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1413:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1413:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1413:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1413:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1413:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1413:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1413:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1413:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1413:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1413:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1413:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1413:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1413:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas37 attack controller"
	      SID		      "868"
	      Ports		      [1, 1]
	      Position		      [340, 2236, 535, 2274]
	      ZOrder		      531
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		949
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    950
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    951
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    952
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    953
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    954
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    955
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    956
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    957
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    958
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    959
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    960
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    961
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    962
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    963
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    964
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    965
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    966
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    967
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    968
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    969
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    970
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    971
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas37 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "868:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "868:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    972
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    973
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    974
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    975
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "868:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "868:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "868:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    976
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "868:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "868:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "868:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "868:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "868:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "868:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    977
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "868:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "868:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "868:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "868:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "868:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    978
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "868:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "868:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "868:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "868:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "868:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "868:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    979
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "868:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "868:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "868:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "868:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "868:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "868:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "868:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "868:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "868:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "868:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "868:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "868:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "868:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "868:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "868:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "868:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas38 attack controller"
	      SID		      "1414"
	      Ports		      [1, 1]
	      Position		      [340, 2296, 535, 2334]
	      ZOrder		      553
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		980
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    981
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    982
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    983
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    984
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    985
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    986
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    987
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    988
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    989
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    990
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    991
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    992
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    993
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    994
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    995
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    996
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    997
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    998
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    999
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1000
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1001
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1002
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas38 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1414:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1414:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1003
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1004
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1005
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1006
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1414:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1414:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1414:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1007
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1414:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1414:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1414:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1414:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1414:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1414:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1008
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1414:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1414:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1414:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1414:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1414:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1009
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1414:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1414:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1414:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1414:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1414:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1414:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1010
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1414:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1414:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1414:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1414:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1414:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1414:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1414:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1414:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1414:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1414:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1414:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1414:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1414:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1414:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1414:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1414:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas39 attack controller"
	      SID		      "1415"
	      Ports		      [1, 1]
	      Position		      [340, 2356, 535, 2394]
	      ZOrder		      554
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1011
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1012
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1013
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1014
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1015
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1016
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1017
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1018
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1019
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1020
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1021
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1022
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1023
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1024
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1025
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1026
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1027
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1028
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1029
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1030
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1031
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1032
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1033
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas39 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1415:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1415:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1034
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1035
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1036
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1037
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1415:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1415:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1415:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1038
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1415:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1415:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1415:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1415:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1415:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1415:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1039
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1415:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1415:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1415:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1415:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1415:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1040
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1415:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1415:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1415:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1415:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1415:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1415:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1041
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1415:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1415:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1415:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1415:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1415:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1415:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1415:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1415:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1415:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1415:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1415:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1415:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1415:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1415:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1415:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1415:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas4 attack controller"
	      SID		      "694"
	      Ports		      [1, 1]
	      Position		      [340, 216, 535, 254]
	      ZOrder		      507
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1042
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1043
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1044
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1045
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1046
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1047
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1048
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1049
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1050
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1051
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1052
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1053
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1054
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1055
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1056
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1057
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1058
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1059
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1060
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1061
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1062
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1063
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1064
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas4 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "694:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "694:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1065
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1066
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1067
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1068
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "694:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1069
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "694:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "694:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "694:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1070
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "694:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "694:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1071
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "694:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "694:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "694:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1072
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "694:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "694:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "694:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "694:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "694:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "694:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "694:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "694:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "694:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "694:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "694:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "694:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "694:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "694:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "694:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas40 attack controller"
	      SID		      "1416"
	      Ports		      [1, 1]
	      Position		      [340, 2416, 535, 2454]
	      ZOrder		      555
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1073
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1074
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1075
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1076
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1077
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1078
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1079
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1080
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1081
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1082
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1083
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1084
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1085
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1086
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1087
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1088
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1089
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1090
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1091
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1092
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1093
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1094
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1095
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas40 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1416:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1416:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1096
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1097
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1098
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1099
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1416:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1416:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1416:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1100
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1416:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1416:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1416:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1416:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1416:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1416:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1101
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1416:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1416:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1416:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1416:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1416:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1102
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1416:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1416:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1416:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1416:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1416:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1416:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1103
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1416:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1416:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1416:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1416:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1416:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1416:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1416:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1416:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1416:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1416:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1416:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1416:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1416:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1416:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1416:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1416:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas41 attack controller"
	      SID		      "1417"
	      Ports		      [1, 1]
	      Position		      [340, 2476, 535, 2514]
	      ZOrder		      556
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1104
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1105
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1106
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1107
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1108
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1109
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1110
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1111
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1112
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1113
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1114
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1115
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1116
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1117
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1118
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1119
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1120
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1121
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1122
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1123
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1124
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1125
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1126
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas41 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1417:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1417:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1127
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1128
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1129
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1130
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1417:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1417:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1417:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1131
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1417:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1417:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1417:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1417:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1417:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1417:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1132
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1417:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1417:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1417:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1417:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1417:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1133
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1417:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1417:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1417:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1417:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1417:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1417:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1134
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1417:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1417:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1417:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1417:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1417:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1417:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1417:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1417:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1417:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1417:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1417:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1417:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1417:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1417:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1417:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1417:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas42 attack controller"
	      SID		      "1418"
	      Ports		      [1, 1]
	      Position		      [340, 2536, 535, 2574]
	      ZOrder		      557
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1135
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1136
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1137
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1138
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1139
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1140
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1141
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1142
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1143
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1144
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1145
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1146
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1147
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1148
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1149
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1150
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1151
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1152
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1153
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1154
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1155
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1156
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1157
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas42 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1418:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1418:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1158
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1159
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1160
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1161
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1418:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1418:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1418:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1162
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1418:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1418:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1418:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1418:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1418:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1418:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1163
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1418:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1418:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1418:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1418:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1418:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1164
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1418:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1418:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1418:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1418:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1418:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1418:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1165
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1418:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1418:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1418:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1418:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1418:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1418:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1418:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1418:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1418:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1418:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1418:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1418:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1418:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1418:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1418:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1418:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas43 attack controller"
	      SID		      "1419"
	      Ports		      [1, 1]
	      Position		      [340, 2596, 535, 2634]
	      ZOrder		      558
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1166
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1167
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1168
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1169
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1170
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1171
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1172
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1173
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1174
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1175
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1176
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1177
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1178
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1179
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1180
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1181
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1182
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1183
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1184
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1185
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1186
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1187
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1188
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas43 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1419:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1419:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1189
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1190
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1191
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1192
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1419:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1419:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1419:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1193
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1419:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1419:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1419:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1419:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1419:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1419:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1194
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1419:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1419:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1419:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1419:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1419:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1195
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1419:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1419:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1419:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1419:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1419:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1419:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1196
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1419:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1419:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1419:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1419:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1419:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1419:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1419:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1419:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1419:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1419:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1419:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1419:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1419:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1419:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1419:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1419:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas5 attack controller"
	      SID		      "704"
	      Ports		      [1, 1]
	      Position		      [340, 281, 535, 319]
	      ZOrder		      523
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1197
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1198
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1199
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1200
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1201
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1202
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1203
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1204
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1205
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1206
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1207
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1208
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1209
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1210
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1211
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1212
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1213
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1214
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1215
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1216
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1217
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1218
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1219
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas5 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "704:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "704:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1220
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1221
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1222
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1223
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "704:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1224
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "704:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "704:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "704:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1225
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "704:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "704:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1226
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "704:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "704:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "704:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1227
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "704:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "704:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "704:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "704:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "704:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "704:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "704:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "704:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "704:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "704:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "704:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "704:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "704:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "704:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "704:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas6 attack controller"
	      SID		      "1393"
	      Ports		      [1, 1]
	      Position		      [340, 346, 535, 384]
	      ZOrder		      532
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1228
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1229
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1230
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1231
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1232
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1233
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1234
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1235
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1236
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1237
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1238
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1239
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1240
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1241
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1242
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1243
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1244
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1245
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1246
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1247
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1248
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1249
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1250
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas6 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1393:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1393:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1251
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1252
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1253
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1254
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1393:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1393:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1393:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1255
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1393:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1393:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1393:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1393:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1393:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1393:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1256
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1393:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1393:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1393:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1393:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1393:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1257
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1393:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1393:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1393:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1393:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1393:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1393:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1258
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1393:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1393:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1393:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1393:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1393:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1393:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1393:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1393:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1393:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1393:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1393:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1393:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1393:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1393:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1393:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1393:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas7 attack controller"
	      SID		      "695"
	      Ports		      [1, 1]
	      Position		      [340, 411, 535, 449]
	      ZOrder		      530
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1259
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1260
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1261
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1262
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1263
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1264
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1265
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1266
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1267
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1268
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1269
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1270
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1271
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1272
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1273
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1274
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1275
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1276
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1277
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1278
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1279
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1280
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1281
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas7 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "695:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "695:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1282
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1283
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1284
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1285
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "695:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1286
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "695:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "695:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "695:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1287
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "695:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "695:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1288
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "695:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "695:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "695:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1289
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "695:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "695:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "695:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "695:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "695:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "695:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "695:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "695:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "695:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "695:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "695:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "695:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "695:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "695:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "695:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas8 attack controller"
	      SID		      "696"
	      Ports		      [1, 1]
	      Position		      [340, 476, 535, 514]
	      ZOrder		      529
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1290
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1291
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1292
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1293
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1294
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1295
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1296
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1297
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1298
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1299
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1300
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1301
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1302
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1303
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1304
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1305
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1306
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1307
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1308
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1309
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1310
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1311
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1312
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas8 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "696:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "696:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1313
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1314
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1315
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1316
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "696:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1317
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "696:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "696:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "696:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1318
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "696:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "696:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1319
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "696:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "696:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "696:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1320
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "696:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "696:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "696:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "696:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "696:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "696:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "696:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "696:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "696:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "696:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "696:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "696:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "696:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "696:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "696:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmeas9 attack controller"
	      SID		      "697"
	      Ports		      [1, 1]
	      Position		      [340, 541, 535, 579]
	      ZOrder		      528
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1321
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1322
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1323
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1324
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1325
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1326
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1327
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1328
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1329
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1330
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1331
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1332
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1333
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1334
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1335
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1336
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1337
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1338
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1339
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1340
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1341
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1342
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1343
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmeas9 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "697:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "697:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1344
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1345
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1346
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1347
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "697:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1348
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "697:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "697:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "697:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1349
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "697:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "697:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1350
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "697:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "697:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "697:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1351
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "697:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "697:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "697:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "697:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "697:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "697:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "697:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "697:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "697:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "697:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "697:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "697:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "697:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "697:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "697:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "faked"
	      SID		      "701"
	      Position		      [690, 498, 720, 512]
	      ZOrder		      499
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "xmeas5 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      5
	    }
	    Line {
	      ZOrder		      90
	      SrcBlock		      "Demux"
	      SrcPort		      6
	      Points		      [55, 0]
	      DstBlock		      "xmeas6 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "xmeas7 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      7
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "xmeas8 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      8
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "xmeas9 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      9
	    }
	    Line {
	      ZOrder		      6
	      SrcBlock		      "xmeas10 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      10
	    }
	    Line {
	      ZOrder		      7
	      SrcBlock		      "xmeas11 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      11
	    }
	    Line {
	      ZOrder		      8
	      SrcBlock		      "Demux"
	      SrcPort		      11
	      Points		      [0, 10]
	      DstBlock		      "xmeas11 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      9
	      SrcBlock		      "Demux"
	      SrcPort		      10
	      Points		      [0, 5]
	      DstBlock		      "xmeas10 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      10
	      SrcBlock		      "Demux"
	      SrcPort		      9
	      DstBlock		      "xmeas9 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      11
	      SrcBlock		      "Demux"
	      SrcPort		      8
	      Points		      [0, -5]
	      DstBlock		      "xmeas8 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      12
	      SrcBlock		      "Demux"
	      SrcPort		      7
	      Points		      [0, -10]
	      DstBlock		      "xmeas7 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      13
	      SrcBlock		      "Demux"
	      SrcPort		      5
	      Points		      [0, -20]
	      DstBlock		      "xmeas5 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      14
	      SrcBlock		      "xmeas4 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      4
	    }
	    Line {
	      ZOrder		      15
	      SrcBlock		      "Demux"
	      SrcPort		      4
	      Points		      [0, -25]
	      DstBlock		      "xmeas4 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      16
	      SrcBlock		      "xmeas3 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      3
	    }
	    Line {
	      ZOrder		      17
	      SrcBlock		      "Demux"
	      SrcPort		      3
	      Points		      [0, -30]
	      DstBlock		      "xmeas3 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      18
	      SrcBlock		      "xmeas2 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      2
	    }
	    Line {
	      ZOrder		      19
	      SrcBlock		      "Demux"
	      SrcPort		      2
	      Points		      [0, -35]
	      DstBlock		      "xmeas2 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      20
	      SrcBlock		      "Mux"
	      SrcPort		      1
	      Points		      [25, 0; 0, -835]
	      DstBlock		      "faked"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      21
	      SrcBlock		      "xmeas12 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      12
	    }
	    Line {
	      ZOrder		      22
	      SrcBlock		      "Demux"
	      SrcPort		      12
	      Points		      [0, 15]
	      DstBlock		      "xmeas12 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      23
	      SrcBlock		      "xmeas1 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      24
	      SrcBlock		      "Demux"
	      SrcPort		      1
	      Points		      [0, -40]
	      DstBlock		      "xmeas1 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      25
	      SrcBlock		      "xmeas"
	      SrcPort		      1
	      Points		      [35, 0; 0, 835]
	      DstBlock		      "Demux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      94
	      SrcBlock		      "Demux"
	      SrcPort		      16
	      Points		      [55, 0]
	      DstBlock		      "xmeas16 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      27
	      SrcBlock		      "Demux"
	      SrcPort		      14
	      Points		      [0, 15]
	      DstBlock		      "xmeas14 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      92
	      SrcBlock		      "Demux"
	      SrcPort		      13
	      Points		      [55, 0]
	      DstBlock		      "xmeas13 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      29
	      SrcBlock		      "xmeas14 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      14
	    }
	    Line {
	      ZOrder		      108
	      SrcBlock		      "Demux"
	      SrcPort		      24
	      Points		      [55, 0]
	      DstBlock		      "xmeas24 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      112
	      SrcBlock		      "Demux"
	      SrcPort		      26
	      Points		      [55, 0]
	      DstBlock		      "xmeas26 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      110
	      SrcBlock		      "Demux"
	      SrcPort		      25
	      Points		      [55, 0]
	      DstBlock		      "xmeas25 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      125
	      SrcBlock		      "Demux"
	      SrcPort		      33
	      Points		      [55, 0]
	      DstBlock		      "xmeas33 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      62
	      SrcBlock		      "Demux"
	      SrcPort		      37
	      Points		      [55, 0]
	      DstBlock		      "xmeas37 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      106
	      SrcBlock		      "Demux"
	      SrcPort		      23
	      Points		      [55, 0]
	      DstBlock		      "xmeas23 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      96
	      SrcBlock		      "Demux"
	      SrcPort		      18
	      Points		      [55, 0]
	      DstBlock		      "xmeas18 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      116
	      SrcBlock		      "Demux"
	      SrcPort		      28
	      Points		      [55, 0]
	      DstBlock		      "xmeas28 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      127
	      SrcBlock		      "Demux"
	      SrcPort		      34
	      Points		      [55, 0]
	      DstBlock		      "xmeas34 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      100
	      SrcBlock		      "Demux"
	      SrcPort		      20
	      Points		      [55, 0]
	      DstBlock		      "xmeas20 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      135
	      SrcBlock		      "Demux"
	      SrcPort		      39
	      Points		      [55, 0]
	      DstBlock		      "xmeas39 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      139
	      SrcBlock		      "Demux"
	      SrcPort		      41
	      Points		      [55, 0]
	      DstBlock		      "xmeas41 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      120
	      SrcBlock		      "Demux"
	      SrcPort		      30
	      Points		      [55, 0]
	      DstBlock		      "xmeas30 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      122
	      SrcBlock		      "Demux"
	      SrcPort		      32
	      Points		      [55, 0]
	      DstBlock		      "xmeas32 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      98
	      SrcBlock		      "Demux"
	      SrcPort		      19
	      Points		      [55, 0]
	      DstBlock		      "xmeas19 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      102
	      SrcBlock		      "Demux"
	      SrcPort		      21
	      Points		      [55, 0]
	      DstBlock		      "xmeas21 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      133
	      SrcBlock		      "Demux"
	      SrcPort		      38
	      Points		      [55, 0]
	      DstBlock		      "xmeas38 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      104
	      SrcBlock		      "Demux"
	      SrcPort		      22
	      Points		      [56, 0; 0, 15]
	      DstBlock		      "xmeas22 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      118
	      SrcBlock		      "Demux"
	      SrcPort		      29
	      Points		      [55, 0]
	      DstBlock		      "xmeas29 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      129
	      SrcBlock		      "Demux"
	      SrcPort		      35
	      Points		      [55, 0]
	      DstBlock		      "xmeas35 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      131
	      SrcBlock		      "Demux"
	      SrcPort		      36
	      Points		      [55, 0]
	      DstBlock		      "xmeas36 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      114
	      SrcBlock		      "Demux"
	      SrcPort		      27
	      Points		      [55, 0]
	      DstBlock		      "xmeas27 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      137
	      SrcBlock		      "Demux"
	      SrcPort		      40
	      Points		      [55, 0]
	      DstBlock		      "xmeas40 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      54
	      SrcBlock		      "Demux"
	      SrcPort		      31
	      Points		      [55, 0]
	      DstBlock		      "xmeas31 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      55
	      SrcBlock		      "xmeas31 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      31
	    }
	    Line {
	      ZOrder		      56
	      SrcBlock		      "Demux"
	      SrcPort		      15
	      Points		      [0, 15]
	      DstBlock		      "xmeas15 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      57
	      SrcBlock		      "xmeas15 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      15
	    }
	    Line {
	      ZOrder		      58
	      SrcBlock		      "Demux"
	      SrcPort		      17
	      Points		      [0, 15]
	      DstBlock		      "xmeas17 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      59
	      SrcBlock		      "xmeas17 attack controller"
	      SrcPort		      1
	      Points		      [65, 0]
	      DstBlock		      "Mux"
	      DstPort		      17
	    }
	    Line {
	      ZOrder		      141
	      SrcBlock		      "Demux"
	      SrcPort		      42
	      Points		      [55, 0]
	      DstBlock		      "xmeas42 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      143
	      SrcBlock		      "Demux"
	      SrcPort		      43
	      Points		      [55, 0]
	      DstBlock		      "xmeas43 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      63
	      SrcBlock		      "xmeas37 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      37
	    }
	    Line {
	      ZOrder		      91
	      SrcBlock		      "xmeas6 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, 15]
	      DstBlock		      "Mux"
	      DstPort		      6
	    }
	    Line {
	      ZOrder		      93
	      SrcBlock		      "xmeas13 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      13
	    }
	    Line {
	      ZOrder		      95
	      SrcBlock		      "xmeas16 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      16
	    }
	    Line {
	      ZOrder		      97
	      SrcBlock		      "xmeas18 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      18
	    }
	    Line {
	      ZOrder		      99
	      SrcBlock		      "xmeas19 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      19
	    }
	    Line {
	      ZOrder		      101
	      SrcBlock		      "xmeas20 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      20
	    }
	    Line {
	      ZOrder		      103
	      SrcBlock		      "xmeas21 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      21
	    }
	    Line {
	      ZOrder		      105
	      SrcBlock		      "xmeas22 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      22
	    }
	    Line {
	      ZOrder		      107
	      SrcBlock		      "xmeas23 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      23
	    }
	    Line {
	      ZOrder		      109
	      SrcBlock		      "xmeas24 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      24
	    }
	    Line {
	      ZOrder		      111
	      SrcBlock		      "xmeas25 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      25
	    }
	    Line {
	      ZOrder		      113
	      SrcBlock		      "xmeas26 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      26
	    }
	    Line {
	      ZOrder		      115
	      SrcBlock		      "xmeas27 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      27
	    }
	    Line {
	      ZOrder		      117
	      SrcBlock		      "xmeas28 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      28
	    }
	    Line {
	      ZOrder		      119
	      SrcBlock		      "xmeas29 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      29
	    }
	    Line {
	      ZOrder		      121
	      SrcBlock		      "xmeas30 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      30
	    }
	    Line {
	      ZOrder		      123
	      SrcBlock		      "xmeas32 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      32
	    }
	    Line {
	      ZOrder		      126
	      SrcBlock		      "xmeas33 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      33
	    }
	    Line {
	      ZOrder		      128
	      SrcBlock		      "xmeas34 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      34
	    }
	    Line {
	      ZOrder		      130
	      SrcBlock		      "xmeas35 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      35
	    }
	    Line {
	      ZOrder		      132
	      SrcBlock		      "xmeas36 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      36
	    }
	    Line {
	      ZOrder		      134
	      SrcBlock		      "xmeas38 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      38
	    }
	    Line {
	      ZOrder		      136
	      SrcBlock		      "xmeas39 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      39
	    }
	    Line {
	      ZOrder		      138
	      SrcBlock		      "xmeas40 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      40
	    }
	    Line {
	      ZOrder		      140
	      SrcBlock		      "xmeas41 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      41
	    }
	    Line {
	      ZOrder		      142
	      SrcBlock		      "xmeas42 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      42
	    }
	    Line {
	      ZOrder		      144
	      SrcBlock		      "xmeas43 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, -15]
	      DstBlock		      "Mux"
	      DstPort		      43
	    }
	  }
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "xmv atk block"
	  SID			  "665"
	  Ports			  [1, 1]
	  Position		  [925, 304, 1000, 346]
	  ZOrder		  498
	  RequestExecContextInheritance	off
	  System {
	    Name		    "xmv atk block"
	    Location		    [-1688, -250, 8, 812]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "A4"
	    PaperUnits		    "centimeters"
	    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "xmv"
	      SID		      "666"
	      Position		      [345, 453, 375, 467]
	      ZOrder		      498
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Demux
	      Name		      "Demux"
	      SID		      "671"
	      Ports		      [1, 26]
	      Position		      [440, 170, 450, 1365]
	      ZOrder		      502
	      ShowName		      off
	      Outputs		      "26"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      Mux
	      Name		      "Mux"
	      SID		      "670"
	      Ports		      [26, 1]
	      Position		      [910, 180, 920, 1365]
	      ZOrder		      501
	      ShowName		      off
	      Inputs		      "26"
	      DisplayOption	      "bar"
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv1 attack controller"
	      SID		      "672"
	      Ports		      [1, 1]
	      Position		      [565, 161, 760, 189]
	      ZOrder		      503
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1352
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1353
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1354
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1355
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1/60"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1356
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1/60"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1357
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0.5236"
		  }
		  Object {
		    $ObjectID		    1358
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1359
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1360
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1361
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1362
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1363
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1364
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1365
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1366
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1367
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1368
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1369
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1370
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1371
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1372
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1373
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1374
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv1 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "672:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "672:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1375
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1376
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1377
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1/60"
		    }
		    Object {
		    $ObjectID		    1378
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "672:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1379
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "672:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "672:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "672:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1380
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "672:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "672:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1381
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "672:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "672:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "672:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1382
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "672:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "672:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "672:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "672:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "672:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "672:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "672:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "672:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "672:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "672:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "672:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "672:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "672:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "672:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "672:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv10 attack controller"
	      SID		      "682"
	      Ports		      [1, 1]
	      Position		      [565, 565, 760, 595]
	      ZOrder		      513
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1383
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1384
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1385
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1386
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1387
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1388
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1389
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1390
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1391
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1392
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1393
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1394
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1395
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1396
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1397
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1398
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1399
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1400
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1401
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1402
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1403
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1404
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1405
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv10 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "682:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "682:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1406
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1407
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1408
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1409
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "682:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1410
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "682:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "682:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "682:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1411
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "682:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "682:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1412
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "682:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "682:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "682:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1413
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "682:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "682:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "682:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "682:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "682:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "682:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "682:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "682:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "682:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "682:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "682:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "682:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "682:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "682:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "682:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv11 attack controller"
	      SID		      "683"
	      Ports		      [1, 1]
	      Position		      [565, 615, 760, 645]
	      ZOrder		      514
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1414
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1415
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1416
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1417
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1418
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1419
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1420
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1421
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1422
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1423
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1424
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1425
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1426
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1427
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1428
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1429
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1430
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1431
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1432
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1433
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1434
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1435
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1436
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv11 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "683:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "683:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1437
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1438
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1439
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1440
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "683:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1441
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "683:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "683:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "683:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1442
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "683:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "683:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1443
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "683:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "683:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "683:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1444
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "683:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "683:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "683:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "683:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "683:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "683:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "683:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "683:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "683:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "683:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "683:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "683:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "683:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "683:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "683:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv12 attack controller"
	      SID		      "673"
	      Ports		      [1, 1]
	      Position		      [565, 661, 760, 689]
	      ZOrder		      504
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1445
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1446
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1447
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1448
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1449
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1450
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1451
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1452
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1453
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1454
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1455
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1456
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1457
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1458
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1459
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1460
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1461
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1462
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1463
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1464
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1465
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1466
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1467
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv12 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "673:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "673:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1468
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1469
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1470
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1471
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "673:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1472
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "673:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "673:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "673:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1473
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "673:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "673:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1474
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "673:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "673:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "673:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1475
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "673:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "673:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "673:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "673:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "673:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "673:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "673:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "673:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "673:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "673:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "673:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "673:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "673:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "673:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "673:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv13 attack controller"
	      SID		      "852"
	      Ports		      [1, 1]
	      Position		      [565, 706, 760, 734]
	      ZOrder		      516
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1476
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1477
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1478
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1479
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1480
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1481
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1482
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1483
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1484
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1485
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1486
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1487
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1488
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1489
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1490
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1491
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1492
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1493
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1494
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1495
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1496
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1497
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1498
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv13 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "852:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "852:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1499
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1500
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1501
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1502
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "852:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "852:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "852:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1503
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "852:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "852:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "852:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "852:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "852:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "852:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1504
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "852:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "852:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "852:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "852:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "852:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1505
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "852:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "852:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "852:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "852:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "852:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "852:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1506
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "852:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "852:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "852:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "852:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "852:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "852:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "852:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "852:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "852:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "852:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "852:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "852:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "852:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "852:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "852:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "852:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv14 attack controller"
	      SID		      "853"
	      Ports		      [1, 1]
	      Position		      [565, 756, 760, 784]
	      ZOrder		      517
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1507
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1508
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1509
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1510
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1511
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1512
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1513
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1514
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1515
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1516
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1517
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1518
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1519
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1520
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1521
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1522
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1523
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1524
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1525
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1526
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1527
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1528
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1529
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv14 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "853:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "853:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1530
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1531
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1532
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1533
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "853:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "853:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "853:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1534
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "853:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "853:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "853:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "853:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "853:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "853:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1535
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "853:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "853:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "853:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "853:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "853:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1536
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "853:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "853:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "853:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "853:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "853:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "853:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1537
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "853:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "853:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "853:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "853:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "853:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "853:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "853:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "853:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "853:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "853:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "853:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "853:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "853:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "853:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "853:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "853:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv15 attack controller"
	      SID		      "854"
	      Ports		      [1, 1]
	      Position		      [565, 801, 760, 829]
	      ZOrder		      518
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1538
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1539
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1540
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1541
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1542
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1543
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1544
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1545
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1546
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1547
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1548
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1549
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1550
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1551
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1552
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1553
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1554
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1555
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1556
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1557
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1558
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1559
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1560
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv15 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "854:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "854:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1561
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1562
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1563
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1564
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "854:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "854:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "854:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1565
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "854:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "854:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "854:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "854:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "854:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "854:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1566
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "854:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "854:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "854:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "854:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "854:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1567
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "854:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "854:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "854:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "854:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "854:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "854:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1568
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "854:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "854:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "854:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "854:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "854:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "854:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "854:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "854:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "854:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "854:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "854:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "854:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "854:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "854:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "854:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "854:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv16 attack controller"
	      SID		      "855"
	      Ports		      [1, 1]
	      Position		      [565, 851, 760, 879]
	      ZOrder		      519
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1569
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1570
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1571
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1572
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1573
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1574
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1575
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1576
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1577
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1578
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1579
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1580
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1581
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1582
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1583
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1584
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1585
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1586
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1587
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1588
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1589
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1590
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1591
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv16 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "855:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "855:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1592
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1593
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1594
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1595
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "855:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "855:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "855:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1596
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "855:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "855:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "855:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "855:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "855:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "855:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1597
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "855:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "855:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "855:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "855:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "855:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1598
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "855:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "855:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "855:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "855:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "855:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "855:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1599
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "855:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "855:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "855:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "855:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "855:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "855:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "855:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "855:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "855:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "855:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "855:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "855:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "855:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "855:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "855:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "855:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv17 attack controller"
	      SID		      "856"
	      Ports		      [1, 1]
	      Position		      [565, 896, 760, 924]
	      ZOrder		      520
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1600
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1601
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1602
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1603
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1604
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1605
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1606
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1607
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1608
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1609
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1610
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1611
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1612
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1613
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1614
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1615
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1616
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1617
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1618
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1619
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1620
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1621
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1622
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv17 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "856:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "856:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1623
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1624
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1625
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1626
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "856:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "856:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "856:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1627
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "856:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "856:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "856:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "856:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "856:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "856:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1628
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "856:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "856:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "856:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "856:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "856:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1629
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "856:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "856:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "856:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "856:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "856:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "856:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1630
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "856:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "856:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "856:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "856:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "856:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "856:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "856:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "856:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "856:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "856:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "856:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "856:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "856:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "856:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "856:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "856:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv18 attack controller"
	      SID		      "857"
	      Ports		      [1, 1]
	      Position		      [565, 941, 760, 969]
	      ZOrder		      521
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1631
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1632
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1633
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1634
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1635
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1636
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1637
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1638
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1639
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1640
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1641
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1642
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1643
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1644
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1645
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1646
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1647
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1648
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1649
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1650
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1651
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1652
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1653
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv18 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "857:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "857:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1654
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1655
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1656
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1657
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "857:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "857:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "857:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1658
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "857:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "857:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "857:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "857:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "857:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "857:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1659
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "857:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "857:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "857:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "857:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "857:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1660
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "857:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "857:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "857:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "857:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "857:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "857:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1661
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "857:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "857:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "857:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "857:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "857:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "857:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "857:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "857:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "857:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "857:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "857:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "857:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "857:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "857:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "857:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "857:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv19 attack controller"
	      SID		      "858"
	      Ports		      [1, 1]
	      Position		      [565, 986, 760, 1014]
	      ZOrder		      522
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1662
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1663
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1664
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1665
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1666
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1667
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1668
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1669
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1670
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1671
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1672
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1673
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1674
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1675
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1676
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1677
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1678
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1679
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1680
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1681
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1682
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1683
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1684
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv19 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "858:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "858:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1685
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1686
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1687
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1688
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "858:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "858:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "858:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1689
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "858:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "858:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "858:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "858:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "858:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "858:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1690
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "858:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "858:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "858:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "858:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "858:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1691
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "858:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "858:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "858:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "858:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "858:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "858:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1692
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "858:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "858:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "858:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "858:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "858:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "858:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "858:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "858:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "858:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "858:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "858:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "858:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "858:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "858:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "858:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "858:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv2 attack controller"
	      SID		      "1515"
	      Ports		      [1, 1]
	      Position		      [565, 206, 760, 234]
	      ZOrder		      534
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1693
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1694
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1695
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1696
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1697
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1698
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1699
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1700
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1701
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1702
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1703
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1704
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1705
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1706
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1707
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1708
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1709
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1710
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1711
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1712
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1713
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1714
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1715
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv2 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "1515:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "1515:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1716
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1717
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1718
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1719
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1515:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1515:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "1515:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1720
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1515:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1515:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "1515:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1515:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1515:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "1515:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1721
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1515:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1515:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "1515:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1515:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "1515:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1722
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1515:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1515:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "1515:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1515:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1515:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "1515:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1723
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "1515:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "1515:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "1515:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "1515:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1515:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "1515:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "1515:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "1515:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "1515:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "1515:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "1515:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "1515:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "1515:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "1515:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "1515:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "1515:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv20 attack controller"
	      SID		      "859"
	      Ports		      [1, 1]
	      Position		      [565, 1031, 760, 1059]
	      ZOrder		      523
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1724
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1725
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1726
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1727
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1728
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1729
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1730
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1731
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1732
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1733
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1734
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1735
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1736
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1737
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1738
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1739
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1740
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1741
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1742
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1743
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1744
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1745
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1746
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv20 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "859:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "859:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1747
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1748
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1749
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1750
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "859:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "859:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "859:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1751
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "859:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "859:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "859:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "859:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "859:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "859:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1752
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "859:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "859:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "859:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "859:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "859:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1753
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "859:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "859:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "859:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "859:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "859:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "859:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1754
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "859:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "859:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "859:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "859:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "859:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "859:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "859:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "859:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "859:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "859:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "859:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "859:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "859:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "859:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "859:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "859:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv21 attack controller"
	      SID		      "860"
	      Ports		      [1, 1]
	      Position		      [565, 1076, 760, 1104]
	      ZOrder		      524
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1755
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1756
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1757
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1758
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1759
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1760
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1761
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1762
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1763
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1764
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1765
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1766
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1767
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1768
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1769
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1770
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1771
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1772
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1773
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1774
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1775
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1776
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1777
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv21 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "860:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "860:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1778
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1779
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1780
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1781
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "860:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "860:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "860:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1782
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "860:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "860:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "860:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "860:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "860:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "860:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1783
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "860:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "860:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "860:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "860:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "860:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1784
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "860:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "860:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "860:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "860:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "860:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "860:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1785
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "860:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "860:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "860:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "860:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "860:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "860:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "860:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "860:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "860:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "860:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "860:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "860:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "860:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "860:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "860:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "860:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv22 attack controller"
	      SID		      "861"
	      Ports		      [1, 1]
	      Position		      [565, 1121, 760, 1149]
	      ZOrder		      525
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1786
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1787
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1788
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1789
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1790
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1791
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1792
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1793
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1794
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1795
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1796
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1797
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1798
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1799
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1800
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1801
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1802
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1803
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1804
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1805
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1806
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1807
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1808
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv22 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "861:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "861:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1809
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1810
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1811
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1812
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "861:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "861:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "861:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1813
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "861:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "861:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "861:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "861:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "861:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "861:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1814
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "861:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "861:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "861:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "861:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "861:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1815
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "861:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "861:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "861:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "861:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "861:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "861:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1816
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "861:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "861:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "861:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "861:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "861:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "861:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "861:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "861:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "861:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "861:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "861:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "861:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "861:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "861:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "861:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "861:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv23 attack controller"
	      SID		      "862"
	      Ports		      [1, 1]
	      Position		      [565, 1166, 760, 1194]
	      ZOrder		      526
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1817
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1818
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1819
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1820
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1821
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1822
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1823
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1824
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1825
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1826
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1827
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1828
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1829
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1830
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1831
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1832
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1833
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1834
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1835
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1836
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1837
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1838
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1839
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv23 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "862:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "862:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1840
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1841
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1842
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1843
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "862:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "862:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "862:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1844
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "862:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "862:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "862:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "862:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "862:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "862:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1845
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "862:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "862:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "862:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "862:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "862:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1846
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "862:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "862:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "862:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "862:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "862:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "862:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1847
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "862:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "862:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "862:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "862:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "862:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "862:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "862:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "862:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "862:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "862:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "862:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "862:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "862:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "862:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "862:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "862:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv24 attack controller"
	      SID		      "863"
	      Ports		      [1, 1]
	      Position		      [565, 1216, 760, 1244]
	      ZOrder		      527
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1848
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1849
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1850
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1851
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1852
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1853
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1854
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1855
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1856
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1857
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1858
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1859
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1860
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1861
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1862
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1863
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1864
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1865
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1866
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1867
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1868
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1869
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1870
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv24 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "863:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "863:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1871
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1872
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1873
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1874
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "863:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "863:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "863:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1875
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "863:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "863:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "863:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "863:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "863:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "863:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1876
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "863:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "863:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "863:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "863:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "863:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1877
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "863:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "863:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "863:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "863:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "863:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "863:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1878
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "863:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "863:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "863:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "863:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "863:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "863:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "863:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "863:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "863:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "863:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "863:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "863:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "863:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "863:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "863:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "863:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv25 attack controller"
	      SID		      "864"
	      Ports		      [1, 1]
	      Position		      [565, 1271, 760, 1299]
	      ZOrder		      528
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1879
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1880
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1881
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1882
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1883
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1884
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1885
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1886
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1887
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1888
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1889
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1890
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1891
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1892
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1893
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1894
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1895
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1896
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1897
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1898
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1899
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1900
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1901
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv25 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "864:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "864:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1902
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1903
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1904
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1905
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "864:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "864:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "864:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1906
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "864:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "864:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "864:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "864:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "864:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "864:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1907
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "864:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "864:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "864:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "864:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "864:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1908
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "864:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "864:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "864:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "864:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "864:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "864:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1909
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "864:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "864:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "864:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "864:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "864:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "864:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "864:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "864:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "864:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "864:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "864:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "864:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "864:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "864:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "864:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "864:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv26 attack controller"
	      SID		      "865"
	      Ports		      [1, 1]
	      Position		      [565, 1321, 760, 1349]
	      ZOrder		      529
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1910
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1911
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1912
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1913
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1914
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1915
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1916
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1917
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1918
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1919
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1920
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1921
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1922
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1923
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1924
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1925
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1926
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1927
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1928
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1929
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1930
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1931
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1932
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv26 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "865:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "865:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1933
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1934
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1935
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1936
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "865:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "865:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "865:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1937
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "865:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "865:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "865:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "865:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "865:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "865:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1938
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "865:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "865:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "865:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "865:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "865:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1939
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "865:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "865:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "865:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "865:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "865:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "865:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1940
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "865:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "865:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "865:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "865:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "865:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "865:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "865:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "865:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "865:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "865:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "865:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "865:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "865:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "865:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "865:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "865:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv3 attack controller"
	      SID		      "851"
	      Ports		      [1, 1]
	      Position		      [565, 251, 760, 279]
	      ZOrder		      515
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1941
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1942
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1943
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1944
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0.5"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1945
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "0.5"
		  }
		  Object {
		    $ObjectID		    1946
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "10"
		  }
		  Object {
		    $ObjectID		    1947
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1948
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1949
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1950
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1951
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1952
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1953
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1954
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1955
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1956
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1957
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1958
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1959
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1960
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1961
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1962
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1963
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv3 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "851:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "851:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1964
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1965
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1966
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "0.5"
		    }
		    Object {
		    $ObjectID		    1967
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "851:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "851:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "851:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1968
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "851:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "851:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "851:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    LibraryVersion	    "1.242"
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "851:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "851:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "851:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1969
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "851:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "851:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "851:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "851:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "851:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1970
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "851:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "851:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "851:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "851:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "851:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "851:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1971
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "851:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "851:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "851:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "851:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "851:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "851:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "851:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "851:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "851:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "851:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "851:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "851:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "851:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "851:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "851:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "851:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv4 attack controller"
	      SID		      "676"
	      Ports		      [1, 1]
	      Position		      [565, 296, 760, 324]
	      ZOrder		      507
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		1972
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    1973
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    1974
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    1975
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1976
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    1977
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    1978
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    1979
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    1980
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    1981
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1982
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    1983
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    1984
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    1985
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    1986
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    1987
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    1988
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    1989
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    1990
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    1991
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    1992
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    1993
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    1994
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv4 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "676:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "676:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1995
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    1996
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    1997
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    1998
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "676:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    1999
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "676:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "676:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "676:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2000
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "676:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "676:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2001
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "676:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "676:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "676:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2002
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "676:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "676:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "676:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "676:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "676:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "676:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "676:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "676:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "676:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "676:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "676:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "676:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "676:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "676:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "676:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv5 attack controller"
	      SID		      "677"
	      Ports		      [1, 1]
	      Position		      [565, 340, 760, 370]
	      ZOrder		      508
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		2003
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    2004
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    2005
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    2006
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2007
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    2008
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    2009
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2010
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    2011
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    2012
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2013
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    2014
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    2015
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    2016
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    2017
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    2018
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    2019
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    2020
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2021
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    2022
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    2023
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    2024
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    2025
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv5 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "677:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "677:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2026
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    2027
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    2028
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    2029
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "677:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2030
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "677:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "677:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "677:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2031
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "677:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "677:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2032
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "677:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "677:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "677:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2033
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "677:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "677:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "677:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "677:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "677:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "677:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "677:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "677:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "677:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "677:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "677:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "677:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "677:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "677:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "677:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv6 attack controller"
	      SID		      "678"
	      Ports		      [1, 1]
	      Position		      [565, 386, 760, 414]
	      ZOrder		      509
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		2034
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    2035
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    2036
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    2037
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2038
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    2039
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    2040
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2041
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    2042
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    2043
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2044
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    2045
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    2046
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    2047
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    2048
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    2049
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    2050
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    2051
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2052
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    2053
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    2054
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    2055
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    2056
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv6 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "678:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "678:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2057
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    2058
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    2059
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    2060
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "678:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2061
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "678:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "678:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "678:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2062
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "678:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "678:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2063
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "678:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "678:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "678:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2064
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "678:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "678:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "678:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "678:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "678:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "678:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "678:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "678:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "678:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "678:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "678:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "678:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "678:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "678:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "678:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv7 attack controller"
	      SID		      "679"
	      Ports		      [1, 1]
	      Position		      [565, 431, 760, 459]
	      ZOrder		      510
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		2065
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    2066
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    2067
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    2068
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2069
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    2070
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "135"
		  }
		  Object {
		    $ObjectID		    2071
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2072
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    2073
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    2074
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2075
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    2076
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    2077
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    2078
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    2079
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    2080
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    2081
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    2082
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2083
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    2084
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    2085
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    2086
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    2087
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv7 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "679:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "679:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2088
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    2089
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    2090
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    2091
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "679:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2092
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "679:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    LibraryVersion	    "1.242"
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "679:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "679:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2093
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "679:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "679:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2094
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "679:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "679:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "679:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2095
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "679:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "679:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "679:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "679:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "679:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "679:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "679:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "679:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "679:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "679:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "679:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "679:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "679:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "679:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "679:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv8 attack controller"
	      SID		      "680"
	      Ports		      [1, 1]
	      Position		      [565, 476, 760, 504]
	      ZOrder		      511
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		2096
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    2097
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    2098
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    2099
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2100
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    2101
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    2102
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2103
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    2104
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    2105
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2106
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    2107
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    2108
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    2109
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    2110
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    2111
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    2112
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    2113
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2114
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    2115
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    2116
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    2117
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    2118
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv8 attack controller"
		Location		[-1688, -258, 8, 808]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "680:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "680:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2119
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    2120
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    2121
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    2122
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "680:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2123
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "680:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "680:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "680:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2124
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "680:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "680:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2125
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "680:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "680:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "680:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2126
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "680:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "680:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "680:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "680:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "680:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "680:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "680:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "680:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "680:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "680:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "680:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "680:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "680:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "680:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "680:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      SubSystem
	      Name		      "xmv9 attack controller"
	      SID		      "681"
	      Ports		      [1, 1]
	      Position		      [565, 521, 760, 549]
	      ZOrder		      512
	      AncestorBlock	      "VAlib/Attack Controller"
	      LibraryVersion	      "*1.242"
	      RequestExecContextInheritance off
	      Object {
		$PropName		"MaskObject"
		$ObjectID		2127
		$ClassName		"Simulink.Mask"
		Type			"Attack controller"
		Description		"Attack controller block controls an attack on choosen variable on the specified time.\nAttack types: D"
		"oS, Integrity and custom signal attack.\nModes: Step attack on specified time, Interval to specified time, Periodic "
		"and no attack.\n"
		SelfModifiable		"on"
		Display			"disp([get_param(gcb, 'switch_mode') '\\n' get_param(gcb, 'atkMode')])\nport_label('input', 1, 'signal in'"
		")\nport_label('output', 1, 'signal out')"
		Array {
		  Type			  "Simulink.MaskParameter"
		  Dimension		  8
		  Object {
		    $ObjectID		    2128
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    3
		    Cell		    "Integrity attack"
		    Cell		    "DOS attack"
		    Cell		    "Custom attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "switch_mode"
		    Prompt		    "Attack Type:"
		    Value		    "Integrity attack"
		    Callback		    "SM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'switch_mode')\n    case '"
		    "Integrity attack'\n        set_param([gcb,'/Switch value'], 'Value', '1');\n        SM_MaskEnables{5} = 'on';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';\n        SM_MaskEnables{8} = 'off';\n    c"
		    "ase 'DOS attack'\n        set_param([gcb,'/Switch value'], 'Value', '3');\n        SM_MaskEnables{5} = 'off';\n "
		    "       SM_MaskEnables{6} = 'off';\n        SM_MaskEnables{7} = 'off';  \n        SM_MaskEnables{8} = 'off';\n   "
		    " case 'Custom attack'\n        set_param([gcb,'/Switch value'], 'Value', '2');\n        SM_MaskEnables{5} = 'off"
		    "';\n        SM_MaskEnables{6} = 'on';\n        SM_MaskEnables{7} = 'on';\n        SM_MaskEnables{8} = 'on';\nend"
		    "\nset_param(gcb,'MaskEnables',SM_MaskEnables);\nclear SM_MaskEnables;\n\n% creat or remove block for custom atta"
		    "ck\nif strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && ~exists_block([gcb '/SignalIn']) % creat block"
		    "\n    if exists_block([gcb, '/ReplaceBlock']);\n        delete_line(gcb, 'ReplaceBlock/1', 'Multiport Switch/3')"
		    ";\n        delete_block([gcb '/ReplaceBlock']);\n    end\n    \n    add_block('built-in/FromWorkspace', [gcb '/S"
		    "ignalIn'], 'Position', [50 400 120 430]);\n    add_line(gcb, 'SignalIn/1', 'Multiport Switch/3', 'autorouting', "
		    "'on');\n    %set params\n    set_param([gcb '/SignalIn'], 'SampleTime', '0');\n    %set_param([gcb '/SignalIn'],"
		    " 'VariableName', '[]');\n    set_param([gcb '/SignalIn'], 'Interpolate', 'on');\n    set_param([gcb '/SignalIn']"
		    ", 'ZeroCross', 'off'); \n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Setting to zero');\n    %set_p"
		    "aram([gcb '/' name], 'OutputAfterFinalValue', 'Cyclic repetition');\n    %set_param([gcb '/' name], 'OutputAfter"
		    "FinalValue', 'Extrapolation');\n    %set_param([gcb '/' name], 'OutputAfterFinalValue', 'Holding final value');\n"
		    "\n    % forward signal parameters if set\n    SW_signal = get_param(gcb, 'signalin');\n    if strcmp(SW_signal, "
		    "'[]') || strcmp(SW_signal, '') % signal not set\n        set_param(gcb, 'signalin', '[]');\n        set_param([g"
		    "cb '/SignalIn'], 'VariableName', '[]');\n        clear SW_signal;\n        return;\n    else    % signal set\n  "
		    "      % check signal\n        if ~exist(SW_signal)\n            set_param(gcb, 'signalin', '[]');\n            s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');            \n            warning(['Variable ' SW_signal ' not"
		    " found.']);\n            clear SW_signal;\n            return;\n        end\n        SW_signal = evalin('base', "
		    "SW_signal);\n        if ~isvector(SW_signal)\n            set_param(gcb, 'signalin', '');\n            set_param"
		    "([gcb '/SignalIn'], 'VariableName', '[]'); \n            warning(['Variable ' SW_signal ' must be a vector.']);\n"
		    "            clear SW_signal;\n            return;\n        end\n        SW_stime = str2num(get_param(gcb, 'stime"
		    "'));\n        if isempty(SW_stime) || SW_stime < -1 || (SW_stime < 0 && SW_stime > -1)\n            set_param(gc"
		    "b, 'stime', '-1');\n            SW_stime = -1;\n            warning('Sample time must be a positive double or -1"
		    " for inherited value.');\n        end\n\n        if SW_stime == 0 || SW_stime == -1\n            SW_stime = eval"
		    "in('base', 'Ts_base');\n        end\n\n        SW_start = str2num(get_param(gcb, 'start'));\n        SW_start = "
		    "SW_stime * ceil(SW_start/SW_stime);\n        signalstruct.time = SW_start:SW_stime:(SW_stime*(length(SW_signal) "
		    "- 1) + SW_start);\n        signalstruct.signals.values = SW_signal;\n		\n		if strcmp(get_param(gcb, 'afterend'),"
		    " 'Cyclic repetition')\n			SW_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruct.time(end) < SW"
		    "_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n				signalst"
		    "ruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n			end\n		end\n"
		    "		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = signalstruct.time(:);"
		    "\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'], 'VariableName', "
		    "'signalstruct');\n    end\n\n    clear SW_signal;\n	clear SW_start;\n    clear SW_stime;\n	clear SW_end;\nelseif"
		    " ~strcmpi(get_param(gcb, 'switch_mode'), 'Custom attack') && exists_block([gcb '/SignalIn']) % delete block \n  "
		    "  delete_line(gcb, 'SignalIn/1', 'Multiport Switch/3');\n    delete_block([gcb '/SignalIn']);\n    % replace wit"
		    "h constant value\n    add_block(['built-in/Constant'], [gcb '/ReplaceBlock'], 'Position', [50 400 120 430]);\n  "
		    "  add_line(gcb, ['ReplaceBlock/1'], 'Multiport Switch/3', 'autorouting', 'on');\nend"
		  }
		  Object {
		    $ObjectID		    2129
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/atkMode"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "AM_MaskEnables = get_param(gcb, 'MaskEnables');\nswitch get_param(gcb, 'atkMode');\n    case 'No "
		    "attack'\n        AM_MaskEnables{3} = 'off';\n        AM_MaskEnables{4} = 'off';\n    case 'Step attack'\n       "
		    " AM_MaskEnables{3} = 'on';\n        AM_MaskEnables{4} = 'off';\n    otherwise\n        AM_MaskEnables{3} = 'on';"
		    "\n        AM_MaskEnables{4} = 'on';\nend\nset_param(gcb, 'MaskEnables', AM_MaskEnables);\n\nclear AM_MaskEnables"
		    ";"
		  }
		  Object {
		    $ObjectID		    2130
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    Enabled		    "off"
		    Callback		    "SS_start = get_param(gcb, 'start');\nif strcmp(SS_start, '') % empty\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\nend\nSS_start = str2num(SS_start);\nif isempty(SS_start)\n    set_param(gcb, 'start',"
		    " '0');\n    SS_start = 0;\n    warning('Parameter value must be a nimeric value.');\nend\n\n% set to the subsyst"
		    "em\nset_param([gcb '/Attack Type Controller'], 'start', get_param(gcb, 'start'));\n\n% get correct signal parame"
		    "ters\nif strcmpi(get_param(gcb, 'switch_mode'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n      "
		    "  clear SS_start;\n        return\n    end\n    % forward signal parameters if set\n    SS_signal = get_param(gc"
		    "b, 'signalin');\n    if strcmp(SS_signal, '[]') || strcmp(SS_signal, '') % signal not set\n        clear SS_sign"
		    "al;\n        clear SS_start;\n        return;\n    else    % signal set\n        SS_signal = evalin('base', SS_s"
		    "ignal);\n        SS_stime = str2num(get_param(gcb, 'stime'));\n        if isempty(SS_stime) || SS_stime < -1 || "
		    "(SS_stime < 0 && SS_stime > -1)\n            clear SS_signal;\n            clear SS_start;\n            set_para"
		    "m(gcb, 'stime', '-1');\n            SS_stime = -1;\n            warning('Sample time must be a positve double or"
		    " -1 for inherited value.')\n        end\n\n        if SS_stime == 0 || SS_stime == -1\n            SS_stime = ev"
		    "alin('base', 'Ts_base');\n        end\n        \n		\n        signalstruct.time = SS_start:SS_stime:(SS_stime*(le"
		    "ngth(SS_signal) - 1) + SS_start);\n        signalstruct.signals.values = SS_signal;\n		\n		if strcmp(get_param(g"
		    "cb, 'afterend'), 'Cyclic repetition')\n			SS_end = str2double(get_param(gcr, 'StopTime'));\n			while signalstruc"
		    "t.time(end) < SS_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.values"
		    "];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];"
		    "\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time = sign"
		    "alstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/SignalIn'],"
		    " 'VariableName', 'signalstruct');\n		clear SS_signal;\n		clear SS_start;\n		clear SS_stime;\n		clear SS_end;\n  "
		    "  end\n\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2131
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Attack Type Controller/duration"
		    PropName		    "TypeOptions"
		    }
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "1"
		    Enabled		    "off"
		  }
		  Object {
		    $ObjectID		    2132
		    Type		    "promote"
		    Array {
		    Type		    "Cell"
		    Dimension		    1
		    Cell		    "Integrity attack value/Value"
		    PropName		    "TypeOptions"
		    }
		    Name		    "Value"
		    Prompt		    "Integrity Attack Value:"
		    Value		    "0"
		  }
		  Object {
		    $ObjectID		    2133
		    Type		    "edit"
		    Name		    "signalin"
		    Prompt		    "Signal variable:"
		    Value		    "[]"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return;\nend\n\n% forward signal parameters if set\nSI_s"
		    "ignal = get_param(gcb, 'signalin');\nif strcmp(SI_signal, '[]') || strcmp(SI_signal, '') % signal not set\n    s"
		    "et_param([gcb '/SignalIn'], 'VariableName', '[]');\n    set_param(gcb, 'signalin', '[]');\n    clear SI_signal;\n"
		    "else\n    if ~exist(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], "
		    "'VariableName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' not fou"
		    "nd.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_signal = evalin('base', SI_signal);\n    i"
		    "f ~isvector(SI_signal)\n        set_param(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'Variabl"
		    "eName', '[]');\n        warning('VAC:AttackController:Signal variable', ['Variable ' SI_signal ' must be a vecto"
		    "r.']);\n        clear SI_signal;\n        return;\n    end\n\n    SI_stime = str2num(get_param(gcb, 'stime'));\n"
		    "    if isempty(SI_stime) || SI_stime < -1 || (SI_stime < 0 && SI_stime > -1)\n        set_param(gcb, 'stime', '-"
		    "1');\n        SI_stime = -1;\n        warning('VAC:AttackController:Signal variable', 'Sample time must be a pos"
		    "itive double or -1 for inherited value.');\n    end\n\n    if SI_stime == 0 || SI_stime == -1\n        SI_stime "
		    "= evalin('base', 'Ts_base');\n    end\n	\n	SI_start = str2double(get_param(gcb, 'start'));\n	SI_start = SI_stime"
		    " * ceil(SI_start/SI_stime);\n	signalstruct.time = SI_start:SI_stime:(SI_stime*(length(SI_signal) - 1) + SI_start"
		    ");\n	signalstruct.signals.values = SI_signal;\n    \n    if strcmp(get_param(gcb, 'afterend'), 'Cyclic repetitio"
		    "n')\n		SI_end = str2double(get_param(gcr, 'StopTime'));\n		while signalstruct.time(end) < SI_end\n			signalstruc"
		    "t.signals.values = [signalstruct.signals.values signalstruct.signals.values];\n			signalstruct.time = [signalstr"
		    "uct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1))];\n		end\n	end\n    \n	signalstruct.sig"
		    "nals.values = signalstruct.signals.values(:);\n	signalstruct.time = signalstruct.time(:);\n    %assignin('base',"
		    " 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'], 'VariableName', 'signalstruct');\n	clear SI_sti"
		    "me;\n	clear SI_start;\n	clear SI_signal;\n	clear SI_end;\nend\n\n"
		  }
		  Object {
		    $ObjectID		    2134
		    Type		    "edit"
		    Name		    "stime"
		    Prompt		    "Sample time:"
		    Value		    "-1"
		    Enabled		    "off"
		    Callback		    "SQ_stime = get_param(gcb, 'stime');\nif strcmp(SQ_stime, '') % empty\n    set_param(gcb, 'stime',"
		    " '-1');\n    SQ_stime = -1;\nend\nSQ_stime = str2num(SQ_stime);\nif isempty(SQ_stime)\n    set_param(gcb, 'stime"
		    "', '-1');\n    SQ_stime = -1;\n    warning('VAC:AttackController:Sample time','Sample time must be a positve dou"
		    "ble or -1 for inherited value.')\nend\n\n% get correct signal parameters\nif strcmpi(get_param(gcb, 'switch_mode"
		    "'),'custom attack')\n    if ~exists_block([gcb '/SignalIn'])\n        clear SS_start;\n        return\n    end\n"
		    "    % forward signal parameters if set\n    SQ_signal = get_param(gcb, 'signalin');\n    if strcmp(SQ_signal, '["
		    "]') || strcmp(SQ_signal, '') % signal not set\n        clear SQ_signal;\n        clear SQ_stime;\n        return"
		    ";\n    else    % signal set\n        SQ_signal = evalin('base', SQ_signal);\n        if SQ_stime == 0 || SQ_stim"
		    "e == -1\n            SQ_stime = evalin('base', 'Ts_base');\n        end\n\n		SQ_start = str2double(get_param(gcb"
		    ", 'start'));\n		SQ_start = SQ_stime * ceil(SQ_start/SQ_stime);\n		signalstruct.time = SQ_start:SQ_stime:(SQ_stim"
		    "e*(length(SQ_signal) - 1) + SQ_start);\n        signalstruct.signals.values = SQ_signal;\n		\n		if strcmp(get_pa"
		    "ram(gcb, 'afterend'), 'Cyclic repetition')\n			SQ_end = str2double(get_param(gcr, 'StopTime'));\n			while signal"
		    "struct.time(end) < SQ_end\n				signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.v"
		    "alues];\n				signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time("
		    "1))];\n			end\n		end\n		\n		signalstruct.signals.values = signalstruct.signals.values(:);\n		signalstruct.time ="
		    " signalstruct.time(:);\n        %assignin('base', 'signalstruct', signalstruct)\n        set_param([gcb '/Signal"
		    "In'], 'VariableName', 'signalstruct');\n    end\n	clear SQ_signal;\n	clear SQ_start;\n	clear SQ_stime;\n	clear S"
		    "Q_end;\nend\n"
		  }
		  Object {
		    $ObjectID		    2135
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "Extrapolation"
		    Cell		    "Setting to zero"
		    Cell		    "Holding final value"
		    Cell		    "Cyclic repetition"
		    PropName		    "TypeOptions"
		    }
		    Name		    "afterend"
		    Prompt		    "Output after final:"
		    Value		    "Holding final value"
		    Enabled		    "off"
		    Callback		    "if ~exists_block([gcb '/SignalIn'])\n    return\nend\n\n% forward choosen value\nif ~strcmp(get_p"
		    "aram(gcb, 'afterend'), 'Cyclic repetition')\n	set_param([gcb '/SignalIn'], 'OutputAfterFinalValue', get_param(gc"
		    "b, 'afterend'));\nend\n\n% forward signal parameters if set\nSA_signal = get_param(gcb, 'signalin');\nif strcmp("
		    "SA_signal, '[]') || strcmp(SA_signal, '') % signal not set\n    set_param([gcb '/SignalIn'], 'VariableName', '[]"
		    "');\n    set_param(gcb, 'signalin', '[]');\n    clear SA_signal;\nelse\n    if ~exist(SA_signal)\n        set_pa"
		    "ram(gcb, 'signalin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:A"
		    "ttackController:After end', ['Variable ' SA_signal ' not found.']);\n        clear SA_signal;\n        return;\n"
		    "    end\n\n    SA_signal = evalin('base', SA_signal);\n    if ~isvector(SA_signal)\n        set_param(gcb, 'sign"
		    "alin', '[]');\n        set_param([gcb '/SignalIn'], 'VariableName', '[]');\n        warning('VAC:AttackControlle"
		    "r:After end', ['Variable ' SA_signal ' must be a vector.']);\n        clear SA_signal;\n        return;\n    end"
		    "\n\n    SA_stime = str2num(get_param(gcb, 'stime'));\n    if isempty(SA_stime) || SA_stime < -1 || (SA_stime < 0"
		    " && SA_stime > -1)\n        set_param(gcb, 'stime', '-1');\n        SA_stime = -1;\n        warning('VAC:AttackC"
		    "ontroller:After end', 'Sample time must be a positive double or -1 for inherited value.');\n    end\n\n    if SA"
		    "_stime == 0 || SA_stime == -1\n        SA_stime = evalin('base', 'Ts_base');\n    end\n\n	SA_start = str2double("
		    "get_param(gcb, 'start'));\n	SA_start = SA_stime * ceil(SA_start/SA_stime);\n	signalstruct.time = SA_start:SA_sti"
		    "me:(SA_stime*(length(SA_signal) - 1) + SA_start);\n	signalstruct.signals.values = SA_signal;\n	\n	if strcmp(get_"
		    "param(gcb, 'afterend'), 'Cyclic repetition')\n		SA_end = str2double(get_param(gcr, 'StopTime'));\n		while signal"
		    "struct.time(end) < SA_end\n			signalstruct.signals.values = [signalstruct.signals.values signalstruct.signals.va"
		    "lues];\n			signalstruct.time = [signalstruct.time signalstruct.time+(signalstruct.time(end)-signalstruct.time(1)"
		    ")];\n		end\n    end\n       \n    signalstruct.time = signalstruct.time(:);\n	signalstruct.signals.values = sign"
		    "alstruct.signals.values(:);\n    %assignin('base', 'signalstruct', signalstruct)\n    set_param([gcb '/SignalIn'"
		    "], 'VariableName', 'signalstruct');\n	\n	clear SA_stime;\n	clear SA_start;\n	clear SA_signal;\n	clear SA_end;\ne"
		    "nd\n\n"
		  }
		  PropName		  "Parameters"
		}
		Array {
		  Type			  "Simulink.dialog.Container"
		  Dimension		  2
		  Object {
		    $ObjectID		    2136
		    $ClassName		    "Simulink.dialog.Group"
		    Prompt		    "%<MaskType>"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2137
		    $ClassName		    "Simulink.dialog.Text"
		    Prompt		    "%<MaskDescription>"
		    Name		    "DescTextVar"
		    }
		    Name		    "DescGroupVar"
		  }
		  Object {
		    $ObjectID		    2138
		    $ClassName		    "Simulink.dialog.TabContainer"
		    Array {
		    Type		    "Simulink.dialog.Tab"
		    Dimension		    3
		    Object {
		    $ObjectID		    2139
		    Prompt		    "General"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    4
		    Object {
		    $ObjectID		    2140
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "switch_mode"
		    }
		    Object {
		    $ObjectID		    2141
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    PromptLocation	    "top"
		    Name		    "atkMode"
		    }
		    Object {
		    $ObjectID		    2142
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "start"
		    }
		    Object {
		    $ObjectID		    2143
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "duration"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar0"
		    }
		    Object {
		    $ObjectID		    2144
		    Prompt		    "Integrity"
		    Object {
		    $PropName		    "DialogControls"
		    $ObjectID		    2145
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "Value"
		    }
		    Name		    "ParameterTabVar01"
		    }
		    Object {
		    $ObjectID		    2146
		    Prompt		    "Custom"
		    Array {
		    Type		    "Simulink.dialog.parameter.Control"
		    Dimension		    3
		    Object {
		    $ObjectID		    2147
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "signalin"
		    }
		    Object {
		    $ObjectID		    2148
		    $ClassName		    "Simulink.dialog.parameter.Edit"
		    Name		    "stime"
		    }
		    Object {
		    $ObjectID		    2149
		    $ClassName		    "Simulink.dialog.parameter.Popup"
		    Name		    "afterend"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabVar012"
		    }
		    PropName		    "DialogControls"
		    }
		    Name		    "ParameterTabContainerVar"
		  }
		  PropName		  "DialogControls"
		}
	      }
	      System {
		Name			"xmv9 attack controller"
		Location		[-1688, -250, 8, 812]
		Open			off
		ModelBrowserVisibility	off
		ModelBrowserWidth	200
		ScreenColor		"white"
		PaperOrientation	"landscape"
		PaperPositionMode	"auto"
		PaperType		"A4"
		PaperUnits		"centimeters"
		TiledPaperMargins	[1.270000, 1.270000, 1.270000, 1.270000]
		TiledPageScale		1
		ShowPageBoundaries	off
		ZoomFactor		"100"
		SIDHighWatermark	"942"
		SIDPrevWatermark	"942"
		Block {
		  BlockType		  Inport
		  Name			  "input"
		  SID			  "681:275"
		  Position		  [245, 133, 275, 147]
		  ZOrder		  68
		  IconDisplay		  "Port number"
		}
		Block {
		  BlockType		  SubSystem
		  Name			  "Attack Type Controller"
		  SID			  "681:276"
		  Ports			  [2, 1]
		  Position		  [345, 151, 460, 224]
		  ZOrder		  60
		  RequestExecContextInheritance	off
		  Variant		  on
		  OverrideUsingVariant	  "normal_forward_controller"
		  Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2150
		    $ClassName		    "Simulink.Mask"
		    Display		    "eval(get_param([gcb '/' strrep(get_param(gcb, 'ActiveVariant'), '_', ' ')], 'MaskDisplay'));"
		    Array {
		    Type		    "Simulink.MaskParameter"
		    Dimension		    3
		    Object {
		    $ObjectID		    2151
		    Type		    "popup"
		    Array {
		    Type		    "Cell"
		    Dimension		    4
		    Cell		    "No attack"
		    Cell		    "Step attack"
		    Cell		    "Interval attack"
		    Cell		    "Periodical attack"
		    PropName		    "TypeOptions"
		    }
		    Name		    "atkMode"
		    Prompt		    "Attack Mode:"
		    Value		    "No attack"
		    Callback		    "switch get_param(gcb,'atkMode');\n    case 'Step attack'\n        set_param(gcb, 'OverrideUsingVa"
		    "riant', 'step_forward_controller');\n    case 'Interval attack'\n        set_param(gcb, 'OverrideUsingVariant', "
		    "'interval_forward_controller');\n    case 'Periodical attack'\n        set_param(gcb, 'OverrideUsingVariant', 'p"
		    "eriodical_forward_controller');\n    otherwise\n        set_param(gcb, 'OverrideUsingVariant', 'normal_forward_c"
		    "ontroller');\nend"
		    }
		    Object {
		    $ObjectID		    2152
		    Type		    "edit"
		    Name		    "start"
		    Prompt		    "Start:"
		    Value		    "1"
		    }
		    Object {
		    $ObjectID		    2153
		    Type		    "edit"
		    Name		    "duration"
		    Prompt		    "Duration:"
		    Value		    "duration"
		    }
		    PropName		    "Parameters"
		    }
		  }
		  System {
		    Name		    "Attack Type Controller"
		    Location		    [0, 0, 1280, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:277"
		    Position		    [60, 163, 90, 177]
		    ZOrder		    -1
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:278"
		    Position		    [60, 198, 90, 212]
		    ZOrder		    27
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "interval forward controller"
		    SID			    "681:279"
		    Ports		    [2, 1]
		    Position		    [195, 309, 310, 376]
		    ZOrder		    25
		    RequestExecContextInheritance off
		    VariantControl	    "interval_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2154
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('IFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "interval forward controller"
		    Location		    [-8, 0, 1288, 786]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:280"
		    Position		    [110, 358, 175, 392]
		    ZOrder		    4
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:281"
		    Position		    [110, 202, 175, 238]
		    ZOrder		    2
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Reference
		    Name		    "Impuls"
		    SID			    "681:282"
		    Ports		    [0, 1]
		    Position		    [105, 265, 180, 305]
		    ZOrder		    35
		    SourceBlock		    "VAlib/Impuls"
		    SourceType		    ""
		    ContentPreviewEnabled   off
		    amplitude		    "1"
		    duration		    "duration"
		    delay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "681:283"
		    Position		    [275, 242, 335, 328]
		    ZOrder		    10
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:284"
		    Position		    [410, 278, 465, 302]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Impuls"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "normal forward controller"
		    SID			    "681:285"
		    Ports		    [2, 1]
		    Position		    [195, 99, 310, 166]
		    ZOrder		    23
		    RequestExecContextInheritance off
		    VariantControl	    "normal_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2155
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('NFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "normal forward controller"
		    Location		    [0, 0, 640, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:286"
		    Position		    [20, 23, 50, 37]
		    ZOrder		    2
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:287"
		    Position		    [20, 68, 50, 82]
		    ZOrder		    4
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Terminator
		    Name		    "Terminator"
		    SID			    "681:288"
		    Position		    [100, 65, 120, 85]
		    ZOrder		    5
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:289"
		    Position		    [220, 23, 250, 37]
		    ZOrder		    3
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "faked"
		    SrcPort		    1
		    DstBlock		    "Terminator"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "normal"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "periodical forward controller"
		    SID			    "681:290"
		    Ports		    [2, 1]
		    Position		    [195, 423, 310, 492]
		    ZOrder		    26
		    RequestExecContextInheritance off
		    VariantControl	    "periodical_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2156
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('PFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "periodical forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:291"
		    Position		    [155, 358, 185, 372]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:292"
		    Position		    [155, 173, 185, 187]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    DiscretePulseGenerator
		    Name		    "Pulse\nGenerator"
		    SID			    "681:293"
		    Ports		    [0, 1]
		    Position		    [155, 259, 185, 291]
		    ZOrder		    41
		    PulseType		    "Time based"
		    Period		    "duration + start"
		    PulseWidth		    "100*duration/(duration + start)"
		    PhaseDelay		    "start"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "681:294"
		    Position		    [295, 232, 355, 318]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:295"
		    Position		    [430, 268, 460, 282]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Pulse\nGenerator"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [52, 0; 0, -60]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [50, 0; 0, 65]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    SubSystem
		    Name		    "step forward controller"
		    SID			    "681:296"
		    Ports		    [2, 1]
		    Position		    [195, 199, 310, 266]
		    ZOrder		    24
		    RequestExecContextInheritance off
		    VariantControl	    "step_forward_controller"
		    Object {
		    $PropName		    "MaskObject"
		    $ObjectID		    2157
		    $ClassName		    "Simulink.Mask"
		    Display		    "disp('SFC')\nport_label('input', 1, 'normal in')\nport_label('input', 2, 'faked in')\nport_label('"
		    "output', 1, 'out')"
		    }
		    System {
		    Name		    "step forward controller"
		    Location		    [0, 0, 628, 770]
		    Open		    off
		    ModelBrowserVisibility  off
		    ModelBrowserWidth	    200
		    ScreenColor		    "white"
		    PaperOrientation	    "landscape"
		    PaperPositionMode	    "auto"
		    PaperType		    "A4"
		    PaperUnits		    "centimeters"
		    TiledPaperMargins	    [1.270000, 1.270000, 1.270000, 1.270000]
		    TiledPageScale	    1
		    ShowPageBoundaries	    off
		    ZoomFactor		    "100"
		    Block {
		    BlockType		    Inport
		    Name		    "normal"
		    SID			    "681:297"
		    Position		    [95, 318, 160, 352]
		    ZOrder		    38
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Inport
		    Name		    "faked"
		    SID			    "681:298"
		    Position		    [95, 177, 160, 213]
		    ZOrder		    36
		    Port		    "2"
		    IconDisplay		    "Port number"
		    }
		    Block {
		    BlockType		    Step
		    Name		    "Step"
		    SID			    "681:299"
		    Position		    [105, 240, 150, 280]
		    ZOrder		    41
		    Time		    "start"
		    SampleTime		    "0"
		    }
		    Block {
		    BlockType		    Switch
		    Name		    "Switch"
		    SID			    "681:300"
		    Position		    [260, 217, 320, 303]
		    ZOrder		    39
		    Criteria		    "u2 > Threshold"
		    InputSameDT		    off
		    SaturateOnIntegerOverflow off
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:301"
		    Position		    [395, 253, 450, 277]
		    ZOrder		    37
		    IconDisplay		    "Port number"
		    }
		    Line {
		    ZOrder		    1
		    SrcBlock		    "Switch"
		    SrcPort		    1
		    Points		    [33, 0; 0, 5]
		    DstBlock		    "output"
		    DstPort		    1
		    }
		    Line {
		    ZOrder		    2
		    SrcBlock		    "Step"
		    SrcPort		    1
		    DstBlock		    "Switch"
		    DstPort		    2
		    }
		    Line {
		    ZOrder		    3
		    SrcBlock		    "normal"
		    SrcPort		    1
		    Points		    [45, 0; 0, -45]
		    DstBlock		    "Switch"
		    DstPort		    3
		    }
		    Line {
		    ZOrder		    4
		    SrcBlock		    "faked"
		    SrcPort		    1
		    Points		    [45, 0; 0, 35]
		    DstBlock		    "Switch"
		    DstPort		    1
		    }
		    }
		    }
		    Block {
		    BlockType		    Outport
		    Name		    "output"
		    SID			    "681:302"
		    Position		    [415, 103, 445, 117]
		    ZOrder		    -2
		    IconDisplay		    "Port number"
		    }
		    Annotation {
		    SID			    "681:303"
		    Name		    "1) Only subsystems can be added as variant choices at this level\n2) Blocks cannot be connected at th"
		    "is level as connectivity is\nautomatically determined at simulation, based on the active variant"
		    Position		    [91, 43, 411, 84]
		    InternalMargins	    [0, 0, 0, 0]
		    FixedHeight		    off
		    FixedWidth		    off
		    HorizontalAlignment	    "left"
		    ZOrder		    -1
		    }
		  }
		}
		Block {
		  BlockType		  Constant
		  Name			  "Integrity attack value"
		  SID			  "681:304"
		  Position		  [115, 175, 145, 205]
		  ZOrder		  62
		  Value			  "Value"
		}
		Block {
		  BlockType		  Memory
		  Name			  "Memory"
		  SID			  "681:305"
		  Position		  [385, 265, 415, 295]
		  ZOrder		  70
		  BlockMirror		  on
		}
		Block {
		  BlockType		  MultiPortSwitch
		  Name			  "Multiport\nSwitch"
		  SID			  "681:306"
		  Ports			  [4, 1]
		  Position		  [240, 336, 275, 389]
		  ZOrder		  72
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  RateTransition
		  Name			  "Rate Transition"
		  SID			  "681:942"
		  Position		  [530, 169, 570, 211]
		  ZOrder		  837
		  Deterministic		  off
		}
		Block {
		  BlockType		  Constant
		  Name			  "ReplaceBlock"
		  SID			  "681:903"
		  Position		  [50, 400, 120, 430]
		  ZOrder		  96
		}
		Block {
		  BlockType		  Switch
		  Name			  "Switch"
		  SID			  "681:307"
		  Position		  [210, 185, 260, 225]
		  ZOrder		  61
		  Criteria		  "u2 > Threshold"
		  InputSameDT		  off
		  SaturateOnIntegerOverflow off
		}
		Block {
		  BlockType		  Constant
		  Name			  "Switch value"
		  SID			  "681:308"
		  Position		  [115, 265, 145, 295]
		  ZOrder		  63
		}
		Block {
		  BlockType		  Terminator
		  Name			  "Terminator"
		  SID			  "681:448"
		  Position		  [280, 165, 300, 185]
		  ZOrder		  73
		}
		Block {
		  BlockType		  Outport
		  Name			  "output"
		  SID			  "681:309"
		  Position		  [585, 183, 615, 197]
		  ZOrder		  69
		  IconDisplay		  "Port number"
		}
		Line {
		  ZOrder		  1
		  SrcBlock		  "Rate Transition"
		  SrcPort		  1
		  DstBlock		  "output"
		  DstPort		  1
		}
		Line {
		  ZOrder		  2
		  SrcBlock		  "Attack Type Controller"
		  SrcPort		  1
		  Points		  [39, 0]
		  Branch {
		    ZOrder		    3
		    Points		    [0, 90]
		    DstBlock		    "Memory"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    4
		    DstBlock		    "Rate Transition"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  5
		  SrcBlock		  "ReplaceBlock"
		  SrcPort		  1
		  Points		  [50, 0; 0, -45]
		  DstBlock		  "Multiport\nSwitch"
		  DstPort		  3
		}
		Line {
		  ZOrder		  6
		  SrcBlock		  "Switch"
		  SrcPort		  1
		  DstBlock		  "Terminator"
		  DstPort		  1
		}
		Line {
		  ZOrder		  7
		  SrcBlock		  "Multiport\nSwitch"
		  SrcPort		  1
		  Points		  [14, 0; 0, -160]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  2
		}
		Line {
		  ZOrder		  8
		  SrcBlock		  "Memory"
		  SrcPort		  1
		  Points		  [-67, 0]
		  Branch {
		    ZOrder		    9
		    Points		    [-118, 0]
		    DstBlock		    "Switch"
		    DstPort		    3
		  }
		  Branch {
		    ZOrder		    10
		    Points		    [0, 164; -97, 0; 0, -59]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    4
		  }
		}
		Line {
		  ZOrder		  11
		  SrcBlock		  "input"
		  SrcPort		  1
		  Points		  [35, 0; 0, 30]
		  DstBlock		  "Attack Type Controller"
		  DstPort		  1
		}
		Line {
		  ZOrder		  12
		  SrcBlock		  "Switch value"
		  SrcPort		  1
		  Points		  [21, 0]
		  Branch {
		    ZOrder		    13
		    Points		    [14, 0; 0, -75]
		    DstBlock		    "Switch"
		    DstPort		    2
		  }
		  Branch {
		    ZOrder		    14
		    Points		    [0, 60]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    1
		  }
		}
		Line {
		  ZOrder		  15
		  SrcBlock		  "Integrity attack value"
		  SrcPort		  1
		  Points		  [19, 0]
		  Branch {
		    ZOrder		    16
		    DstBlock		    "Switch"
		    DstPort		    1
		  }
		  Branch {
		    ZOrder		    17
		    Points		    [0, -29; -95, 0; 0, 194]
		    DstBlock		    "Multiport\nSwitch"
		    DstPort		    2
		  }
		}
	      }
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "faked"
	      SID		      "667"
	      Position		      [985, 458, 1015, 472]
	      ZOrder		      499
	      IconDisplay	      "Port number"
	    }
	    Line {
	      ZOrder		      1
	      SrcBlock		      "xmv"
	      SrcPort		      1
	      Points		      [35, 0; 0, 310]
	      DstBlock		      "Demux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      2
	      SrcBlock		      "Demux"
	      SrcPort		      1
	      Points		      [9, 0; 0, -30]
	      DstBlock		      "xmv1 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      3
	      SrcBlock		      "xmv1 attack controller"
	      SrcPort		      1
	      Points		      [131, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      4
	      SrcBlock		      "Demux"
	      SrcPort		      12
	      Points		      [53, 0; 0, -25]
	      DstBlock		      "xmv12 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      5
	      SrcBlock		      "xmv12 attack controller"
	      SrcPort		      1
	      Points		      [33, 0; 0, 30]
	      DstBlock		      "Mux"
	      DstPort		      12
	    }
	    Line {
	      ZOrder		      6
	      SrcBlock		      "Mux"
	      SrcPort		      1
	      Points		      [28, 0; 0, -310]
	      DstBlock		      "faked"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      92
	      SrcBlock		      "Demux"
	      SrcPort		      2
	      Points		      [9, 0; 0, -30]
	      DstBlock		      "xmv2 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      27
	      SrcBlock		      "Demux"
	      SrcPort		      3
	      Points		      [9, 0; 0, -30]
	      DstBlock		      "xmv3 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      28
	      SrcBlock		      "xmv3 attack controller"
	      SrcPort		      1
	      Points		      [117, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      3
	    }
	    Line {
	      ZOrder		      11
	      SrcBlock		      "Demux"
	      SrcPort		      4
	      Points		      [9, 0; 0, -30]
	      DstBlock		      "xmv4 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      12
	      SrcBlock		      "xmv4 attack controller"
	      SrcPort		      1
	      Points		      [5, 0; 0, 11; 126, 0; 0, 24]
	      DstBlock		      "Mux"
	      DstPort		      4
	    }
	    Line {
	      ZOrder		      13
	      SrcBlock		      "Demux"
	      SrcPort		      5
	      Points		      [1, 0; 0, -30]
	      DstBlock		      "xmv5 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      14
	      SrcBlock		      "Demux"
	      SrcPort		      6
	      Points		      [9, 0; 0, -30]
	      DstBlock		      "xmv6 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      15
	      SrcBlock		      "Demux"
	      SrcPort		      7
	      Points		      [53, 0; 0, -30]
	      DstBlock		      "xmv7 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      16
	      SrcBlock		      "Demux"
	      SrcPort		      8
	      Points		      [53, 0; 0, -30]
	      DstBlock		      "xmv8 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      17
	      SrcBlock		      "Demux"
	      SrcPort		      9
	      Points		      [53, 0; 0, -30]
	      DstBlock		      "xmv9 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      18
	      SrcBlock		      "Demux"
	      SrcPort		      10
	      Points		      [53, 0; 0, -30]
	      DstBlock		      "xmv10 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      19
	      SrcBlock		      "Demux"
	      SrcPort		      11
	      Points		      [53, 0; 0, -25]
	      DstBlock		      "xmv11 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      20
	      SrcBlock		      "xmv11 attack controller"
	      SrcPort		      1
	      Points		      [70, 0; 0, 30]
	      DstBlock		      "Mux"
	      DstPort		      11
	    }
	    Line {
	      ZOrder		      21
	      SrcBlock		      "xmv10 attack controller"
	      SrcPort		      1
	      Points		      [108, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      10
	    }
	    Line {
	      ZOrder		      22
	      SrcBlock		      "xmv9 attack controller"
	      SrcPort		      1
	      Points		      [5, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      9
	    }
	    Line {
	      ZOrder		      23
	      SrcBlock		      "xmv8 attack controller"
	      SrcPort		      1
	      Points		      [14, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      8
	    }
	    Line {
	      ZOrder		      24
	      SrcBlock		      "xmv7 attack controller"
	      SrcPort		      1
	      Points		      [33, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      7
	    }
	    Line {
	      ZOrder		      25
	      SrcBlock		      "xmv6 attack controller"
	      SrcPort		      1
	      Points		      [70, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      6
	    }
	    Line {
	      ZOrder		      26
	      SrcBlock		      "xmv5 attack controller"
	      SrcPort		      1
	      Points		      [38, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      5
	    }
	    Line {
	      ZOrder		      52
	      SrcBlock		      "Demux"
	      SrcPort		      13
	      Points		      [53, 0; 0, -25]
	      DstBlock		      "xmv13 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      53
	      SrcBlock		      "Demux"
	      SrcPort		      14
	      Points		      [53, 0; 0, -20]
	      DstBlock		      "xmv14 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      54
	      SrcBlock		      "Demux"
	      SrcPort		      15
	      Points		      [53, 0; 0, -20]
	      DstBlock		      "xmv15 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      55
	      SrcBlock		      "Demux"
	      SrcPort		      16
	      Points		      [53, 0; 0, -15]
	      DstBlock		      "xmv16 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      56
	      SrcBlock		      "xmv13 attack controller"
	      SrcPort		      1
	      Points		      [14, 0; 0, 30]
	      DstBlock		      "Mux"
	      DstPort		      13
	    }
	    Line {
	      ZOrder		      57
	      SrcBlock		      "xmv14 attack controller"
	      SrcPort		      1
	      Points		      [5, 0; 0, 25]
	      DstBlock		      "Mux"
	      DstPort		      14
	    }
	    Line {
	      ZOrder		      58
	      SrcBlock		      "xmv15 attack controller"
	      SrcPort		      1
	      Points		      [80, 0; 0, 25]
	      DstBlock		      "Mux"
	      DstPort		      15
	    }
	    Line {
	      ZOrder		      59
	      SrcBlock		      "xmv16 attack controller"
	      SrcPort		      1
	      Points		      [43, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      16
	    }
	    Line {
	      ZOrder		      60
	      SrcBlock		      "Demux"
	      SrcPort		      17
	      Points		      [53, 0; 0, -15]
	      DstBlock		      "xmv17 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      61
	      SrcBlock		      "Demux"
	      SrcPort		      18
	      Points		      [53, 0; 0, -15]
	      DstBlock		      "xmv18 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      62
	      SrcBlock		      "Demux"
	      SrcPort		      19
	      Points		      [53, 0; 0, -15]
	      DstBlock		      "xmv19 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      63
	      SrcBlock		      "Demux"
	      SrcPort		      20
	      Points		      [53, 0; 0, -15]
	      DstBlock		      "xmv20 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      64
	      SrcBlock		      "Demux"
	      SrcPort		      21
	      Points		      [53, 0; 0, -15]
	      DstBlock		      "xmv21 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      65
	      SrcBlock		      "Demux"
	      SrcPort		      22
	      Points		      [53, 0; 0, -15]
	      DstBlock		      "xmv22 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      66
	      SrcBlock		      "xmv17 attack controller"
	      SrcPort		      1
	      Points		      [19, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      17
	    }
	    Line {
	      ZOrder		      67
	      SrcBlock		      "xmv18 attack controller"
	      SrcPort		      1
	      Points		      [7, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      18
	    }
	    Line {
	      ZOrder		      68
	      SrcBlock		      "xmv19 attack controller"
	      SrcPort		      1
	      Points		      [1, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      19
	    }
	    Line {
	      ZOrder		      69
	      SrcBlock		      "xmv20 attack controller"
	      SrcPort		      1
	      Points		      [76, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      20
	    }
	    Line {
	      ZOrder		      70
	      SrcBlock		      "xmv21 attack controller"
	      SrcPort		      1
	      Points		      [39, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      21
	    }
	    Line {
	      ZOrder		      71
	      SrcBlock		      "xmv22 attack controller"
	      SrcPort		      1
	      Points		      [17, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      22
	    }
	    Line {
	      ZOrder		      72
	      SrcBlock		      "Demux"
	      SrcPort		      23
	      Points		      [95, 0]
	      DstBlock		      "xmv23 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      73
	      SrcBlock		      "Demux"
	      SrcPort		      24
	      Points		      [95, 0]
	      DstBlock		      "xmv24 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      74
	      SrcBlock		      "Demux"
	      SrcPort		      25
	      DstBlock		      "xmv25 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      75
	      SrcBlock		      "Demux"
	      SrcPort		      26
	      Points		      [95, 0]
	      DstBlock		      "xmv26 attack controller"
	      DstPort		      1
	    }
	    Line {
	      ZOrder		      76
	      SrcBlock		      "xmv23 attack controller"
	      SrcPort		      1
	      Points		      [70, 0; 0, 20]
	      DstBlock		      "Mux"
	      DstPort		      23
	    }
	    Line {
	      ZOrder		      77
	      SrcBlock		      "xmv24 attack controller"
	      SrcPort		      1
	      Points		      [70, 0; 0, 15]
	      DstBlock		      "Mux"
	      DstPort		      24
	    }
	    Line {
	      ZOrder		      78
	      SrcBlock		      "xmv25 attack controller"
	      SrcPort		      1
	      Points		      [70, 0; 0, 5]
	      DstBlock		      "Mux"
	      DstPort		      25
	    }
	    Line {
	      ZOrder		      79
	      SrcBlock		      "xmv26 attack controller"
	      SrcPort		      1
	      DstBlock		      "Mux"
	      DstPort		      26
	    }
	    Line {
	      ZOrder		      99
	      SrcBlock		      "xmv2 attack controller"
	      SrcPort		      1
	      Points		      [56, 0; 0, 35]
	      DstBlock		      "Mux"
	      DstPort		      2
	    }
	  }
	}
	Block {
	  BlockType		  Outport
	  Name			  "xmeas"
	  SID			  "204"
	  Position		  [1250, 238, 1280, 252]
	  ZOrder		  -118
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "xmv"
	  SID			  "205"
	  Position		  [970, 193, 1000, 207]
	  ZOrder		  -119
	  Port			  "2"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "idv"
	  SID			  "206"
	  Position		  [1050, 403, 1080, 417]
	  ZOrder		  -120
	  Port			  "3"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "atkxmv"
	  SID			  "669"
	  Position		  [1075, 258, 1105, 272]
	  ZOrder		  499
	  Port			  "4"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "atkxmeas"
	  SID			  "707"
	  Position		  [1365, 413, 1395, 427]
	  ZOrder		  502
	  Port			  "5"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "states"
	  SID			  "1420"
	  Position		  [1215, 378, 1245, 392]
	  ZOrder		  776
	  Port			  "6"
	  IconDisplay		  "Port number"
	}
	Line {
	  ZOrder		  2
	  SrcBlock		  "Disturbances"
	  SrcPort		  1
	  Points		  [29, 0]
	  Branch {
	    ZOrder		    1466
	    Points		    [0, -21; 36, 0]
	    DstBlock		    "Mux2"
	    DstPort		    2
	  }
	  Branch {
	    ZOrder		    1101
	    DstBlock		    "idv"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  8
	  SrcBlock		  "From"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  1
	}
	Line {
	  ZOrder		  9
	  SrcBlock		  "From1"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  2
	}
	Line {
	  ZOrder		  10
	  SrcBlock		  "From2"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  3
	}
	Line {
	  ZOrder		  11
	  SrcBlock		  "From3"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  4
	}
	Line {
	  ZOrder		  13
	  SrcBlock		  "From5"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  6
	}
	Line {
	  ZOrder		  14
	  SrcBlock		  "From6"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  7
	}
	Line {
	  ZOrder		  15
	  SrcBlock		  "From7"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  8
	}
	Line {
	  ZOrder		  39
	  SrcBlock		  "Mux1"
	  SrcPort		  1
	  Points		  [20, 0]
	  Branch {
	    ZOrder		    1437
	    DstBlock		    "xmv atk block"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    1436
	    Points		    [0, -125]
	    DstBlock		    "xmv"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  123
	  SrcBlock		  "Selector"
	  SrcPort		  1
	  DstBlock		  "Demux"
	  DstPort		  1
	}
	Line {
	  ZOrder		  136
	  SrcBlock		  "From4"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  5
	}
	Line {
	  ZOrder		  149
	  SrcBlock		  "From8"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  9
	}
	Line {
	  ZOrder		  154
	  SrcBlock		  "From9"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  11
	}
	Line {
	  ZOrder		  159
	  SrcBlock		  "From10"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  12
	}
	Line {
	  ZOrder		  166
	  SrcBlock		  "From11"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  14
	}
	Line {
	  ZOrder		  170
	  SrcBlock		  "From12"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  16
	}
	Line {
	  ZOrder		  173
	  SrcBlock		  "From13"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  17
	}
	Line {
	  ZOrder		  176
	  SrcBlock		  "From14"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  18
	}
	Line {
	  ZOrder		  179
	  SrcBlock		  "From15"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  19
	}
	Line {
	  ZOrder		  182
	  SrcBlock		  "From16"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  20
	}
	Line {
	  ZOrder		  185
	  SrcBlock		  "From17"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  21
	}
	Line {
	  ZOrder		  188
	  SrcBlock		  "From18"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  22
	}
	Line {
	  ZOrder		  191
	  SrcBlock		  "From19"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  23
	}
	Line {
	  ZOrder		  194
	  SrcBlock		  "From20"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  24
	}
	Line {
	  ZOrder		  197
	  SrcBlock		  "From21"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  25
	}
	Line {
	  ZOrder		  327
	  SrcBlock		  "Demux"
	  SrcPort		  2
	  Points		  [15, 0]
	  DstBlock		  "Goto25"
	  DstPort		  1
	}
	Line {
	  ZOrder		  328
	  SrcBlock		  "Demux"
	  SrcPort		  1
	  Points		  [15, 0]
	  DstBlock		  "Goto26"
	  DstPort		  1
	}
	Line {
	  ZOrder		  337
	  SrcBlock		  "Demux"
	  SrcPort		  3
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto27"
	  DstPort		  1
	}
	Line {
	  ZOrder		  349
	  SrcBlock		  "Demux"
	  SrcPort		  4
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto28"
	  DstPort		  1
	}
	Line {
	  ZOrder		  421
	  SrcBlock		  "Demux"
	  SrcPort		  12
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto34"
	  DstPort		  1
	}
	Line {
	  ZOrder		  422
	  SrcBlock		  "Demux"
	  SrcPort		  11
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto33"
	  DstPort		  1
	}
	Line {
	  ZOrder		  423
	  SrcBlock		  "Demux"
	  SrcPort		  10
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto32"
	  DstPort		  1
	}
	Line {
	  ZOrder		  425
	  SrcBlock		  "Demux"
	  SrcPort		  9
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto23"
	  DstPort		  1
	}
	Line {
	  ZOrder		  426
	  SrcBlock		  "Demux"
	  SrcPort		  8
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto31"
	  DstPort		  1
	}
	Line {
	  ZOrder		  427
	  SrcBlock		  "Demux"
	  SrcPort		  7
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto30"
	  DstPort		  1
	}
	Line {
	  ZOrder		  428
	  SrcBlock		  "Demux"
	  SrcPort		  6
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto29"
	  DstPort		  1
	}
	Line {
	  ZOrder		  429
	  SrcBlock		  "Demux"
	  SrcPort		  5
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto37"
	  DstPort		  1
	}
	Line {
	  ZOrder		  471
	  SrcBlock		  "Demux"
	  SrcPort		  13
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto42"
	  DstPort		  1
	}
	Line {
	  ZOrder		  490
	  SrcBlock		  "Demux"
	  SrcPort		  14
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto43"
	  DstPort		  1
	}
	Line {
	  ZOrder		  491
	  SrcBlock		  "Demux"
	  SrcPort		  15
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto41"
	  DstPort		  1
	}
	Line {
	  ZOrder		  501
	  SrcBlock		  "Demux"
	  SrcPort		  16
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto44"
	  DstPort		  1
	}
	Line {
	  ZOrder		  502
	  SrcBlock		  "Demux"
	  SrcPort		  17
	  Points		  [13, 0; 0, -5]
	  DstBlock		  "Goto40"
	  DstPort		  1
	}
	Line {
	  ZOrder		  503
	  SrcBlock		  "Demux"
	  SrcPort		  18
	  DstBlock		  "Goto24"
	  DstPort		  1
	}
	Line {
	  ZOrder		  504
	  SrcBlock		  "Demux"
	  SrcPort		  19
	  Points		  [13, 0; 0, 5]
	  DstBlock		  "Goto39"
	  DstPort		  1
	}
	Line {
	  ZOrder		  505
	  SrcBlock		  "Demux"
	  SrcPort		  20
	  Points		  [13, 0; 0, 10]
	  DstBlock		  "Goto35"
	  DstPort		  1
	}
	Line {
	  ZOrder		  506
	  SrcBlock		  "Demux"
	  SrcPort		  21
	  Points		  [13, 0; 0, 10]
	  DstBlock		  "Goto36"
	  DstPort		  1
	}
	Line {
	  ZOrder		  507
	  SrcBlock		  "Demux"
	  SrcPort		  22
	  Points		  [13, 0; 0, 15]
	  DstBlock		  "Goto22"
	  DstPort		  1
	}
	Line {
	  ZOrder		  835
	  SrcBlock		  "From22"
	  SrcPort		  1
	  DstBlock		  "Fresh O2 Feed"
	  DstPort		  1
	}
	Line {
	  ZOrder		  834
	  SrcBlock		  "O2 Composition Setpoint"
	  SrcPort		  1
	  DstBlock		  "Fresh O2 Feed"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1009
	  SrcBlock		  "From32"
	  SrcPort		  1
	  DstBlock		  "Absorber Liquid Exit"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1010
	  SrcBlock		  "Absorber Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Absorber Liquid Exit"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1008
	  SrcBlock		  "Absorber Liquid Exit"
	  SrcPort		  1
	  DstBlock		  "Goto10"
	  DstPort		  1
	}
	Line {
	  ZOrder		  837
	  SrcBlock		  "From23"
	  SrcPort		  1
	  DstBlock		  "Fresh C2H4 Feed"
	  DstPort		  1
	}
	Line {
	  ZOrder		  838
	  SrcBlock		  "Recycle Pressure Setpoint"
	  SrcPort		  1
	  DstBlock		  "Fresh C2H4 Feed"
	  DstPort		  2
	}
	Line {
	  ZOrder		  866
	  SrcBlock		  "From24"
	  SrcPort		  1
	  DstBlock		  "Fresh HAc Feed"
	  DstPort		  1
	}
	Line {
	  ZOrder		  865
	  SrcBlock		  "HAc Tank Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Fresh HAc Feed"
	  DstPort		  2
	}
	Line {
	  ZOrder		  863
	  SrcBlock		  "From25"
	  SrcPort		  1
	  DstBlock		  "Vaporizer Steam Duty"
	  DstPort		  1
	}
	Line {
	  ZOrder		  862
	  SrcBlock		  "Vaporizer Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Vaporizer Steam Duty"
	  DstPort		  2
	}
	Line {
	  ZOrder		  985
	  SrcBlock		  "From27"
	  SrcPort		  1
	  DstBlock		  "Vaporizer Heater Duty"
	  DstPort		  1
	}
	Line {
	  ZOrder		  984
	  SrcBlock		  "Heater Exit Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Vaporizer Heater Duty"
	  DstPort		  2
	}
	Line {
	  ZOrder		  987
	  SrcBlock		  "From28"
	  SrcPort		  1
	  DstBlock		  "Reactor Shell Temp."
	  DstPort		  1
	}
	Line {
	  ZOrder		  988
	  SrcBlock		  "Reactor Exit Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Reactor Shell Temp."
	  DstPort		  2
	}
	Line {
	  ZOrder		  986
	  SrcBlock		  "Reactor Shell Temp."
	  SrcPort		  1
	  DstBlock		  "Goto6"
	  DstPort		  1
	}
	Line {
	  ZOrder		  990
	  SrcBlock		  "From29"
	  SrcPort		  1
	  DstBlock		  "Separator Liquid Exit"
	  DstPort		  1
	}
	Line {
	  ZOrder		  989
	  SrcBlock		  "Separator Liquid Exit"
	  SrcPort		  1
	  DstBlock		  "Goto7"
	  DstPort		  1
	}
	Line {
	  ZOrder		  991
	  SrcBlock		  "Separator Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Separator Liquid Exit"
	  DstPort		  2
	}
	Line {
	  ZOrder		  994
	  SrcBlock		  "From30"
	  SrcPort		  1
	  DstBlock		  "Separator Jacket Temp."
	  DstPort		  1
	}
	Line {
	  ZOrder		  992
	  SrcBlock		  "Separator Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Separator Jacket Temp."
	  DstPort		  2
	}
	Line {
	  ZOrder		  993
	  SrcBlock		  "Separator Jacket Temp."
	  SrcPort		  1
	  DstBlock		  "Goto8"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1006
	  SrcBlock		  "From31"
	  SrcPort		  1
	  DstBlock		  "Compressor Heater Duty"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1007
	  SrcBlock		  "Compressor Exit Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Compressor Heater Duty"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1005
	  SrcBlock		  "Compressor Heater Duty"
	  SrcPort		  1
	  DstBlock		  "Goto9"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1019
	  SrcBlock		  "From33"
	  SrcPort		  1
	  DstBlock		  "Circulation Cooler Duty"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1017
	  SrcBlock		  "Circulation Cooler Duty"
	  SrcPort		  1
	  DstBlock		  "Goto11"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1018
	  SrcBlock		  "Circulation Stream Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Circulation Cooler Duty"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1027
	  SrcBlock		  "From34"
	  SrcPort		  1
	  DstBlock		  "Scrub Cooler Duty"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1028
	  SrcBlock		  "Scrub Stream Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Scrub Cooler Duty"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1026
	  SrcBlock		  "Scrub Cooler Duty"
	  SrcPort		  1
	  DstBlock		  "Goto12"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1030
	  SrcBlock		  "From35"
	  SrcPort		  1
	  DstBlock		  "CO2 Removal Inlet"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1029
	  SrcBlock		  "CO2 Removal Inlet"
	  SrcPort		  1
	  DstBlock		  "Goto13"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1031
	  SrcBlock		  "CO2 Composition Setpoint"
	  SrcPort		  1
	  DstBlock		  "CO2 Removal Inlet"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1034
	  SrcBlock		  "From36"
	  SrcPort		  1
	  DstBlock		  "Purge"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1032
	  SrcBlock		  "Purge"
	  SrcPort		  1
	  DstBlock		  "Goto14"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1033
	  SrcBlock		  "C2H6 Composition Setpoint"
	  SrcPort		  1
	  DstBlock		  "Purge"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1036
	  SrcBlock		  "From37"
	  SrcPort		  1
	  DstBlock		  "FEHE Bypass Ratio"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1037
	  SrcBlock		  "FEHE Hot Exit Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "FEHE Bypass Ratio"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1035
	  SrcBlock		  "FEHE Bypass Ratio"
	  SrcPort		  1
	  DstBlock		  "Goto15"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1039
	  SrcBlock		  "From38"
	  SrcPort		  1
	  DstBlock		  "Column Reflux"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1040
	  SrcBlock		  "H2O in the Column Bottom Setpoint"
	  SrcPort		  1
	  DstBlock		  "Column Reflux"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1038
	  SrcBlock		  "Column Reflux"
	  SrcPort		  1
	  DstBlock		  "Goto16"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1042
	  SrcBlock		  "From39"
	  SrcPort		  1
	  DstBlock		  "Column Reboiler Duty"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1043
	  SrcBlock		  "5th Tray Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Column Reboiler Duty"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1041
	  SrcBlock		  "Column Reboiler Duty"
	  SrcPort		  1
	  DstBlock		  "Goto17"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1045
	  SrcBlock		  "From40"
	  SrcPort		  1
	  DstBlock		  "Column Condenser Duty"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1046
	  SrcBlock		  "Decanter Temp. Setpoint"
	  SrcPort		  1
	  DstBlock		  "Column Condenser Duty"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1044
	  SrcBlock		  "Column Condenser Duty"
	  SrcPort		  1
	  DstBlock		  "Goto18"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1048
	  SrcBlock		  "From41"
	  SrcPort		  1
	  DstBlock		  "Column Organic Exit"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1047
	  SrcBlock		  "Column Organic Exit"
	  SrcPort		  1
	  DstBlock		  "Goto19"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1049
	  SrcBlock		  "Decanter Organic Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Column Organic Exit"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1051
	  SrcBlock		  "From42"
	  SrcPort		  1
	  DstBlock		  "Column Aqueous Exit"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1052
	  SrcBlock		  "Decanter Aqueous Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Column Aqueous Exit"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1050
	  SrcBlock		  "Column Aqueous Exit"
	  SrcPort		  1
	  DstBlock		  "Goto21"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1055
	  SrcBlock		  "From43"
	  SrcPort		  1
	  DstBlock		  "Column Bottom Exit"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1054
	  SrcBlock		  "Column Bottom Level Setpoint"
	  SrcPort		  1
	  DstBlock		  "Column Bottom Exit"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1053
	  SrcBlock		  "Column Bottom Exit"
	  SrcPort		  1
	  DstBlock		  "Goto38"
	  DstPort		  1
	}
	Line {
	  ZOrder		  833
	  SrcBlock		  "VA Code"
	  SrcPort		  2
	  Points		  [20, 0]
	  DstBlock		  "states"
	  DstPort		  1
	}
	Line {
	  ZOrder		  836
	  SrcBlock		  "Fresh O2 Feed"
	  SrcPort		  1
	  DstBlock		  "Goto20"
	  DstPort		  1
	}
	Line {
	  ZOrder		  839
	  SrcBlock		  "Fresh C2H4 Feed"
	  SrcPort		  1
	  DstBlock		  "Goto1"
	  DstPort		  1
	}
	Line {
	  ZOrder		  867
	  SrcBlock		  "Fresh HAc Feed"
	  SrcPort		  1
	  DstBlock		  "Goto2"
	  DstPort		  1
	}
	Line {
	  ZOrder		  864
	  SrcBlock		  "Vaporizer Steam Duty"
	  SrcPort		  1
	  DstBlock		  "Goto3"
	  DstPort		  1
	}
	Line {
	  ZOrder		  983
	  SrcBlock		  "Vaporizer Heater Duty"
	  SrcPort		  1
	  DstBlock		  "Goto5"
	  DstPort		  1
	}
	Line {
	  ZOrder		  980
	  SrcBlock		  "From26"
	  SrcPort		  1
	  DstBlock		  "Vaporizer Vapor Exit"
	  DstPort		  1
	}
	Line {
	  ZOrder		  981
	  SrcBlock		  "Vaporizer Pressure Setpoint"
	  SrcPort		  1
	  DstBlock		  "Vaporizer Vapor Exit"
	  DstPort		  2
	}
	Line {
	  ZOrder		  982
	  SrcBlock		  "Vaporizer Vapor Exit"
	  SrcPort		  1
	  DstBlock		  "Goto4"
	  DstPort		  1
	}
	Line {
	  ZOrder		  997
	  SrcBlock		  "Separator Vapor Exit"
	  SrcPort		  1
	  DstBlock		  "Goto45"
	  DstPort		  1
	}
	Line {
	  ZOrder		  998
	  SrcBlock		  "Separator Vapor Flowrate Setpoint"
	  SrcPort		  1
	  Points		  [17, 0]
	  Branch {
	    ZOrder		    1000
	    Points		    [0, -35]
	    DstBlock		    "Separator Vapor Exit"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    999
	    DstBlock		    "Separator Vapor Exit"
	    DstPort		    2
	  }
	}
	Line {
	  ZOrder		  1004
	  SrcBlock		  "From44"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  10
	}
	Line {
	  ZOrder		  1011
	  SrcBlock		  "Absorber Circulation Flow"
	  SrcPort		  1
	  DstBlock		  "Goto46"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1016
	  SrcBlock		  "Absorber Scrub Flowrate Setpoint"
	  SrcPort		  1
	  Points		  [17, 0]
	  Branch {
	    ZOrder		    1013
	    Points		    [0, -35]
	    DstBlock		    "Absorber Circulation Flow"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    1012
	    DstBlock		    "Absorber Circulation Flow"
	    DstPort		    2
	  }
	}
	Line {
	  ZOrder		  1015
	  SrcBlock		  "From45"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  13
	}
	Line {
	  ZOrder		  1020
	  SrcBlock		  "Absorber Scrub Flow"
	  SrcPort		  1
	  DstBlock		  "Goto47"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1025
	  SrcBlock		  "Absorber Circulation Flowrate Setpoint"
	  SrcPort		  1
	  Points		  [12, 0]
	  Branch {
	    ZOrder		    1022
	    Points		    [0, -35]
	    DstBlock		    "Absorber Scrub Flow"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    1021
	    DstBlock		    "Absorber Scrub Flow"
	    DstPort		    2
	  }
	}
	Line {
	  ZOrder		  1024
	  SrcBlock		  "From46"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  15
	}
	Line {
	  ZOrder		  1056
	  SrcBlock		  "Vaporizer Liquid Inlet"
	  SrcPort		  1
	  DstBlock		  "Goto48"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1065
	  SrcBlock		  "Liquid Recycle Flowrate Setpoint"
	  SrcPort		  1
	  Points		  [22, 0]
	  Branch {
	    ZOrder		    1058
	    Points		    [0, -35]
	    DstBlock		    "Vaporizer Liquid Inlet"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    1057
	    DstBlock		    "Vaporizer Liquid Inlet"
	    DstPort		    2
	  }
	}
	Line {
	  ZOrder		  1064
	  SrcBlock		  "From47"
	  SrcPort		  1
	  DstBlock		  "Mux1"
	  DstPort		  26
	}
	Line {
	  ZOrder		  1467
	  SrcBlock		  "Constraints"
	  SrcPort		  1
	  Points		  [50, 0; 0, -20]
	  DstBlock		  "Mux2"
	  DstPort		  1
	}
	Line {
	  ZOrder		  1427
	  SrcBlock		  "xmeas atk block"
	  SrcPort		  1
	  Points		  [7, 0]
	  Branch {
	    ZOrder		    1429
	    Points		    [0, 85]
	    DstBlock		    "atkxmeas"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    1428
	    DstBlock		    "Selector"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  1448
	  SrcBlock		  "VA Code"
	  SrcPort		  1
	  Points		  [51, 0]
	  Branch {
	    ZOrder		    1449
	    Points		    [0, -90]
	    DstBlock		    "xmeas"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    1446
	    DstBlock		    "xmeas atk block"
	    DstPort		    1
	  }
	}
	Line {
	  ZOrder		  1461
	  SrcBlock		  "Mux2"
	  SrcPort		  1
	  Points		  [18, 0; 0, -5]
	  DstBlock		  "VA Code"
	  DstPort		  2
	}
	Line {
	  ZOrder		  1476
	  SrcBlock		  "xmv atk block"
	  SrcPort		  1
	  Points		  [38, 0]
	  Branch {
	    ZOrder		    1475
	    Points		    [0, -60]
	    DstBlock		    "atkxmv"
	    DstPort		    1
	  }
	  Branch {
	    ZOrder		    1473
	    Points		    [0, 10]
	    DstBlock		    "VA Code"
	    DstPort		    1
	  }
	}
      }
    }
    Block {
      BlockType		      Constant
      Name		      "xmv1"
      SID		      "722"
      Position		      [440, 148, 495, 172]
      ZOrder		      4
      ShowName		      off
      Value		      "0.075"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv10"
      SID		      "758"
      Position		      [365, 328, 420, 352]
      ZOrder		      12
      ShowName		      off
      Value		      "16.1026"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv11"
      SID		      "763"
      Position		      [440, 348, 495, 372]
      ZOrder		      13
      ShowName		      off
      Value		      "80"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv12"
      SID		      "771"
      Position		      [365, 368, 420, 392]
      ZOrder		      16
      ShowName		      off
      Value		      "0.5"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv13"
      SID		      "777"
      Position		      [440, 388, 495, 412]
      ZOrder		      21
      ShowName		      off
      Value		      "15.1198"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv14"
      SID		      "783"
      Position		      [365, 408, 420, 432]
      ZOrder		      22
      ShowName		      off
      Value		      "25"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv15"
      SID		      "785"
      Position		      [440, 428, 495, 452]
      ZOrder		      23
      ShowName		      off
      Value		      "0.756"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv16"
      SID		      "791"
      Position		      [365, 448, 420, 472]
      ZOrder		      24
      ShowName		      off
      Value		      "25"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv17"
      SID		      "797"
      Position		      [440, 468, 495, 492]
      ZOrder		      25
      ShowName		      off
      Value		      "0.0076393"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv18"
      SID		      "803"
      Position		      [365, 488, 420, 512]
      ZOrder		      26
      ShowName		      off
      Value		      "0.25"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv19"
      SID		      "809"
      Position		      [440, 508, 495, 532]
      ZOrder		      27
      ShowName		      off
      Value		      "134"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv2"
      SID		      "217"
      Position		      [365, 168, 420, 192]
      ZOrder		      -18
      ShowName		      off
      Value		      "128"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv20"
      SID		      "817"
      Position		      [365, 528, 420, 552]
      ZOrder		      28
      ShowName		      off
      Value		      "0.09344"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv21"
      SID		      "823"
      Position		      [440, 548, 495, 572]
      ZOrder		      29
      ShowName		      off
      Value		      "110"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv22"
      SID		      "829"
      Position		      [365, 568, 420, 592]
      ZOrder		      30
      ShowName		      off
      Value		      "45.845"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv23"
      SID		      "835"
      Position		      [440, 588, 495, 612]
      ZOrder		      31
      ShowName		      off
      Value		      "0.5"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv24"
      SID		      "841"
      Position		      [365, 608, 420, 632]
      ZOrder		      32
      ShowName		      off
      Value		      "0.5"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv25"
      SID		      "847"
      Position		      [440, 628, 495, 652]
      ZOrder		      33
      ShowName		      off
      Value		      "0.5"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv26"
      SID		      "850"
      Position		      [365, 648, 420, 672]
      ZOrder		      34
      ShowName		      off
      Value		      "2.1924"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv3"
      SID		      "723"
      Position		      [440, 188, 495, 212]
      ZOrder		      5
      ShowName		      off
      Value		      "0.5"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv4"
      SID		      "733"
      Position		      [365, 208, 420, 232]
      ZOrder		      6
      ShowName		      off
      Value		      "0.7"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv5"
      SID		      "734"
      Position		      [440, 228, 495, 252]
      ZOrder		      7
      ShowName		      off
      Value		      "128"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv6"
      SID		      "739"
      Position		      [365, 248, 420, 272]
      ZOrder		      8
      ShowName		      off
      Value		      "150"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv7"
      SID		      "744"
      Position		      [440, 268, 495, 292]
      ZOrder		      9
      ShowName		      off
      Value		      "159.17"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv8"
      SID		      "749"
      Position		      [365, 288, 420, 312]
      ZOrder		      10
      ShowName		      off
      Value		      "0.5"
    }
    Block {
      BlockType		      Constant
      Name		      "xmv9"
      SID		      "755"
      Position		      [440, 308, 495, 332]
      ZOrder		      11
      ShowName		      off
      Value		      "40"
    }
    Line {
      ZOrder		      1
      SrcBlock		      "VA Plant"
      SrcPort		      1
      DstBlock		      "To Workspace"
      DstPort		      1
    }
    Line {
      ZOrder		      63
      SrcBlock		      "xmv2"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      3
    }
    Line {
      ZOrder		      11
      SrcBlock		      "VA Plant"
      SrcPort		      2
      DstBlock		      "To Workspace1"
      DstPort		      1
    }
    Line {
      ZOrder		      14
      SrcBlock		      "VA Plant"
      SrcPort		      3
      DstBlock		      "To Workspace2"
      DstPort		      1
    }
    Line {
      ZOrder		      15
      SrcBlock		      "Clock"
      SrcPort		      1
      DstBlock		      "To Workspace3"
      DstPort		      1
    }
    Line {
      ZOrder		      24
      SrcBlock		      "Disturbances"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      1
    }
    Line {
      ZOrder		      27
      SrcBlock		      "VA Plant"
      SrcPort		      4
      DstBlock		      "To Workspace5"
      DstPort		      1
    }
    Line {
      ZOrder		      28
      SrcBlock		      "VA Plant"
      SrcPort		      5
      DstBlock		      "To Workspace6"
      DstPort		      1
    }
    Line {
      ZOrder		      62
      SrcBlock		      "xmv1"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      2
    }
    Line {
      ZOrder		      31
      SrcBlock		      "xmv3"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      4
    }
    Line {
      ZOrder		      32
      SrcBlock		      "xmv4"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      5
    }
    Line {
      ZOrder		      33
      SrcBlock		      "xmv5"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      6
    }
    Line {
      ZOrder		      34
      SrcBlock		      "xmv6"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      7
    }
    Line {
      ZOrder		      35
      SrcBlock		      "xmv7"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      8
    }
    Line {
      ZOrder		      36
      SrcBlock		      "xmv8"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      9
    }
    Line {
      ZOrder		      37
      SrcBlock		      "xmv9"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      10
    }
    Line {
      ZOrder		      38
      SrcBlock		      "xmv10"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      11
    }
    Line {
      ZOrder		      39
      SrcBlock		      "xmv11"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      12
    }
    Line {
      ZOrder		      40
      SrcBlock		      "xmv12"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      13
    }
    Line {
      ZOrder		      41
      SrcBlock		      "xmv13"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      14
    }
    Line {
      ZOrder		      42
      SrcBlock		      "xmv14"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      15
    }
    Line {
      ZOrder		      43
      SrcBlock		      "xmv15"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      16
    }
    Line {
      ZOrder		      44
      SrcBlock		      "xmv16"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      17
    }
    Line {
      ZOrder		      45
      SrcBlock		      "xmv17"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      18
    }
    Line {
      ZOrder		      46
      SrcBlock		      "xmv18"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      19
    }
    Line {
      ZOrder		      47
      SrcBlock		      "xmv19"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      20
    }
    Line {
      ZOrder		      48
      SrcBlock		      "xmv20"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      21
    }
    Line {
      ZOrder		      49
      SrcBlock		      "xmv21"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      22
    }
    Line {
      ZOrder		      50
      SrcBlock		      "xmv22"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      23
    }
    Line {
      ZOrder		      51
      SrcBlock		      "xmv23"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      24
    }
    Line {
      ZOrder		      52
      SrcBlock		      "xmv24"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      25
    }
    Line {
      ZOrder		      53
      SrcBlock		      "xmv25"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      26
    }
    Line {
      ZOrder		      54
      SrcBlock		      "xmv26"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      27
    }
    Line {
      ZOrder		      95
      SrcBlock		      "VA Plant"
      SrcPort		      6
      DstBlock		      "To Workspace4"
      DstPort		      1
    }
    Line {
      ZOrder		      97
      SrcBlock		      "Constraints"
      SrcPort		      1
      DstBlock		      "VA Plant"
      DstPort		      28
    }
  }
}
#Finite State Machines
#
#   Stateflow Version 8.1 (R2014a) dated Feb  8 2014, 02:29:12
#
#
Stateflow {
  machine {
    id			    1
    name		    "VAcModel"
    created		    "03-May-2013 19:33:24"
    isLibrary		    0
    firstTarget		    2
    sfVersion		    76014001.002
  }
  target {
    id			    2
    name		    "sfun"
    description		    "Default Simulink S-Function Target."
    machine		    1
    linkNode		    [1 0 3]
  }
  target {
    id			    3
    name		    "rtw"
    machine		    1
    linkNode		    [1 2 0]
  }
}
