%	Copyright © 2015 Alexander Isakov. Contact: <alexander.isakov@tuhh.de>
%	Copyright © 2015 Marina Krotofil. Contact: <marina.krotofil@tuhh.de>
%	Copyright © 2015 TUHH-SVA Security in Distributed Applications.
%	All rights reserved.
%	License: http://opensource.org/licenses/BSD-3-Clause
%	----------------------------------------------------------------------
function overview(varargin)

    args = varargin;
    data = createData();
    interface = createInterface();
    updateInterface();
    
    function gui = createInterface()
        % Open a window and add some menus
        gui.window = figure( ...
            'Name', 'Overview', ...
            'NumberTitle', 'off', ...
            'MenuBar', 'none', ...
            'Toolbar', 'figure');
                
        %menu
        gui.menu = uimenu(gui.window, 'Label', 'File');
        uimenu(gui.menu, 'Label', 'Exit', 'Callback', @onExit);
        
        function onExit( ~, ~ )
            delete(interface.window);
        end % onExit
        
        rootPanel = uiextras.HBoxFlex(...
            'Parent', gui.window, ...
            'Spacing', 3);
        mvspanel = uiextras.BoxPanel(...
            'Parent', rootPanel, ...
            'Title', 'Control variables' );
        xmeaspanel = uiextras.BoxPanel( ...
            'Parent', rootPanel, ...
            'Title', 'Measurements');
        set(rootPanel, 'Sizes', [-1,-1]);
        
        mvsbox = uiextras.VBox(...
            'Parent', mvspanel, ...
            'Padding', 3, ...
            'Spacing', 3 );
        gui.mvs.popup.handler = uicontrol( ...
            'Parent', mvsbox, ...
            'Style', 'popup', ...
            'String', data.xmvs.titles(:), ...
            'Value', 1, ...
            'Callback', @onMvChanged);
        gui.mvs.axes = axes(...
            'Parent', mvsbox);
        set(mvsbox, 'Sizes', [28 -1]);

        function onMvChanged(src, ~)
            interface.mvs.popup.latest = false;
            interface.mvs.popup.selected = get(src, 'Value');
            updateInterface();
        end % onMvChanged
        
        xmeasbox = uiextras.VBox(...
            'Parent', xmeaspanel, ...
            'Padding', 3, ...
            'Spacing', 3 );
        gui.xmeas.popup.handler = uicontrol( ...
            'Parent', xmeasbox, ...
            'Style', 'popup', ...
            'String', data.xmeas.titles(:), ...
            'Value', 1, ...
            'Callback', @onXmChanged);
        gui.xmeas.axes = axes(...
            'Parent', xmeasbox);
        set(xmeasbox, 'Sizes', [28 -1]);

        function onXmChanged(src, ~)
            interface.xmeas.popup.latest = false;
            interface.xmeas.popup.selected = get(src, 'Value');
            updateInterface();
        end % onXmChanged
        
        gui.mvs.popup.latest = false;
        gui.mvs.popup.selected = 1;
        gui.xmeas.popup.latest = false;
        gui.xmeas.popup.selected = 1;
        maximize(gui.window);
    end % createInterface

    function updateInterface()
        if ~interface.mvs.popup.latest
            plot(interface.mvs.axes, ...
                 data.tout, ...
                 data.xmvs.values(:, interface.mvs.popup.selected));
            title(interface.mvs.axes, ...
                  data.xmvs.titles{interface.mvs.popup.selected});
            ylabel(interface.mvs.axes, ...
                   data.xmvs.ylabels{interface.mvs.popup.selected});
            xlabel(interface.mvs.axes, ...
                   data.xmvs.xlabels{interface.mvs.popup.selected});
            axis tight;
            xlim([data.tout(1), data.tout(end)]);
        end
        if ~interface.xmeas.popup.latest
            plot(interface.xmeas.axes, ...
                 data.tout, ...
                 data.xmeas.values(:, interface.xmeas.popup.selected));
            title(interface.xmeas.axes, ...
                  data.xmeas.titles{interface.xmeas.popup.selected});
            ylabel(interface.xmeas.axes, ...
                   data.xmeas.ylabels{interface.xmeas.popup.selected});
            xlabel(interface.xmeas.axes, ...
                   data.xmeas.xlabels{interface.xmeas.popup.selected});
            axis tight;
            xlim([data.tout(1), data.tout(end)]);
        end
    end % updateInterface
end

