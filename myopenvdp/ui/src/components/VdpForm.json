{
  "type": "component",
  "mixins": [],

  "meta": {},

  "props": {
    "pgp-key": {
      "type": ["String", "Array"],
      "desc": "A PGP public key or an array of PGP public keys for which each entry must be an object with 2 properties : 'name' containing the name to be displayed and 'key' containing the PGP key",
      "examples": [
        "-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----",
        "[{\"name\":\"Key 1\",\"key\":\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----\"},{\"name\":\"Key 2\",\"key\":\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----\"}]"
      ],
      "category": "content",
      "required": true
    },

    "captcha-provider": {
      "type": "Function",
      "desc": "Provider of the captcha data (async function)",
      "returns": {
        "type": "Object",
        "desc": "Captcha data",
        "definition": {
          "key": {
            "required": true,
            "type": "String",
            "desc": "Unique key identifying this captcha data",
            "examples": ["8ec3d9f8c7fb0caa15f7edc6630c803d"]
          },
          "url": {
            "required": true,
            "type": "String",
            "desc": "URL of the captcha image",
            "examples": ["data:image/jpeg;base64:...", "https://backend/captcha-8ec3d9f8c7fb0caa15f7edc6630c803d.jpeg"]
          },
          "width": {
            "type": "Number",
            "desc": "Width of the captcha image in pixels",
            "examples": [300]
          },
          "height": {
            "type": "Number",
            "desc": "Height of the captcha image in pixels",
            "examples": [64]
          }
        }
      }
    },

    "attachment-max-size-bytes": {
      "type": "Number",
      "desc": "Maximum size of individual attachments, in bytes",
      "default": 2097152,
      "category": "behavior"
    },

    "attachment-allowed-extensions": {
      "type": "Array",
      "desc": "A list of allowed extension for attachments",
      "examples": ["['txt', 'png', 'jpg']"],
      "default": "['jpg', 'jpeg', 'png', 'txt']",
      "category": "behavior"
    },

    "logs-auto-scroll": {
      "type": "Boolean",
      "desc": "Automatically scroll to submission logs when a report is submitted",
      "default": "true",
      "values": ["true", "false"],
      "category": "behavior"
    },

    "logs-timestamp-format": {
      "type": "String",
      "desc": "Format of the timestamps for submission logs. See https://github.com/felixge/node-dateformat#mask-options.",
      "default": "yyyy/mm/dd HH:MM:ss.l",
      "category": "style",
      "examples": ["isoDateTime", "UTC:h:MM:ss TT Z"]
    },

    "notifications-position": {
      "type": "String",
      "desc": "Default position for notifications",
      "default": "top",
      "values": ["top-left", "top-right", "bottom-left", "bottom-right", "top", "bottom", "left", "right", "center"],
      "category": "behavior"
    },

    "success-notification-position": {
      "type": "String",
      "desc": "Position for success notification. Inherits from 'notifications-position' if not set",
      "values": ["top-left", "top-right", "bottom-left", "bottom-right", "top", "bottom", "left", "right", "center"],
      "category": "behavior"
    },

    "errors-notification-position": {
      "type": "String",
      "desc": "Position for errors notification. Inherits from 'notifications-position' if not set",
      "values": ["top-left", "top-right", "bottom-left", "bottom-right", "top", "bottom", "left", "right", "center"],
      "category": "behavior"
    },

    "disclosure-policy-notification-position": {
      "type": "String",
      "desc": "Position for disclosure policy notification. Inherits from 'notifications-position' if not set",
      "values": ["top-left", "top-right", "bottom-left", "bottom-right", "top", "bottom", "left", "right", "center"],
      "category": "behavior"
    },

    "translations": {
      "type": "object",
      "desc": "Custom translations",
      "examples": [
        "{\"vulnerabilitySummaryTitle\": \"Please describe the vulnerability\",\"disclosurePolicyCheckbox\":\"I have read and I accept the {{disclosurePolicy}}\"}"
      ]
    }
  },

  "events": {
    "submit": {
      "desc": "Emitted when the report is submitted ; one of 'success' or 'failure' callback MUST be called after receiving this event, on the component will stop to behave correctly.",
      "params": {
        "payload": {
          "type": "Object",
          "desc": "The content of the report",
          "definition": {
            "captcha": {
              "type": "Object",
              "desc": "Captcha answer data (if captcha-provider provided)",
              "definition": {
                "key": {
                  "type": "String",
                  "desc": "Unique key identifying the captcha, as given by the captcha-provider"
                },
                "value": {
                  "type": "String",
                  "desc": "Captcha answer given by the reporter"
                }
              }
            },
            "report": {
              "type": "Object",
              "desc": "The report",
              "definition": {
                "title": {
                  "type": "String",
                  "desc": "The title of the report"
                },
                "product": {
                  "type": "String",
                  "desc": "The product affected by the vulnerability"
                },
                "cvss": {
                  "type": "Object",
                  "desc": "CVSS3 metrics",
                  "definition": {
                    "AV": {
                      "type": "string",
                      "desc": "Attack Vector",
                      "values": ["N", "A", "L", "P"]
                    },
                    "AC": {
                      "type": "string",
                      "desc": "Attack Complexity",
                      "values": ["L", "H"]
                    },
                    "PR": {
                      "type": "string",
                      "desc": "Privileges Required",
                      "values": ["N", "L", "H"]
                    },
                    "S": {
                      "type": "string",
                      "desc": "Scope",
                      "values": ["U", "C"]
                    },
                    "A": {
                      "type": "string",
                      "desc": "Availability",
                      "values": ["N", "L", "H"]
                    },
                    "I": {
                      "type": "string",
                      "desc": "Integrity",
                      "values": ["N", "L", "H"]
                    },
                    "C": {
                      "type": "string",
                      "desc": "Confidentiality",
                      "values": ["N", "L", "H"]
                    },
                    "UI": {
                      "type": "string",
                      "desc": "User Interaction",
                      "values": ["N", "R"]
                    }
                  }
                },
                "cvss_score": {
                  "type": "Number",
                  "desc": "Score of the CVSS"
                },
                "pgp_data": {
                  "type": "String",
                  "desc": "A PGP-encrypted ZIP archive containing the report's sensitive data (description, attachments, reporter information, ...)"
                },
                "hash_algorithm": {
                  "type": "string",
                  "desc": "The hash algorithm used to create the 'digest' of the ZIP archive before encryption"
                },
                "digest_hex": {
                  "type": "string",
                  "desc": "The hash of the ZIP archive generated by the 'hash_algorithm' before encryption"
                }
              }
            }
          }
        },
        "success": {
          "type": "Function",
          "desc": "A callback to call if the report has been handled successfully",
          "params": {
            "message": {
              "type": "String",
              "desc": "The success message"
            }
          }
        },
        "failure": {
          "type": "Function",
          "desc": "A callback to call if handling the report has failed",
          "params": {
            "message": {
              "type": "String",
              "desc": "The failure message"
            }
          }
        }
      }
    }
  }
}
